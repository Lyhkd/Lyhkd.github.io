{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project_layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ClassNotes/HW%20summary/","title":"\u6d4b\u8bd5","text":"<p>HW summary</p>"},{"location":"ClassNotes/HW%20summary/#hw2","title":"HW2","text":"<p>1-1</p> <p>**1-2**If a linear list is represented by a linked list, the addresses of the elements in the memory must be consecutive.(F)</p> <p>2-1</p> <p></p> <p>2-2</p> <p></p> <p>2-3</p> <pre><code>// Add Two Polynomials\nPolynomial Add(Polynomial a, Polynomial b){\n    Polynomial sum, pa, pb, psum, sumnow;\n    sum = (Polynomial)malloc(sizeof(struct Node));\n    sumnow = sum;\n    pa = a;\n    pb = b;\n    int exa, exb, find_flag = 0;\n    while(1){\n        psum = (Polynomial)malloc(sizeof(struct Node));\n        exa = pa-&gt;Exponent;\n        exb = pb-&gt;Exponent;\n        psum-&gt;Next = NULL;\n        psum-&gt;Exponent = exa &gt;= exb ? exa : exb;\n        psum-&gt;Coefficient = exa &gt; exb ? pa-&gt;Coefficient : pb-&gt;Coefficient;\n        if (exa == exb){\n            psum-&gt;Coefficient = pa-&gt;Coefficient + pb-&gt;Coefficient;\n            //printf(\"%d + %d\\n\",pa-&gt;Coefficient,pb-&gt;Coefficient);\n        }\n        if (psum-&gt;Coefficient != 0 ){\n            sumnow-&gt;Next = psum;\n            sumnow = psum;\n            //printf(\"add p %d %d\\n\",psum-&gt;Coefficient, psum-&gt;Exponent);\n        }\n        if (exa == exb){\n            if(pa-&gt;Next == NULL || pb-&gt;Next == NULL){\n            //printf(\"before break %d %d \\n\", pa-&gt;Exponent, pb-&gt;Exponent);\n            break;\n        }  \n                pa = pa-&gt;Next;\n                pb = pb-&gt;Next;\n        } else if (exa &gt; exb &amp;&amp; pa-&gt;Next != NULL){\n            pa = pa-&gt;Next;\n        } else if (pb-&gt;Next != NULL){\n            pb = pb-&gt;Next;\n        }\n    }\n    if (pa-&gt;Next != NULL){\n        sumnow-&gt;Next = pa-&gt;Next;\n    }\n    if (pb-&gt;Next != NULL){\n        sumnow-&gt;Next = pb-&gt;Next;\n    }\n    return sum;\n}\n</code></pre> <pre><code>// Reverse Linked List\nList Reverse( List L ){\n    List cur, head, prev;\n    head = NULL;\n    cur = L-&gt;Next;\n    prev = L-&gt;Next;\n    while(cur-&gt;Next){\n        prev = cur;\n        cur = cur-&gt;Next;\n        prev-&gt;Next = head;\n        head = prev;\n    }\n    cur-&gt;Next = prev;\n    L-&gt;Next = cur;\n    return L\n}\n\nList Reverse(List L){\n    List new_head, old_head, tmp;\n    new_head = NULL; \n    tmp = L-&gt;Next;\n    while(tmp){\n        old_head = tmp;\n        tmp = tmp-&gt;Next;\n        old_head -&gt; Next = new_head;\n        new_head = old_head;\n    }\n    L-&gt;Next = new_head;\n    return L;\n}\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw3","title":"HW3","text":"<p>2-1</p> <ol> <li>push(o o o) pop(o o o) push(p) pop(p) push(s) pop(s)</li> <li>push(o o) pop (o o) push(o) pop(o)</li> <li>push(o) pop(o) push(o o) pop(o o)</li> <li>push(o) pop(o) push(o) pop(o) push(o) pop(o)</li> <li>push(o o) pop(o) push(o) pop(o o)</li> </ol> <p>2-2</p> <pre><code>// Pop Sequence\n#include &lt;stdio.h&gt;\n\nvoid Push(int *st, int value);\nint Pop(int *st);\n\nint main() {\n    int M, N, K, flag=1;\n    scanf(\"%d %d %d\", &amp;M, &amp;N, &amp;K);\n    for(int iter=0;iter&lt;K;iter++) {\n        int st[M + 1], a[N], input[N];\n        st[0] = 0;\n        flag = 1;\n        int *ptr = a;\n        for (int i = 0; i &lt; N; i++) {\n            scanf(\"%d\", &amp;input[i]);\n            a[i] = i + 1;\n        }\n        for (int i = 0; i &lt; N; i++) {\n            while (st[0] == 0 || input[i] &gt; st[*st]) {\n                Push(st, *ptr);\n                ptr++;\n                if (st[0] &gt; M || ptr &gt; &amp;a[N]) {\n                    printf(\"NO\\n\");\n                    flag=0;\n                    break;\n                }\n            }\n            if (input[i] == st[*st]) {\n                Pop(st);\n            }\n            if (input[i] &lt; st[*st]) {\n                printf(\"NO\\n\");\n                flag=0;\n                break;\n            }\n            if(flag == 0){\n                break;\n            }\n        }\n        if(st[0] == 0 &amp;&amp; flag){\n            printf(\"YES\\n\");\n        }\n\n    }\n    return 0;\n}\n\nvoid Push(int *st, int value){\n    st[++*st] = value;\n}\nint Pop(int *st){\n    int value = st[*st];\n    (*st)--;\n    return value;\n}\n</code></pre> <p>2-3</p>"},{"location":"ClassNotes/HW%20summary/#hw4","title":"HW4","text":"<p>1-1:It is always possible to represent a tree by a one-dimensional integer array.(T)</p> <p>n\u53c9\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7236\u8282\u70b9i\uff0c\u4ed6\u7684\u5b50\u8282\u70b9\u53ef\u4ee5\u5b58\u653e\u5728 ni, ni+1, ni+2\u2026</p> <p>1-2:There exists a binary tree with 2016 nodes in total, and with 16 nodes having only one child.(F)</p> <p>\u5047\u8bbe\u6ca1\u6709\u5b69\u5b50\u7684\u7ed3\u70b9\uff08\u53f6\u7ed3\u70b9\uff09\u4e2a\u6570\u4e3an\u2080\uff0c\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u7ed3\u70b9\uff08\u5ea6\u4e3a1\u7684\u7ed3\u70b9\uff09\u4e2a\u6570\u4e3an\u2081\uff0c\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u7ed3\u70b9\uff08\u5ea6\u4e3a2\u7684\u7ed3\u70b9\uff09\u4e2a\u6570\u4e3an\u2082\u3002 \u5219n\u2080+n\u2081+n\u2082=2016 \u2235n\u2080=n\u2082+1\uff08\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff1a\u53f6\u7ed3\u70b9\u4e2a\u6570\u7b49\u4e8e\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u4e2a\u6570\u52a01\uff09 \u2234n\u2080+n\u2081+n\u2082=2016 \u21e8n\u2082+1+16+n\u2082=2016 \u21e82n\u2082=1999 n\u2082\u9664\u4e0d\u5c3d\uff0c\u6240\u4ee5\u7b54\u6848\u9519\u8bef\u3002</p> <p>2-1</p> <p></p> <p>2-2</p> <p>2-3</p> <p>2-4</p> <p></p> <p>\u5de6\u8fb9\u7a7a\uff0c\u6307\u5411\u904d\u5386\u987a\u5e8f\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u53f3\u8fb9\u7a7a\uff0c\u6307\u5411\u904d\u5386\u987a\u5e8f\u7684\u540e\u4e00\u4e2a\u8282\u70b9</p> <pre><code>//\u6811\u540c\u6784\u7684\u5224\u65ad\nint Isomorphic(Tree T1, Tree T2){\n    Tree ptrt1 = T1, ptrt2 = T2;\n    int flag1 = 0, flag2 = 0, result = 1;\n    if(ptrt1 == NULL &amp;&amp; ptrt2 == NULL){\n        return 1;\n    } else if (ptrt1 == NULL || ptrt2 == NULL){\n        return 0;\n    }\n    if(ptrt1-&gt;Element == ptrt2-&gt;Element){\n        flag1 = Isomorphic(ptrt1-&gt;Left, ptrt2-&gt;Left);\n        if(flag1){\n            flag2 = Isomorphic(ptrt1-&gt;Right, ptrt2-&gt;Right);\n        } else {\n            flag1 = Isomorphic(ptrt1-&gt;Left, ptrt2-&gt;Right);\n            flag2 = Isomorphic(ptrt1-&gt;Right, ptrt2-&gt;Left);\n        }\n        result = result &amp; flag1 &amp; flag2;\n    } else {\n        return 0;\n    }\n    if(result){\n        return 1;\n    } else {\n        return 0;\n    }\n}\n</code></pre> <pre><code>// zigzagging\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct TreeNode *Tree;\nstruct TreeNode{\n    int value;\n    Tree Left;\n    Tree Right;\n};\n\nTree inductFromTwoOrders(int *io, int *po, int size);\nint findI(int i, int *A, int size);\nvoid levelOrder(Tree ptr);\nint main(){\n    int N, inorder[30], postorder[30];\n    scanf(\"%d\",&amp;N);\n    for(int i=0; i&lt;N; i++){\n        scanf(\"%d\", &amp;inorder[i]);\n    }\n    for(int i=0; i&lt;N; i++){\n        scanf(\"%d\", &amp;postorder[i]);\n    }\n    Tree p = inductFromTwoOrders(inorder, postorder, N);\n\n    //printf(\"%d %d %d\", p-&gt;value, p-&gt;Left-&gt;value, p-&gt;Right-&gt;value);\n    levelOrder(p);\n}\n\nvoid levelOrder(Tree ptr){\n    int first = 1;\n    Tree q;\n    int level[35] = {0}, current_level = 0;\n    int stack[35] = {0};\n    level[0] = 1;\n    struct TreeNode qu[100];\n    int r = 0, l = 0;\n    qu[++r] = *ptr;\n    while(r-l!=0){\n        q = &amp;qu[++l];\n        if(current_level%2 == 1){\n            printf(\" %d\",q-&gt;value);\n        } else if(current_level == 0){\n            printf(\"%d\",q-&gt;value);\n        } else{\n            stack[++stack[0]]=q-&gt;value;\n        }\n        if(q-&gt;Left!=NULL){\n            qu[++r] = *(q-&gt;Left);\n            level[current_level+1]++;\n        }\n        if(q-&gt;Right!=NULL){\n            qu[++r] = *(q-&gt;Right);\n            level[current_level+1]++;\n        }\n        level[current_level]--;\n        if(level[current_level]== 0){\n            current_level++;\n            while(stack[0]&gt;0){\n                printf(\" %d\",stack[stack[0]]);\n                stack[0]--;\n            }\n        }\n    }\n\n}\nTree inductFromTwoOrders(int *io, int *po, int size){\n    int cut_pos = findI(po[size-1], io, size);\n    if(cut_pos == -1){\n        printf(\"error\\n\");\n        return 0;\n    }\n    Tree root = (Tree)malloc(sizeof(struct TreeNode));\n    root-&gt;value = po[size-1];\n    //printf(\"value :%d\\n\", root-&gt;value);\n    int *left = io, l_size = cut_pos;\n    int *right = io + cut_pos+1, r_size = size - cut_pos - 1;\n    int *po_left = po, *po_right = &amp;po[cut_pos];\n    if (l_size == 0){\n        root-&gt;Left = NULL;\n    } else {\n        root-&gt;Left = inductFromTwoOrders(left, po_left, l_size);\n    }\n    if (r_size == 0){\n        root-&gt;Right = NULL;\n    } else {\n        root-&gt;Right = inductFromTwoOrders(right, po_right, r_size);\n    }    \n    return root;\n\n}\n\nint findI(int i, int *A, int size){\n    if(i == 5){\n        int p = 0;\n    }\n    for(int j=0; j&lt;size; j++){\n        if(A[j] == i){\n            return j;\n        }\n    }\n    return -1;\n}\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw5","title":"HW5","text":"<p>1-1:In a binary search tree, the keys on the same level from left to right must be in sorted (non-decreasing) order.</p> <p>1-2:In a binary search tree which contains several integer keys including 4, 5, and 6, if 4 and 6 are on the same level, then 5 must be their parent.\uff08F\uff09</p> <p>5\u53ef\u4ee5\u4f5c\u4e3a4\u548c6\u7684\u7956\u5148\uff0c\u4e0d\u4e00\u5b9a\u4f5c\u4e3a\u76f4\u63a5\u8fde\u63a5\u7684\u7236\u6bcd\u3002\u6bd4\u5982\u53ef\u4ee5\u662f4 &lt;- 2 &lt;- 5 -&gt; 7 -&gt; 6\uff0c\u6b64\u65f64\u548c6\u4f9d\u7136\u5728\u4e00\u4e2a\u5c42\u6b21\u4e0a\u3002</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>https://blog.csdn.net/best_LY/article/details/120956505</p> <p>\u6298\u534a\u67e5\u627e\u7684\u5224\u5b9a\u6811</p> <p>https://blog.csdn.net/weixin_53965540/article/details/121583290</p> <p>https://blog.51cto.com/u_14866376/4858577</p> <p>\u82e5\u9009\u62e9\u5411\u4e0a\u53d6\u6574\uff1a\u5bf9\u4e8e\u8be5\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u90fd\u5927\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u9ad8\u5ea6\uff0c\u4e14\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u4e2a\u6570\u90fd\u5927\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u4e2a\u6570\u3002</p> <p>\u82e5\u9009\u62e9\u5411\u4e0b\u53d6\u6574\uff1a\u5bf9\u4e8e\u8be5\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u9ad8\u5ea6\uff0c\u4e14\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u4e2a\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u4e2a\u6570\u3002</p> <pre><code>List Reverse(List L){\n    List ptr1 = L-&gt;Next, prev = NULL, cur = L-&gt;Next;\n    while (ptr1 != NULL){\n        ptr1 = ptr1-&gt;Next;\n        cur-&gt;Next = prev;\n        prev = cur;\n        cur = ptr1;\n    }\n    L-&gt;Next = prev;\n    return L;\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw6","title":"HW6","text":"<p>1-1: If a complete binary tree with 137 nodes is stored in an array (root at position 1), then the nodes at positions 128 and 137 are at the same level. T</p> <p>\u76f8\u540c\u6df1\u5ea6h\u7684\u8282\u70b9\u57282^h ~ 2^(h+1)-1\u8303\u56f4\u5185\u3002\u6ce8\u610f\u6839\u7684\u6df1\u5ea6\u4e3a0</p> <p>1-2: The inorder traversal sequence of any min-heap must be in sorted order. F</p> <p>4 &lt;- 1 -&gt; 5 inorder traversal is 4 1 5</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u4e5f\u53ef\u80fd\u662f\u5012\u6570\u7b2c\u4e8c\u5c42\uff0c\u6bd4\u5982\u8bf4\u6700\u540e\u65b0\u52a0\u5165\u4e86\u4e00\u4e2a\u5c0f\u4e8e\u6700\u5927\u503c\uff08\u6700\u5de6\u53f6\u5b50\uff09\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u4f1a\u4f5c\u4e3a\u6700\u5927\u8282\u70b9\u7684\u5de6\u5b69\u5b50\uff0c\u90a3\u4e48\u6700\u5927\u8282\u70b9\u5c31\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\u4e86\uff0c\u4f46\u5b83\u4ecd\u7136\u662f\u6700\u5927\u7684\u8282\u70b9\u3002</p> <pre><code>/* \u7f16\u7a0b\u9898 \u5b8c\u5168\u4e8c\u53c9\u641c\u7d22\u6811*/\n#include &lt;stdio.h&gt;\nint input[1010], output[1010], n, t = 0;\n\nvoid sort(int *A, int N){\n    for(int i=0; i&lt;N; i++){\n        for(int j=0; j&lt;N-i-1; j++){\n            if(A[j] &gt; A[j+1]){\n                int temp = A[j];\n                A[j] = A[j+1];\n                A[j+1] = temp;\n            }\n        }\n    }\n}\n\nvoid inOrder(int root) {\n    if (root &gt;= n) return ;\n    inOrder(root * 2 + 1);\n    level[root] = in[t++];\n    inOrder(root * 2 + 2);\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++)\n        scanf(\"%d\", &amp;input[i]);\n    sort(input, n);\n    inOrder(0);\n    printf(\"%d\", output[0]);\n    for (int i = 1; i &lt; n; i++)\n        printf(\" %d\", output[i]);\n    return 0;\n}\n</code></pre> <pre><code>/* 6-1 Percolate Up and Down */\n\nvoid PercolateUp( int p, PriorityQueue H ){\n    ElementType x = H-&gt;Elements[p];\n    int i;\n    for(i=p; H-&gt;Elements[i/2] &gt; x; i = i/2){\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = x;\n}\nvoid PercolateDown( int p, PriorityQueue H ){\n    ElementType x = H-&gt;Elements[p];\n    int i;\n    int Child;\n    for(i = p; 2*i &lt;= H-&gt;Size; i = Child){\n        Child = 2*i;\n        if(Child+1 &lt;= H-&gt;Size &amp;&amp; H-&gt;Elements[Child+1] &lt; H-&gt;Elements[Child]){\n            Child += 1;\n        }\n        if(x &gt; H-&gt;Elements[Child]){\n            H-&gt;Elements[i] = H-&gt;Elements[Child];\n        } else {\n            break;\n        }\n    }\n    H-&gt;Elements[i] = x;\n}\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw7","title":"HW7","text":"<p>1-1: In Union/Find algorithm, if Unions are done by size, the depth of any node must be no more than N/2, but not O(logN). F</p> <p>Time complexity of N Union and M Find operations is now O( N + M log2 N ). Let T be a tree created by union-by-size with N nodes, then height(T)&lt;=(log2N)+1;</p> <p>2-1: </p> <p></p> <p></p>"},{"location":"ClassNotes/HW%20summary/#hw8","title":"HW8","text":"<p>1-1: In a connected graph, the number of edges must be greater than the number of vertices minus 1. F</p> <p>equal or greater than (no less than)</p> <p>1-2: In a directed graph, the sum of the in-degrees must be equal to the sum of the out-degrees of all the vertices. T</p> <p>1-3: If a directed graph G=(V, E) is weakly connected, then there must be at least |V| edges in G. F</p> <p>at least |V|-1 edges</p> <p>2-1: If graph G is NOT connected and has 35 edges, then it must have at least ____ vertices.</p> <p>10</p> <p>\\(\\frac{(n-1)(n-2)}2 \\geq 35\\)\u5373\u9664\u4e86\u4e00\u4e2a\u5b64\u7acb\u8282\u70b9\u610f\u5916\u7684\u5b50\u56fe\uff0c\u81f3\u5c11\u6db5\u76d6\u6240\u6709\u7684\u8fb9</p> <p>2-2: A graph with 90 vertices and 20 edges must have at least __ connected component(s).</p> <p>70</p> <p>\u5bf9\u4e8e\u591a\u4e2a\u8054\u901a\u5206\u91cf\u7684\u56fe r = E - V + C + 1</p> <p>1 = 20 - 90 + C + 1</p> <p></p> <p>2-4: Given an undirected graph G with 16 edges, where 3 vertices are of degree 4, 4 vertices are of degree 3, and all the other vertices are of degrees less than 3. Then G must have at least __ vertices.</p> <p>11</p> <p>32 = 12 + 12 + 2 * n</p> <p>n = 4</p> <p>V = 3 + 4 + 4</p> <p></p> <pre><code>//6-1 Is Topological Orger\n\nvoid updateDeg(int *deg, LGraph Graph){\n    for(int i=0; i&lt;=Graph-&gt;Nv;i++){\n        deg[i] = 0;\n    }\n    for(int i=0; i&lt;Graph-&gt;Nv; i++){\n        PtrToAdjVNode pNode = Graph-&gt;G[i].FirstEdge;\n        while(pNode!= NULL){\n            deg[pNode-&gt;AdjV]++;\n            pNode = pNode-&gt;Next;\n        }\n    }\n}\n\nbool IsTopSeq( LGraph Graph, Vertex Seq[] ){\n    int deg[MaxVertexNum];\n    updateDeg(deg, Graph);\n    for(int i=0; i&lt;Graph-&gt;Nv; i++){\n        if(deg[Seq[i]-1] == 0){\n            //printf(\"remove %d\\n\",Seq[i]-1);\n            PtrToAdjVNode pNode = Graph-&gt;G[Seq[i]-1].FirstEdge;\n            while(pNode!= NULL){\n                deg[pNode-&gt;AdjV]--;\n                pNode = pNode-&gt;Next;\n            }\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n</code></pre> <pre><code>//7-1 Hamiltonian Cycle\n#include &lt;stdio.h&gt;\n\nint G[201][201] = {0};\nint V, E;\nint Hamilton(int Seq[], int len){\n    if(Seq[0] != Seq[len-1] || len != V+1){\n        return 0;\n    }\n    int mark[V+1];\n    for(int i=1; i&lt;=V; i++){\n        mark[i] = 0;\n    }\n    for(int i=0; i&lt;len-1; i++) {\n        int v_s = Seq[i], v_e = Seq[i + 1];\n        mark[v_e] = mark[v_s] = 1;\n        if(G[v_s][v_e] == 0){\n            return 0;\n        }\n    }\n\n    for(int i=1; i&lt;=V; i++){\n        if(mark[i] == 0){\n            return 0;\n        }\n    }\n    return 1;\n}\nint main(){\n    scanf(\"%d %d\",&amp;V, &amp;E);\n    for(int i=0; i&lt;E; i++){\n        int v_s,v_e;\n        scanf(\"%d %d\", &amp;v_s, &amp;v_e);\n        G[v_s][v_e] = G[v_e][v_s] = 1;\n    }\n    int N;\n    scanf(\"%d\",&amp;N);\n    for(int i=0; i&lt;N; i++){\n        int len;\n        scanf(\"%d\",&amp;len);\n        int Seq[len];\n        for(int j=0; j&lt;len; j++){\n            scanf(\"%d\",&amp;Seq[j]);\n        }\n        if(Hamilton(Seq,len)){\n            printf(\"YES\\n\");\n        } else {\n            printf(\"NO\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw9","title":"HW9","text":"<p>1-1:In a weighted undirected graph, if the length of the shortest path from <code>b</code> to <code>a</code> is 12, and there exists an edge of weight 2 between <code>c</code> and <code>b</code>, then the length of the shortest path from <code>c</code> to <code>a</code> must be no less than 10. T</p> <p>\u5982\u679cc\u5728b-a\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u90a3\u4e48c-a\u7684\u6700\u77ed\u8def\u5c31\u4e3a10</p> <p>\u5982\u679cc\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u90a3\u4e48c-a\u7684\u6700\u77ed\u8def\u5c31\u4e0d\u786e\u5b9a\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u5927\u4e8e10\uff0c\u4e0d\u7136c-a\u7684\u8ddd\u79bb\u5c31\u5c0f\u4e8e\u7b49\u4e8e9\uff0c\u90a3\u4e48b-a\u7684\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u66f4\u65b0\u4e3ac-b-a = c-a + b-a &lt;= 9 + 2 = 11</p>"},{"location":"ClassNotes/HW%20summary/#hw10","title":"HW10","text":"<p>2-1</p> <p></p> <p>2-2</p> <p></p> <p>\u5f53\u4e14\u4ec5\u5f53G\u8054\u901a\u65f6\u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728\u3002\uff08\u4f46\u4e0d\u4fdd\u8bc1unique\uff09</p> <p>2-3</p> <p></p> <p>2-4</p> <p></p>"},{"location":"ClassNotes/verilog/","title":"\u6570\u5b57\u903b\u8f91","text":""},{"location":"ClassNotes/verilog/#1","title":"1 \u6570\u636e\u7c7b\u578b","text":"<p>wire reg</p> <p>wire \uff1a\u7ebf\u7f51\u578b\u6570\u636e\u7c7b\u578b\uff0cverilog\u8bed\u6cd5\u4e2d\u7684\u4e00\u79cd\u4e3b\u8981\u6570\u636e\u7c7b\u578b\uff0c\u7528\u4e8e\u8868\u793a\u7ebf\u7f51\u578b\u4fe1\u53f7\uff0c\u4e0e\u5b9e\u9645\u7535\u8def\u4e2d\u7684\u4fe1\u53f7\u8fde\u7ebf\u76f8\u5bf9\u5e94\u3002wire\u662fverilog\u4e2d\u7684\u9ed8\u8ba4\u6570\u636e\u7c7b\u578b\uff0c\u6b64\u4f8b\u4e2d\u7684\u8f93\u5165\u8f93\u51fa\u4fe1\u53f7\u6ca1\u6709\u6307\u5b9a\u6570\u636e\u7c7b\u578b\uff0c\u5219\u9ed8\u8ba4\u4e3awire\u578b\u3002\u9664wire\u5916\uff0c\u53e6\u5916\u4e00\u79cd\u4e3b\u8981\u6570\u636e\u7c7b\u578b\u4e3areg\uff0c\u8868\u793a\u5bc4\u5b58\u5668\u7c7b\u578b\u6570\u636e\u3002</p> <p>reg \uff1a\u9664wire\u7c7b\u578b\u5916\uff0c\u53e6\u5916\u4e00\u79cd\u5e38\u7528\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e00\u822c\u8868\u793a\u5bc4\u5b58\u5668\u7c7b\u578b\u6570\u636e\uff0c\u4e0d\u8fc7\u5e76\u4e0d\u7edd\u5bf9\uff0c\u8bb0\u4f4f\u4e00\u6761\u539f\u5219\uff1a\u5728always\u5757\u5185\u88ab\u8d4b\u503c\u7684\u4fe1\u53f7\u5e94\u5b9a\u4e49\u6210reg\u578b\uff0c\u7528assign\u8bed\u53e5\u8d4b\u503c\u7684\u4fe1\u53f7\u5e94\u5b9a\u4e49\u6210wire\u578b\u3002</p> <p>\u8bbe\u8ba1\u4e2d\uff0c\u8f93\u5165\u4fe1\u53f7\u4e00\u822c\u6765\u8bf4\u4e0d\u80fd\u5224\u65ad\u51fa\u4e0a\u4e00\u7ea7\u662f\u5bc4\u5b58\u5668\u8f93\u51fa\u8fd8\u662f\u7ec4\u5408\u903b\u8f91\u8f93\u51fa\uff0c\u5bf9\u4e8e\u672c\u7ea7\u6765\u8bf4\uff0c\u5c31\u5f53\u6210\u4e00\u6839\u5bfc\u7ebf\uff0c\u5373wire\u578b\u3002\u800c\u8f93\u51fa\u4fe1\u53f7\u5219\u7531\u81ea\u5df1\u6765\u51b3\u5b9a\u662freg\u8fd8\u662f\u7ec4\u5408\u903b\u8f91\u8f93\u51fa\uff0cwire\u548creg\u578b\u90fd\u53ef\u4ee5\u3002\u4f46\u4e00\u822c\u7684\uff0c\u6574\u4e2a\u8bbe\u8ba1\u7684\u5916\u90e8\u8f93\u51fa\uff08\u5373\u6700\u9876\u5c42\u6a21\u5757\u7684\u8f93\u51fa\uff09\uff0c\u8981\u6c42\u662freg\u8f93\u51fa\uff0c\u8fd9\u6bd4\u8f83\u7a33\u5b9a\u3001\u6247\u51fa\u80fd\u529b\u597d\u3002</p> <p>\u4f46\u82e5\u6b64\u53d8\u91cf\u8981\u653e\u5728begin\u2026end\u4e4b\u5185\uff0c\u5219\u8be5\u53d8\u91cf\u53ea\u80fd\u662freg\u578b\uff1b\u5728begin\u2026end\u4e4b\u5916\uff0c\u5219\u7528wire\u578b\uff1b\u4f7f\u7528wire\u578b\u65f6\uff0c\u5fc5\u987b\u642d\u914dassign\uff1breg\u578b\u53ef\u4ee5\u4e0d\u7528\u3002input\u3001output\u3001inout\u9884\u8bbe\u503c\u90fd\u662fwire\u578b\u3002</p> <p>\u5728Verilog\u4e2d\u4f7f\u7528reg\u578b\uff0c\u5e76\u4e0d\u8868\u793a\u7efc\u5408\u51fa\u6765\u5c31\u662f\u6682\u5b58\u5668register\uff1a\u5728\u7ec4\u5408\u7535\u8def\u4e2d\u4f7f\u7528reg\uff0c\u7ec4\u5408\u540e\u53ea\u662fnet\uff1b\u5728\u65f6\u5e8f\u7535\u8def\u4e2d\u4f7f\u7528reg\uff0c\u5408\u6210\u540e\u624d\u662f\u4ee5Flip-Flop\u5f62\u5f0f\u8868\u793a\u7684register\u89e6\u53d1\u5668\u3002</p> <p>reg\u578b\u6570\u636e\u4fdd\u6301\u6700\u540e\u4e00\u6b21\u7684\u8d4b\u503c\uff0c\u800cwire\u578b\u6570\u636e\u9700\u8981\u6301\u7eed\u7684\u9a71\u52a8\u3002wire\u7528\u5728\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5assign\u4e2d\uff1breg\u7528\u4e8ealways\u8fc7\u7a0b\u8d4b\u503c\u8bed\u53e5\u4e2d\u3002</p>"},{"location":"ClassNotes/verilog/#2","title":"2 \u8d4b\u503c","text":""},{"location":"ClassNotes/verilog/#21","title":"2.1\u8fde\u7eed\u8d4b\u503c","text":"<p><code>assign</code>\u8bed\u53e5\u4e5f\u79f0\u4e3a\u8fde\u7eed\u8d4b\u503c\uff0c\u5e76\u4e14\u59cb\u7ec8\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u3002</p> <p>\u7528\u4e8e\u5bf9wire\u578b\u53d8\u91cf\u8d4b\u503c\uff0c\u7b26\u53f7\u7528\u201dassign\u201d\u8868\u793a\uff0c\u683c\u5f0f\u5982\u4e0b\uff0c\u5176\u4e2dLHS\uff08left hand side\uff09\u6307\u5de6\u4fa7\uff0cRHS\uff08right hand side\uff09\u6307\u53f3\u4fa7</p> <p><code>assign     LHS_target = RHS_expression\uff1b</code></p> <p>LHS\u5fc5\u987b\u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u6216\u8005\u7ebf\u6027\u53d8\u91cf\uff0c\u4e0d\u80fd\u662f\u5bc4\u5b58\u5668</p> <p>RHS\u7684\u7c7b\u578b\u6ca1\u6709\u8981\u6c42\uff0c\u53ef\u4ee5\u662f\u6807\u91cf\u6216\u7ebf\u578b\u6216\u5b58\u5668\u5411\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u8c03\u7528\u3002</p> <p>\u963b\u585e\u8d4b\u503c\u548c\u975e\u963b\u585e\u8d4b\u503c\u90fd\u8981\u53d1\u751f\u5728inital\u6216always\u5757\u4e2d\uff0c\u5728\u5757\u5916\u9762\u7684\u8d4b\u503c\u53ea\u80fd\u4e3a\u8fde\u7eed\u8d4b\u503cassign</p>"},{"location":"ClassNotes/verilog/#22","title":"2.2\u8fc7\u7a0b\u8d4b\u503c","text":""},{"location":"ClassNotes/verilog/#211","title":"2.1.1\u963b\u585e\u8d4b\u503c","text":"<p>\u963b\u585e\u8d4b\u503c\u5c5e\u4e8e\u987a\u5e8f\u6267\u884c\uff0c\u5373\u4e0b\u4e00\u6761\u8bed\u53e5\u6267\u884c\u524d\uff0c\u5f53\u524d\u8bed\u53e5\u4e00\u5b9a\u4f1a\u6267\u884c\u5b8c\u6bd5\u3002</p> <p>\u963b\u585e\u8d4b\u503c\u8bed\u53e5\u4f7f\u7528\u7b49\u53f7 = \u4f5c\u4e3a\u8d4b\u503c\u7b26\u3002</p>"},{"location":"ClassNotes/verilog/#212","title":"2.1.2\u975e\u963b\u585e\u8d4b\u503c","text":"<p>\u975e\u963b\u585e\u8d4b\u503c\u5c5e\u4e8e\u5e76\u884c\u6267\u884c\u8bed\u53e5\uff0c\u5373\u4e0b\u4e00\u6761\u8bed\u53e5\u7684\u6267\u884c\u548c\u5f53\u524d\u8bed\u53e5\u7684\u6267\u884c\u662f\u540c\u65f6\u8fdb\u884c\u7684\uff0c\u5b83\u4e0d\u4f1a\u963b\u585e\u4f4d\u4e8e\u540c\u4e00\u4e2a\u8bed\u53e5\u5757\u4e2d\u540e\u9762\u8bed\u53e5\u7684\u6267\u884c\u3002</p> <p>\u975e\u963b\u585e\u8d4b\u503c\u8bed\u53e5\u4f7f\u7528\u5c0f\u4e8e\u7b49\u4e8e\u53f7 &lt;= \u4f5c\u4e3a\u8d4b\u503c\u7b26\u3002</p> <p>\u5207\u8bb0\u4e0d\u8981\u5728\u4e00\u4e2a\u8fc7\u7a0b\u7ed3\u6784\u4e2d\u6df7\u5408\u4f7f\u7528\u963b\u585e\u8d4b\u503c\u4e0e\u975e\u963b\u585e\u8d4b\u503c\u3002\u4e24\u79cd\u8d4b\u503c\u65b9\u5f0f\u6df7\u7528\u65f6\uff0c\u65f6\u5e8f\u4e0d\u5bb9\u6613\u63a7\u5236\uff0c\u5f88\u5bb9\u6613\u5f97\u5230\u610f\u5916\u7684\u7ed3\u679c\u3002</p> <p>\u66f4\u591a\u65f6\u5019\uff0c\u5728\u8bbe\u8ba1\u7535\u8def\u65f6\uff0calways \u65f6\u5e8f\u903b\u8f91\u5757\u4e2d\u591a\u7528\u975e\u963b\u585e\u8d4b\u503c\uff0calways \u7ec4\u5408\u903b\u8f91\u5757\u4e2d\u591a\u7528\u963b\u585e\u8d4b\u503c\uff1b\u5728\u4eff\u771f\u7535\u8def\u65f6\uff0cinitial \u5757\u4e2d\u4e00\u822c\u591a\u7528\u963b\u585e\u8d4b\u503c\u3002</p> <pre><code>always @(posedge clk) begin\n\u00a0 \u00a0 a &lt;= b ;\nend\n\u00a0\nalways @(posedge clk) begin\n\u00a0 \u00a0 b &lt;= a;\nend\n</code></pre>"},{"location":"ClassNotes/verilog/#_1","title":"\u8fc7\u7a0b\u8fde\u7eed\u8d4b\u503c","text":"<p>\u8fc7\u7a0b\u8fde\u7eed\u8d4b\u503c\u5c5e\u4e8e\u8fc7\u7a0b\u8d4b\u503c\u7684\u4e00\u79cd\uff0c\u4e5f\u662f\u5728initial\u548calways\u8bed\u53e5\u5757\u4e2d\u4f7f\u7528assign - deassign\u3001force - release\u7684\u8d4b\u503c\u8bed\u53e5\u3002\u8fd9\u6837\u7684\u8d4b\u503c\u8bed\u53e5\u4f1a\u6539\u53d8\u6240\u6709\u5728\u5176\u4ed6\u5730\u65b9\u5bf9wire\u6216reg \u7684\u8d4b\u503c\uff0c\u4e5f\u5c31\u662f\u4e0d\u7ba1\u4f60\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u6539\u53d8\u4e86LHS\u7684\u503c\uff0c\u4e5f\u4f1a\u88ab\u76f4\u63a5\u6539\u5199\u3002</p>"},{"location":"ClassNotes/verilog/#3","title":"3 \u65f6\u5e8f\u63a7\u5236","text":"<p>\u65f6\u5ef6\u63a7\u5236\u548c\u4e8b\u4ef6\u63a7\u5236\u3002\u4e8b\u4ef6\u63a7\u5236\u4e3b\u8981\u5206\u4e3a\u8fb9\u6cbf\u89e6\u53d1\u4e8b\u4ef6\u63a7\u5236\u4e0e\u7535\u5e73\u654f\u611f\u4e8b\u4ef6\u63a7\u5236\u3002</p>"},{"location":"ClassNotes/verilog/#_2","title":"\u65f6\u5ef6\u63a7\u5236","text":"<p>\u57fa\u4e8e\u65f6\u5ef6\u7684\u65f6\u5e8f\u63a7\u5236\u51fa\u73b0\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5b83\u6307\u5b9a\u4e86\u8bed\u53e5\u4ece\u5f00\u59cb\u6267\u884c\u5230\u6267\u884c\u5b8c\u6bd5\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u3002</p> <p>\u65f6\u5ef6\u53ef\u4ee5\u662f\u6570\u5b57\u3001\u6807\u8bc6\u7b26\u6216\u8005\u8868\u8fbe\u5f0f\u3002</p> <p>\u6839\u636e\u5728\u8868\u8fbe\u5f0f\u4e2d\u7684\u4f4d\u7f6e\u5dee\u5f02\uff0c\u65f6\u5ef6\u63a7\u5236\u53c8\u53ef\u4ee5\u5206\u4e3a\u5e38\u89c4\u65f6\u5ef6\u4e0e\u5185\u5d4c\u65f6\u5ef6\u3002</p>"},{"location":"ClassNotes/verilog/#_3","title":"\u8fb9\u6cbf\u89e6\u53d1\u4e8b\u4ef6\u63a7\u5236","text":"<p>\u5728 Verilog \u4e2d\uff0c\u4e8b\u4ef6\u662f\u6307\u67d0\u4e00\u4e2a reg \u6216 wire \u578b\u53d8\u91cf\u53d1\u751f\u4e86\u503c\u7684\u53d8\u5316\u3002</p> <p>\u4e00\u822c\u4e8b\u4ef6\u63a7\u5236</p> <p>\u4e8b\u4ef6\u63a7\u5236\u7528\u7b26\u53f7 @ \u8868\u793a\u3002\u8bed\u53e5\u6267\u884c\u7684\u6761\u4ef6\u662f\u4fe1\u53f7\u7684\u503c\u53d1\u751f\u7279\u5b9a\u7684\u53d8\u5316\u3002</p> <p>\u5173\u952e\u5b57 posedge \u6307\u4fe1\u53f7\u53d1\u751f\u8fb9\u6cbf\u6b63\u5411\u8df3\u53d8\uff0cnegedge \u6307\u4fe1\u53f7\u53d1\u751f\u8d1f\u5411\u8fb9\u6cbf\u8df3\u53d8\uff0c\u672a\u6307\u660e\u8df3\u53d8\u65b9\u5411\u65f6\uff0c\u5219 2 \u79cd\u60c5\u51b5\u7684\u8fb9\u6cbf\u53d8\u5316\u90fd\u4f1a\u89e6\u53d1\u76f8\u5173\u4e8b\u4ef6\u3002</p> <pre><code>//\u4fe1\u53f7clk\u53ea\u8981\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u6267\u884cq&lt;=d\uff0c\u53cc\u8fb9\u6cbfD\u89e6\u53d1\u5668\u6a21\u578b\nalways @(clk) q &lt;= d ;                \n//\u5728\u4fe1\u53f7clk\u4e0a\u5347\u6cbf\u65f6\u523b\uff0c\u6267\u884cq&lt;=d\uff0c\u6b63\u8fb9\u6cbfD\u89e6\u53d1\u5668\u6a21\u578b\nalways @(posedge clk) q &lt;= d ;  \n//\u5728\u4fe1\u53f7clk\u4e0b\u964d\u6cbf\u65f6\u523b\uff0c\u6267\u884cq&lt;=d\uff0c\u8d1f\u8fb9\u6cbfD\u89e6\u53d1\u5668\u6a21\u578b\nalways @(negedge clk) q &lt;= d ;\n//\u7acb\u523b\u8ba1\u7b97d\u7684\u503c\uff0c\u5e76\u5728clk\u4e0a\u5347\u6cbf\u65f6\u523b\u8d4b\u503c\u7ed9q\uff0c\u4e0d\u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\nq = @(posedge clk) d ;  \nalways @(posedge clk or negedge rstn)    begin      \n//always @(posedge clk , negedge rstn)    begin      \n//\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u9648\u5217\u591a\u4e2a\u4e8b\u4ef6\u89e6\u53d1\n</code></pre> <p>\u654f\u611f\u5217\u8868</p> <p>\u5f53\u7ec4\u5408\u903b\u8f91\u8f93\u5165\u53d8\u91cf\u5f88\u591a\u65f6\uff0c\u90a3\u4e48\u7f16\u5199\u654f\u611f\u5217\u8868\u4f1a\u5f88\u7e41\u7410\u3002\u6b64\u65f6\uff0c\u66f4\u4e3a\u7b80\u6d01\u7684\u5199\u6cd5\u662f @* \u6216 @(*)\uff0c\u8868\u793a\u5bf9\u8bed\u53e5\u5757\u4e2d\u7684\u6240\u6709\u8f93\u5165\u53d8\u91cf\u7684\u53d8\u5316\u90fd\u662f\u654f\u611f\u7684. \u5373always\u6a21\u5757\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u8f93\u5165\u4fe1\u53f7\u6216\u7535\u5e73\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u8be5\u8bed\u53e5\u4e0b\u65b9\u7684\u6a21\u5757\u5c06\u88ab\u6267\u884c\u3002</p> <pre><code>always @(*) begin\n//always @(a, b, c, d, e, f, g, h, i, j, k, l, m) begin\n//\u4e24\u79cd\u5199\u6cd5\u7b49\u4ef7\n    assign s = a? b+c : d ? e+f : g ? h+i : j ? k+l : m ;\nend\n</code></pre>"},{"location":"ClassNotes/verilog/#4","title":"4 \u8bed\u53e5\u6267\u884c","text":""},{"location":"ClassNotes/verilog/#_4","title":"\u987a\u5e8f\u5757","text":"<p>\u987a\u5e8f\u5757\u7528\u5173\u952e\u5b57 begin \u548c end \u6765\u8868\u793a\u3002</p> <p>\u987a\u5e8f\u5757\u4e2d\u7684\u8bed\u53e5\u662f\u4e00\u6761\u6761\u6267\u884c\u7684\u3002\u5f53\u7136\uff0c\u975e\u963b\u585e\u8d4b\u503c\u9664\u5916\u3002</p> <p>\u987a\u5e8f\u5757\u4e2d\u6bcf\u6761\u8bed\u53e5\u7684\u65f6\u5ef6\u603b\u662f\u4e0e\u5176\u524d\u9762\u8bed\u53e5\u6267\u884c\u7684\u65f6\u95f4\u76f8\u5173\u3002</p> <p>\u5728\u672c\u8282\u4e4b\u524d\u7684\u4eff\u771f\u4e2d\uff0cinitial \u5757\u4e2d\u7684\u963b\u585e\u8d4b\u503c\uff0c\u90fd\u662f\u987a\u5e8f\u5757\u7684\u5b9e\u4f8b\u3002</p>"},{"location":"ClassNotes/verilog/#_5","title":"\u5e76\u884c\u5757","text":"<p>\u5e76\u884c\u5757\u6709\u5173\u952e\u5b57 fork \u548c join \u6765\u8868\u793a\u3002</p> <p>\u5e76\u884c\u5757\u4e2d\u7684\u8bed\u53e5\u662f\u5e76\u884c\u6267\u884c\u7684\uff0c\u5373\u4fbf\u662f\u963b\u585e\u5f62\u5f0f\u7684\u8d4b\u503c\u3002</p> <p>\u5e76\u884c\u5757\u4e2d\u6bcf\u6761\u8bed\u53e5\u7684\u65f6\u5ef6\u90fd\u662f\u4e0e\u5757\u8bed\u53e5\u5f00\u59cb\u6267\u884c\u7684\u65f6\u95f4\u76f8\u5173\u3002</p> <p>\u987a\u5e8f\u5757\u4e0e\u5e76\u884c\u5757\u7684\u533a\u522b\u663e\u800c\u6613\u89c1\uff0c\u4e0b\u9762\u7528\u4eff\u771f\u8bf4\u660e\u3002</p>"},{"location":"ClassNotes/verilog/#if","title":"if","text":"<pre><code>if (condition1)       true_statement1 ;\nelse if (condition2)        true_statement2 ;\nelse if (condition3)        true_statement3 ;\nelse                      default_statement ;\n</code></pre> <p>if\u5982\u679c\u6709\u591a\u4e2a\u8bed\u53e5\uff0c\u5c31\u8981\u52a0begin\u548cend</p>"},{"location":"ClassNotes/verilog/#case","title":"case","text":"<pre><code>case(case_expr)\n    condition1     :             true_statement1 ;\n    // ture_statement1 \u7b49\u6267\u884c\u8bed\u53e5\u53ef\u4ee5\u662f\u4e00\u6761\u8bed\u53e5\uff0c\u4e5f\u53ef\u4ee5\u662f\u591a\u6761\u3002\u5982\u679c\u662f\u591a\u6761\u6267\u884c\u8bed\u53e5\uff0c\u5219\u9700\u8981\u7528 begin \u4e0e end \u5173\u952e\u5b57\u8fdb\u884c\u8bf4\u660e\u3002\n    condition2     :             true_statement2 ;\n    \u2026\u2026\n    default        :             default_statement ;\nendcase\n</code></pre> <p>casex\u3001 casez \u8bed\u53e5\u662f case \u8bed\u53e5\u7684\u53d8\u5f62\uff0c\u7528\u6765\u8868\u793a\u6761\u4ef6\u9009\u9879\u4e2d\u7684\u65e0\u5173\u9879\u3002</p> <p>casex \u7528 \u201cx\u201d \u6765\u8868\u793a\u65e0\u5173\u503c\uff0ccasez \u7528\u95ee\u53f7 \u201c?\u201d \u6765\u8868\u793a\u65e0\u5173\u503c\u3002</p> <pre><code>casez(sel)\n            4'b???1:     sout_t = p0 ;\n            4'b??1?:     sout_t = p1 ;\n            4'b?1??:     sout_t = p2 ;\n            4'b1???:     sout_t = p3 ;  \n        default:         sout_t = 2'b0 ;\n    endcase\n</code></pre>"},{"location":"ClassNotes/verilog/#_6","title":"\u5faa\u73af","text":"<pre><code>while (condition) begin\n    \u2026\nend\n\nfor(initial_assignment; condition ; step_assignment)  begin\n    \u2026\nend\n\nrepeat (loop_times) begin\n    \u2026\nend \n//repeat \u7684\u529f\u80fd\u662f\u6267\u884c\u56fa\u5b9a\u6b21\u6570\u7684\u5faa\u73af\uff0c\u5b83\u4e0d\u80fd\u50cf while \u5faa\u73af\u90a3\u6837\u7528\u4e00\u4e2a\u903b\u8f91\u8868\u8fbe\u5f0f\u6765\u786e\u5b9a\u5faa\u73af\u662f\u5426\u7ee7\u7eed\u6267\u884c\u3002repeat \u5faa\u73af\u7684\u6b21\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u91cf\u3001\u53d8\u91cf\u6216\u4fe1\u53f7\u3002\u5982\u679c\u5faa\u73af\u6b21\u6570\u662f\u53d8\u91cf\u4fe1\u53f7\uff0c\u5219\u5faa\u73af\u6b21\u6570\u662f\u5f00\u59cb\u6267\u884c repeat \u5faa\u73af\u65f6\u53d8\u91cf\u4fe1\u53f7\u7684\u503c\u3002\n\nforever begin\n    \u2026\nend\n\n//example forever \u8bed\u53e5\u5b9e\u73b0\u4e00\u4e2a\u65f6\u949f\u8fb9\u6cbf\u63a7\u5236\u7684\u5bc4\u5b58\u5668\u95f4\u6570\u636e\u4f20\u8f93\u529f\u80fd\nreg    clk ;\nreg    data_in, data_temp ;\ninitial begin\n    forever @(posedge clk)      data_temp = data_in ;\nend\n</code></pre> <p>always \uff1a\u9664assign\u5916\uff0c\u53e6\u5916\u4e00\u79cd\u5b9e\u73b0\u8d4b\u503c\u64cd\u4f5c\u7684\u5173\u952e\u5b57\uff0c\u4e24\u8005\u90fd\u4e0d\u53ef\u5d4c\u5957\uff0c\u533a\u522b\u5728\u4e8e\uff0cassign\u8bed\u53e5\u53ea\u80fd\u5b9e\u73b0\u7ec4\u5408\u903b\u8f91\u8d4b\u503c\uff0c\u4e14\u4e00\u4e2aassign\u8bed\u53e5\u540e\u9762\u53ea\u80fd\u8ddf\u4e00\u6761\u8d4b\u503c\u8868\u8fbe\u5f0f\u3002\u800calways\u5373\u80fd\u5b9e\u73b0\u7ec4\u5408\u903b\u8f91\u8d4b\u503c\uff0c\u53c8\u80fd\u5b9e\u73b0\u65f6\u5e8f\u903b\u8f91\u8d4b\u503c\u64cd\u4f5c\uff0c\u4e14\u53ef\u4ee5\u5305\u542b\u591a\u6761\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u591a\u6761\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u5219\u5e94\u4f4d\u4e8ebegin/end\u5bf9\u4e2d\u95f4\u3002</p>"},{"location":"ClassNotes/verilog/#5","title":"5 \u8fc7\u7a0b\u7ed3\u6784","text":"<p>\u8fc7\u7a0b\u7ed3\u6784\u8bed\u53e5\u6709 2 \u79cd\uff0cinitial \u4e0e always \u8bed\u53e5\u3002\u5b83\u4eec\u662f\u884c\u4e3a\u7ea7\u5efa\u6a21\u7684 2 \u79cd\u57fa\u672c\u8bed\u53e5\u3002\u4e00\u4e2a\u6a21\u5757\u4e2d\u53ef\u4ee5\u5305\u542b\u591a\u4e2a initial \u548c always \u8bed\u53e5\uff0c\u4f46 2 \u79cd\u8bed\u53e5\u4e0d\u80fd\u5d4c\u5957\u4f7f\u7528\u3002\u8fd9\u4e9b\u8bed\u53e5\u5728\u6a21\u5757\u95f4\u5e76\u884c\u6267\u884c\uff0c\u4e0e\u5176\u5728\u6a21\u5757\u7684\u524d\u540e\u987a\u5e8f\u6ca1\u6709\u5173\u7cfb\u3002\u4f46\u662f initial \u8bed\u53e5\u6216 always \u8bed\u53e5\u5185\u90e8\u53ef\u4ee5\u7406\u89e3\u4e3a\u662f\u987a\u5e8f\u6267\u884c\u7684\uff08\u975e\u963b\u585e\u8d4b\u503c\u9664\u5916\uff09\u3002\u6bcf\u4e2a initial \u8bed\u53e5\u6216 always \u8bed\u53e5\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u72ec\u7acb\u7684\u63a7\u5236\u6d41\uff0c\u6267\u884c\u65f6\u95f4\u90fd\u662f\u4ece 0 \u65f6\u523b\u5f00\u59cb\u3002</p> <p>initial \u8bed\u53e5\u4ece 0 \u65f6\u523b\u5f00\u59cb\u6267\u884c\uff0c\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u591a\u4e2a initial \u5757\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u5982\u679c initial \u5757\u5185\u5305\u542b\u591a\u4e2a\u8bed\u53e5\uff0c\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57 begin \u548c end \u7ec4\u6210\u4e00\u4e2a\u5757\u8bed\u53e5\u3002\u5982\u679c initial \u5757\u5185\u53ea\u8981\u4e00\u6761\u8bed\u53e5\uff0c\u5173\u952e\u5b57 begin \u548c end \u53ef\u4f7f\u7528\u4e5f\u53ef\u4e0d\u4f7f\u7528\u3002</p> <p>always \u8bed\u53e5\u662f\u91cd\u590d\u6267\u884c\u7684\u3002always \u8bed\u53e5\u5757\u4ece 0 \u65f6\u523b\u5f00\u59cb\u6267\u884c\u5176\u4e2d\u7684\u884c\u4e3a\u8bed\u53e5\uff1b\u5f53\u6267\u884c\u5b8c\u6700\u540e\u4e00\u6761\u8bed\u53e5\u540e\uff0c\u4fbf\u518d\u6b21\u6267\u884c\u8bed\u53e5\u5757\u4e2d\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\uff0c\u5982\u6b64\u5faa\u73af\u53cd\u590d\u3002</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"\u524d\u51e0\u7ae0","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","title":"\u590d\u6742\u5ea6\u5206\u6790","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#o_omega_theta_o","title":"\\(O\\ \\Omega\\ \\Theta\\ o\\)","text":"<p>\\(O(N)\\): f &lt;= kN</p> <p>\\(\\Omega(N)\\): f &gt;= kN</p> <p>\\(\\Theta(N)\\): f = kN</p> <p>\\(o(N)\\): f &lt; kN \u5373 f\u662f\\(O(N)\\)\u4f46\u4e0d\u662f\\(\\Omega(N)\\)</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","title":"\u8ba1\u7b97","text":"<ol> <li>\u9012\u63a8</li> <li>Master Theorem</li> </ol> <p>\u7ed9\u5b9a\u503c\u7684\u6bd4\u8f83\u6b21\u6570\u7b49\u4e8e\u7ed9\u5b9a\u503c\u8282\u70b9\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u7684\u5c42\u6570\u3002\u5982\u679c\u4e8c\u53c9\u6392\u5e8f\u6811\u662f\u5e73\u8861\u7684\uff0c\u5219n\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u9ad8\u5ea6\u4e3aLog2(n+1),\u5176\u67e5\u627e\u6548\u7387\u4e3aO(Log2n)\uff0c\u8fd1\u4f3c\u4e8e\u6298\u534a\u67e5\u627e\u3002\u5982\u679c\u4e8c\u53c9\u6392\u5e8f\u6811\u5b8c\u5168\u4e0d\u5e73\u8861\uff0c\u5219\u5176\u6df1\u5ea6\u53ef\u8fbe\u5230n\uff0c\u67e5\u627e\u6548\u7387\u4e3aO(n)\uff0c\u9000\u5316\u4e3a\u987a\u5e8f\u67e5\u627e\u3002\u4e00\u822c\u7684\uff0c\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u67e5\u627e\u6027\u80fd\u5728O(Log2n)\u5230O(n)\u4e4b\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u83b7\u5f97\u8f83\u597d\u7684\u67e5\u627e\u6027\u80fd\uff0c\u5c31\u8981\u6784\u9020\u4e00\u68f5\u5e73\u8861\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u3002</p> <p>\u5e73\u8861\u4e8c\u53c9\u6811\uff08Balanced BinaryTree\uff09\u53c8\u88ab\u79f0\u4e3aAVL\u6811\u3002 \u5b83\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\u5b83\u662f**\u4e00\u68f5\u7a7a\u6811\u6216\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811**\u3002 \u5e73\u8861\u4e8c\u53c9\u6811\u4e00\u822c\u662f\u4e00\u4e2a\u6709\u5e8f\u6811\uff0c\u5b83\u5177\u6709\u4e8c\u53c9\u6811\u7684\u6240\u6709\u6027\u8d28\uff0c\u5176\u904d\u5386\u64cd\u4f5c\u548c\u4e8c\u53c9\u6811\u7684\u904d\u5386\u64cd\u4f5c\u76f8\u540c\u3002</p> <p>AVL</p> <p>\u4e0d\u7528\u6570\u7ec4\u5b58\u6811\uff1a\u5982\u679c\u662f\u4e00\u4e2askewed tree\uff0c\u4f1a\u6709\u5f88\u591a\u7a7a\u7684\u7a7a\u95f4</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#tree","title":"Tree","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#property","title":"Property","text":"<p>\u6df1\u5ea6\uff1a\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9n,n\u7684\u6df1\u5ea6\u4e3a\u4ece\u6839\u5230n\u7684\u552f\u4e00\u8def\u5f84\u957f\uff0c\u6839\u7684\u6df1\u5ea6\u4e3a0\uff1b \u9ad8\u5ea6\uff1a\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9n,n\u7684\u9ad8\u5ea6\u4e3a\u4ecen\u5230\u4e00\u7247\u6811\u53f6\u7684\u6700\u957f\u8def\u5f84\u957f\uff0c\u6240\u6709\u6811\u53f6\u7684\u9ad8\u5ea6\u4e3a0\uff1b</p> <p>\u6811\u7684\u9ad8\u5ea6\u7b49\u4e8e\u6700\u6df1\u53f6\u5b50\u7684\u6df1\u5ea6\u3002</p> <p></p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#priority_queues","title":"Priority Queues","text":"<p>\u64cd\u4f5c\uff1a1. \u63d2\u5165 2. \u5220\u9664\u6700\u5927/\u6700\u5c0f\u6570</p> <p></p> <p>\u7528\u94fe\u8868\u662f\u6700\u65b9\u4fbf\u7684\uff0c\u56e0\u4e3a\u4f1a\u6709\u63d2\u5165\u4f1a\u6bd4\u5220\u9664\u66f4\u591a</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#binary_heap","title":"Binary Heap","text":"<p>\u5982\u679c\u4e8c\u53c9\u6811\u9664\u4e86\u6700\u540e\u4e00\u5c42\u6709\u7f3a\u5931\u5916\uff0c\u5176\u5b83\u662f\u6ee1\u7684\uff0c\u4e14\u6700\u540e\u4e00\u5c42\u7f3a\u5931\u7684\u53f6\u5b50\u7ed3\u70b9\u53ea\u51fa\u73b0\u5728\u53f3\u4fa7\uff0c\u5219\u8fd9\u6837\u7684\u4e8c\u53c9\u6811\u53eb\u5b8c\u5168\u4e8c\u53c9\u6811</p> <p>\u9ad8\u5ea6\u4e3ah\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6709\\(2^h\\)\u5230\\(2^{h+1}-1\\)\u4e2a\u8282\u70b9</p> <p>\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8868\u793aBT[n+1]\uff0cBT[0]\u4e0d\u88ab\u4f7f\u7528\uff0c\u53ef\u4ee5\u5728\u4e8c\u9879\u5806\u91cc\u9762\u5b58\u50a8\u6700\u5927\u3001\u6700\u5c0f\u503c\u4f5c\u4e3asentinel</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","title":"\u4e0b\u6807\u7684\u89c4\u5f8b","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","title":"\u521d\u59cb\u5316","text":"<pre><code>struct HeapStruct{\n    int Capacity;\n    int Size;\n    ElementType *Elements;\n}\ntypedef struct HeapStruct *PriorityQueue;\n\nPriorityQueue  Initialize( int  MaxElements ) \n{ \n    PriorityQueue  H; \n    if ( MaxElements &lt; MinPQSize ) \n        return  Error( \"Priority queue size is too small\" ); \n    H = malloc( sizeof ( struct HeapStruct ) ); \n    if ( H ==NULL ) \n        return  FatalError( \"Out of space!!!\" ); \n    /* Allocate the array plus one extra for sentinel */ \n    H-&gt;Elements = malloc(( MaxElements + 1 ) * sizeof( ElementType )); \n    if ( H-&gt;Elements == NULL ) \n        return  FatalError( \"Out of space!!!\" ); \n    H-&gt;Capacity = MaxElements; \n    H-&gt;Size = 0; \n    H-&gt;Elements[ 0 ] = MinData;  /* set the sentinel */\n    return  H; \n}\n</code></pre> <p>\u5806\u662f\u4e00\u68f5\u6811\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u952e\u503c\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u952e\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e/\u5c0f\u4e8e\u7b49\u4e8e\u5176\u7236\u4eb2\u7684\u952e\u503c\u3002\u6bcf\u4e2a\u8282\u70b9\u7684\u952e\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\u5176\u7236\u4eb2\u952e\u503c\u7684\u5806\u53eb\u505a\u5c0f\u6839\u5806\uff0c\u5426\u5219\u53eb\u505a\u5927\u6839\u5806\u3002</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","title":"\u63d2\u5165","text":"<p>\u628a\u65b0\u8282\u70b9\u63a5\u5728\u6811\u7684\u6700\u5c3e\u7aef\uff0c\u7136\u540e\u6267\u884c\u5411\u4e0a\u8fc7\u6ee4\u64cd\u4f5c\u2014\u2014\u5982\u679c\u662f\u5c0f\u6839\u5806\u5219\u4e0d\u65ad\u6bd4\u8f83\u5f53\u524d\u8282\u70b9\u548c\u7236\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5f53\u63d2\u5165\u503c\u66f4\u5c0f\uff0c\u5219\u628a\u7236\u8282\u70b9\u6362\u5230\u4ed6\u7684\u5b50\u8282\u70b9\u5904\uff08\u628a\u7236\u8282\u70b9\u7684\u4f4d\u7f6e\u73b0\u5728\u7a7a\u51fa\uff09\uff0c\u76f4\u5230\u5f53\u524d\u503c\u5927\u4e8e\u7236\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u76ee\u524d\u9009\u4e2d\u7684\u8282\u70b9\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)</p> <pre><code>void Insert(ElementType X, PriorityQueue H){\n    int i;\n    if(ISFull(H)){\n        return;\n    }\n    for(i = ++H-&gt;Size; H-&gt;Elements[i/2] &gt; X; i = i/2){\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = X;\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","title":"\u5220\u9664\u6700\u5c0f","text":"<p>\u628a\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u548c\u4ed6\u4ea4\u6362\uff0c\u628aSize\u51cf\u5c0f\uff0c\u7136\u540e\u4ece\u5934\u8fdb\u884c\u5411\u4e0b\u8fc7\u6ee4\u64cd\u4f5c\uff0c\u5982\u679c\u5b50\u8282\u70b9\u4e2d\u6700\u5c0f\u7684\u90a3\u4f4d\u5c0f\u4e8e\u5f53\u524d\u503c\uff0c\u5219\u628a\u5b50\u8282\u70b9\u79fb\u5230\u7236\u8282\u70b9\u5904\u3002\u76f4\u5230\u5f53\u524d\u503c\u5c0f\u4e8e\u6240\u6709\u5b50\u8282\u70b9\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)</p> <pre><code>ElementType  DeleteMin( PriorityQueue  H ){\n    int i, Child;\n    ElementType MinElement, LastElement;\n    if(H-&gt;Size==0){ // empty head\n        return H-&gt;Elements[0];\n    }\n    MinElement = H-&gt;Elements[1];\n    LastELement = H-&gt;Elements[H-&gt;Size--]; //\u51cf\u5c0f\u4e00\u4e2a\u7a7a\u95f4\n    for(i=1; i*2 &lt;= H-&gt;Size; i = Child){\n        Child = 2*i;\n        if(H-&gt;Elements[Child] &gt; H-&gt;Elements[Child+1]){\n            Child++;\n        }\n        if(LastElement &lt; H-&gt;Elements[Child]){\n            break;\n        }\n        H-&gt;Elements[i] = H-&gt;Elements[Child];\n    }\n    H-&gt;Elements[i] = LastElement;\n    return MinElement;\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","title":"\u5176\u4ed6\u64cd\u4f5c","text":"<ol> <li>\u7ed9\u67d0\u4e2a\u8282\u70b9\u51cf\u53bb\u4e00\u4e2a\u503c\uff1a\u5411\u4e0a\u8fc7\u6ee4\uff08Percolate up\uff09</li> <li>\u7ed9\u67d0\u4e2a\u8282\u70b9\u52a0\u4e0a\u4e00\u4e2a\u503c\uff1a\u5411\u4e0b\u8fc7\u6ee4\uff08Percolate down\uff09</li> <li>\u521b\u5efa\u5806\uff1a\u5148\u6309\u7167\u6570\u5217\u987a\u5e8f\u5b58\u5165\u6240\u6709\u503c\uff0c\u63a5\u7740\u5bf9\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u4ece\u540e\u5230\u524d\u4e00\u6b21Percolate down</li> </ol>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#d-heaps","title":"d-Heaps","text":"<ul> <li>\u4ee50\u4e3a\u6839\u7ed3\u70b9\uff0c\u5bf9\u67d0\u7ed3\u70b9 \\(i\\) ,\u5176\u7236\u7ed3\u70b9\u4e3a \\(\u230a\\frac{i\u22121}{d}\u230b\\) \uff0c\u5176d\u4e2a\u5b50\u7ed3\u70b9\u8303\u56f4\u4e3a\\([(di+1),(di+d)]\\)</li> </ul>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#unionfind","title":"UnionFind","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_8","title":"\u7b97\u6cd5","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#naive","title":"Naive","text":"<pre><code>void init(int N, int *fa){\n    for(int i = 1; i&lt;=N; i++){\n        fa[i] = i;\n    }\n}\n\nint find(int x, int *fa){//\u627e\u5230x\u6240\u5728\u96c6\u5408\u7684\u6839\n    if(x == fa[x]){\n        return x;\n    } else {\n        return find(fa[x], fa);\n    }\n}\n\nint find_iter(int x, int *fa){\n    while(x != fa[x]){\n        x = fa[x];\n    }\n    return x;\n}\n\nvoid union(int x, int y, int *fa){\n    fa[find(y, fa)] = find(x, fa); // \u628ay\u6240\u5728\u7684\u96c6\u5408\u63a5\u5230x\u7684\u96c6\u5408\u4e2d\uff1b\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#find_compression","title":"\u4f18\u5316find Compression","text":"<pre><code>int find(int x, int *fa){\n    if(fa[x] == x){\n        return x;\n    } else {\n        return fa[x] = find(fa[x], fa);   \n    }\n}\n\nint find(int x, int *fa){\n    return fa[x] == x? x : (fa[x] = find(fa[x], fa));\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#union_by_size","title":"\u4f18\u5316union by size","text":"<pre><code>void init(int N, int *fa){\n    for(int i=1; i&lt;=N; i++){\n        fa[i] = -1;\n    }\n} // \u53ef\u4ee5\u76f4\u63a5\u628a\u6839\u7684\u503c\u8bbe\u4e3a\u8be5\u96c6\u5408\u7684size\u7684\u590d\u6570\uff0c\u4e5f\u53ef\u4ee5\u53e6\u5916\u5f00\u4e00\u4e2asize\u6570\u7ec4\n\nvoid union(int x, int y, int *fa){\n    root_x = find(x, fa);\n    root_y = find(y, fa)\n    if(fa[root_x] &lt;= fa[root_y]){\n        fa[root_y] += fa[root_x];\n        fa[root_y] = root_x;\n    } else {\n        fa[root_x] += fa[root_y];\n        fa[root_x] = root_y;\n    }\n}\n\nint find(int x, int *fa){\n    if(fa[x] &lt; 0){\n        return x;\n    } else {\n        return find(fa[x], fa);\n    }\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#union-by-rank","title":"\u4f18\u5316Union-by-rank","text":"<pre><code>void init(int N, int *fa){\n    for(int i=1; i&lt;=N; i++){\n        fa[i] = -1;\n    }\n}\n\nvoid union(int x, int y, int *fa){\n    rank_x = fa[find(x, fa)];\n    rank_y = fa[find(y, fa)];\n    if(rank_x &lt; rank_y){ // y\u7684\u6df1\u5ea6\u66f4\u5c0f\uff0c\u6ce8\u610f\u8fd9\u91cc\u76f4\u63a5\u6bd4\u8f83\u7684\u662f\u6df1\u5ea6\u7684\u76f8\u53cd\u6570\n        fa[y] = find(x, fa);   \n    } else if(rank_x &gt; rank_y){\n        fa[x] = find(y, fa);\n    } else if(rank_x == rank_y){\n        fa[y] = finx(x, fa);\n        fa[find(x, fa)] --; //\u6df1\u5ea6\u76f8\u540c\uff0c\u5219\u8981+1\n    }\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_9","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>Union-bySize complexities</p> <p></p> <p>\u5047\u8bbe\u5bf9\u4e8e\u6df1\u5ea6\u4e3a\\(h\\)\u7684\u6811\uff0c\u4ed6\u81f3\u5c11\u6709\\(2^h\\)\u4e2a\u8282\u70b9\uff08\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u63a8\u7406\uff09\u3002\u5373\\(N\\geq2^h\\)\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u5177\u6709\\(N\\)\u8282\u70b9\u7684\u6811\uff0c\u4ed6\u7684\u6df1\u5ea6\u5c0f\u4e8e\\(\\lfloor logN\\rfloor + 1\\)\uff0c\u56e0\u6b64\u67e5\u627e\u7684\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)</p> <p>Using link-by-size, any UNION or FIND operation takes O(log n) time in the worst case, where n is the number of elements.</p> <p></p> <p></p> <p></p>"}]}