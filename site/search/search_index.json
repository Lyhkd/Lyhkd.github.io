{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Yule\u2018s Notebook","text":"<p>\u56e0\u4e3a\u4e4b\u524d\u7684\u535a\u5ba2\u88ab\u67d0\u4eba\u5168\u5220\u4e86\uff0c\u9042\u6362\u4e86\u4e2a\u677f\u5f0f\u4ece\u5934\u5f00\u59cb\uff0c\u5e0c\u671b\u80fd\u517b\u6210\u8bb0\u7b14\u8bb0\u7684\u597d\u4e60\u60ef\uff01</p>"},{"location":"ClassNotes/HW%20summary/","title":"\u6d4b\u8bd5","text":"<p>HW summary</p>"},{"location":"ClassNotes/HW%20summary/#hw2","title":"HW2","text":"<p>1-1</p> <p>**1-2**If a linear list is represented by a linked list, the addresses of the elements in the memory must be consecutive.(F)</p> <p>2-1</p> <p></p> <p>2-2</p> <p></p> <p>2-3</p> <pre><code>// Add Two Polynomials\nPolynomial Add(Polynomial a, Polynomial b){\n    Polynomial sum, pa, pb, psum, sumnow;\n    sum = (Polynomial)malloc(sizeof(struct Node));\n    sumnow = sum;\n    pa = a;\n    pb = b;\n    int exa, exb, find_flag = 0;\n    while(1){\n        psum = (Polynomial)malloc(sizeof(struct Node));\n        exa = pa-&gt;Exponent;\n        exb = pb-&gt;Exponent;\n        psum-&gt;Next = NULL;\n        psum-&gt;Exponent = exa &gt;= exb ? exa : exb;\n        psum-&gt;Coefficient = exa &gt; exb ? pa-&gt;Coefficient : pb-&gt;Coefficient;\n        if (exa == exb){\n            psum-&gt;Coefficient = pa-&gt;Coefficient + pb-&gt;Coefficient;\n            //printf(\"%d + %d\\n\",pa-&gt;Coefficient,pb-&gt;Coefficient);\n        }\n        if (psum-&gt;Coefficient != 0 ){\n            sumnow-&gt;Next = psum;\n            sumnow = psum;\n            //printf(\"add p %d %d\\n\",psum-&gt;Coefficient, psum-&gt;Exponent);\n        }\n        if (exa == exb){\n            if(pa-&gt;Next == NULL || pb-&gt;Next == NULL){\n            //printf(\"before break %d %d \\n\", pa-&gt;Exponent, pb-&gt;Exponent);\n            break;\n        }  \n                pa = pa-&gt;Next;\n                pb = pb-&gt;Next;\n        } else if (exa &gt; exb &amp;&amp; pa-&gt;Next != NULL){\n            pa = pa-&gt;Next;\n        } else if (pb-&gt;Next != NULL){\n            pb = pb-&gt;Next;\n        }\n    }\n    if (pa-&gt;Next != NULL){\n        sumnow-&gt;Next = pa-&gt;Next;\n    }\n    if (pb-&gt;Next != NULL){\n        sumnow-&gt;Next = pb-&gt;Next;\n    }\n    return sum;\n}\n</code></pre> <pre><code>// Reverse Linked List\nList Reverse( List L ){\n    List cur, head, prev;\n    head = NULL;\n    cur = L-&gt;Next;\n    prev = L-&gt;Next;\n    while(cur-&gt;Next){\n        prev = cur;\n        cur = cur-&gt;Next;\n        prev-&gt;Next = head;\n        head = prev;\n    }\n    cur-&gt;Next = prev;\n    L-&gt;Next = cur;\n    return L\n}\n\nList Reverse(List L){\n    List new_head, old_head, tmp;\n    new_head = NULL; \n    tmp = L-&gt;Next;\n    while(tmp){\n        old_head = tmp;\n        tmp = tmp-&gt;Next;\n        old_head -&gt; Next = new_head;\n        new_head = old_head;\n    }\n    L-&gt;Next = new_head;\n    return L;\n}\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw3","title":"HW3","text":"<p>2-1</p> <ol> <li>push(o o o) pop(o o o) push(p) pop(p) push(s) pop(s)</li> <li>push(o o) pop (o o) push(o) pop(o)</li> <li>push(o) pop(o) push(o o) pop(o o)</li> <li>push(o) pop(o) push(o) pop(o) push(o) pop(o)</li> <li>push(o o) pop(o) push(o) pop(o o)</li> </ol> <p>2-2</p> <pre><code>// Pop Sequence\n#include &lt;stdio.h&gt;\n\nvoid Push(int *st, int value);\nint Pop(int *st);\n\nint main() {\n    int M, N, K, flag=1;\n    scanf(\"%d %d %d\", &amp;M, &amp;N, &amp;K);\n    for(int iter=0;iter&lt;K;iter++) {\n        int st[M + 1], a[N], input[N];\n        st[0] = 0;\n        flag = 1;\n        int *ptr = a;\n        for (int i = 0; i &lt; N; i++) {\n            scanf(\"%d\", &amp;input[i]);\n            a[i] = i + 1;\n        }\n        for (int i = 0; i &lt; N; i++) {\n            while (st[0] == 0 || input[i] &gt; st[*st]) {\n                Push(st, *ptr);\n                ptr++;\n                if (st[0] &gt; M || ptr &gt; &amp;a[N]) {\n                    printf(\"NO\\n\");\n                    flag=0;\n                    break;\n                }\n            }\n            if (input[i] == st[*st]) {\n                Pop(st);\n            }\n            if (input[i] &lt; st[*st]) {\n                printf(\"NO\\n\");\n                flag=0;\n                break;\n            }\n            if(flag == 0){\n                break;\n            }\n        }\n        if(st[0] == 0 &amp;&amp; flag){\n            printf(\"YES\\n\");\n        }\n\n    }\n    return 0;\n}\n\nvoid Push(int *st, int value){\n    st[++*st] = value;\n}\nint Pop(int *st){\n    int value = st[*st];\n    (*st)--;\n    return value;\n}\n</code></pre> <p>2-3</p>"},{"location":"ClassNotes/HW%20summary/#hw4","title":"HW4","text":"<p>1-1:It is always possible to represent a tree by a one-dimensional integer array.(T)</p> <p>n\u53c9\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7236\u8282\u70b9i\uff0c\u4ed6\u7684\u5b50\u8282\u70b9\u53ef\u4ee5\u5b58\u653e\u5728 ni, ni+1, ni+2\u2026</p> <p>1-2:There exists a binary tree with 2016 nodes in total, and with 16 nodes having only one child.(F)</p> <p>\u5047\u8bbe\u6ca1\u6709\u5b69\u5b50\u7684\u7ed3\u70b9\uff08\u53f6\u7ed3\u70b9\uff09\u4e2a\u6570\u4e3an\u2080\uff0c\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u7ed3\u70b9\uff08\u5ea6\u4e3a1\u7684\u7ed3\u70b9\uff09\u4e2a\u6570\u4e3an\u2081\uff0c\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u7ed3\u70b9\uff08\u5ea6\u4e3a2\u7684\u7ed3\u70b9\uff09\u4e2a\u6570\u4e3an\u2082\u3002 \u5219n\u2080+n\u2081+n\u2082=2016 \u2235n\u2080=n\u2082+1\uff08\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff1a\u53f6\u7ed3\u70b9\u4e2a\u6570\u7b49\u4e8e\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u4e2a\u6570\u52a01\uff09 \u2234n\u2080+n\u2081+n\u2082=2016 \u21e8n\u2082+1+16+n\u2082=2016 \u21e82n\u2082=1999 n\u2082\u9664\u4e0d\u5c3d\uff0c\u6240\u4ee5\u7b54\u6848\u9519\u8bef\u3002</p> <p>2-1</p> <p></p> <p>2-2</p> <p>2-3</p> <p>2-4</p> <p></p> <p>\u5de6\u8fb9\u7a7a\uff0c\u6307\u5411\u904d\u5386\u987a\u5e8f\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u53f3\u8fb9\u7a7a\uff0c\u6307\u5411\u904d\u5386\u987a\u5e8f\u7684\u540e\u4e00\u4e2a\u8282\u70b9</p> <pre><code>//\u6811\u540c\u6784\u7684\u5224\u65ad\nint Isomorphic(Tree T1, Tree T2){\n    Tree ptrt1 = T1, ptrt2 = T2;\n    int flag1 = 0, flag2 = 0, result = 1;\n    if(ptrt1 == NULL &amp;&amp; ptrt2 == NULL){\n        return 1;\n    } else if (ptrt1 == NULL || ptrt2 == NULL){\n        return 0;\n    }\n    if(ptrt1-&gt;Element == ptrt2-&gt;Element){\n        flag1 = Isomorphic(ptrt1-&gt;Left, ptrt2-&gt;Left);\n        if(flag1){\n            flag2 = Isomorphic(ptrt1-&gt;Right, ptrt2-&gt;Right);\n        } else {\n            flag1 = Isomorphic(ptrt1-&gt;Left, ptrt2-&gt;Right);\n            flag2 = Isomorphic(ptrt1-&gt;Right, ptrt2-&gt;Left);\n        }\n        result = result &amp; flag1 &amp; flag2;\n    } else {\n        return 0;\n    }\n    if(result){\n        return 1;\n    } else {\n        return 0;\n    }\n}\n</code></pre> <pre><code>// zigzagging\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct TreeNode *Tree;\nstruct TreeNode{\n    int value;\n    Tree Left;\n    Tree Right;\n};\n\nTree inductFromTwoOrders(int *io, int *po, int size);\nint findI(int i, int *A, int size);\nvoid levelOrder(Tree ptr);\nint main(){\n    int N, inorder[30], postorder[30];\n    scanf(\"%d\",&amp;N);\n    for(int i=0; i&lt;N; i++){\n        scanf(\"%d\", &amp;inorder[i]);\n    }\n    for(int i=0; i&lt;N; i++){\n        scanf(\"%d\", &amp;postorder[i]);\n    }\n    Tree p = inductFromTwoOrders(inorder, postorder, N);\n\n    //printf(\"%d %d %d\", p-&gt;value, p-&gt;Left-&gt;value, p-&gt;Right-&gt;value);\n    levelOrder(p);\n}\n\nvoid levelOrder(Tree ptr){\n    int first = 1;\n    Tree q;\n    int level[35] = {0}, current_level = 0;\n    int stack[35] = {0};\n    level[0] = 1;\n    struct TreeNode qu[100];\n    int r = 0, l = 0;\n    qu[++r] = *ptr;\n    while(r-l!=0){\n        q = &amp;qu[++l];\n        if(current_level%2 == 1){\n            printf(\" %d\",q-&gt;value);\n        } else if(current_level == 0){\n            printf(\"%d\",q-&gt;value);\n        } else{\n            stack[++stack[0]]=q-&gt;value;\n        }\n        if(q-&gt;Left!=NULL){\n            qu[++r] = *(q-&gt;Left);\n            level[current_level+1]++;\n        }\n        if(q-&gt;Right!=NULL){\n            qu[++r] = *(q-&gt;Right);\n            level[current_level+1]++;\n        }\n        level[current_level]--;\n        if(level[current_level]== 0){\n            current_level++;\n            while(stack[0]&gt;0){\n                printf(\" %d\",stack[stack[0]]);\n                stack[0]--;\n            }\n        }\n    }\n\n}\nTree inductFromTwoOrders(int *io, int *po, int size){\n    int cut_pos = findI(po[size-1], io, size);\n    if(cut_pos == -1){\n        printf(\"error\\n\");\n        return 0;\n    }\n    Tree root = (Tree)malloc(sizeof(struct TreeNode));\n    root-&gt;value = po[size-1];\n    //printf(\"value :%d\\n\", root-&gt;value);\n    int *left = io, l_size = cut_pos;\n    int *right = io + cut_pos+1, r_size = size - cut_pos - 1;\n    int *po_left = po, *po_right = &amp;po[cut_pos];\n    if (l_size == 0){\n        root-&gt;Left = NULL;\n    } else {\n        root-&gt;Left = inductFromTwoOrders(left, po_left, l_size);\n    }\n    if (r_size == 0){\n        root-&gt;Right = NULL;\n    } else {\n        root-&gt;Right = inductFromTwoOrders(right, po_right, r_size);\n    }    \n    return root;\n\n}\n\nint findI(int i, int *A, int size){\n    if(i == 5){\n        int p = 0;\n    }\n    for(int j=0; j&lt;size; j++){\n        if(A[j] == i){\n            return j;\n        }\n    }\n    return -1;\n}\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw5","title":"HW5","text":"<p>1-1:In a binary search tree, the keys on the same level from left to right must be in sorted (non-decreasing) order.</p> <p>1-2:In a binary search tree which contains several integer keys including 4, 5, and 6, if 4 and 6 are on the same level, then 5 must be their parent.\uff08F\uff09</p> <p>5\u53ef\u4ee5\u4f5c\u4e3a4\u548c6\u7684\u7956\u5148\uff0c\u4e0d\u4e00\u5b9a\u4f5c\u4e3a\u76f4\u63a5\u8fde\u63a5\u7684\u7236\u6bcd\u3002\u6bd4\u5982\u53ef\u4ee5\u662f4 &lt;- 2 &lt;- 5 -&gt; 7 -&gt; 6\uff0c\u6b64\u65f64\u548c6\u4f9d\u7136\u5728\u4e00\u4e2a\u5c42\u6b21\u4e0a\u3002</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>https://blog.csdn.net/best_LY/article/details/120956505</p> <p>\u6298\u534a\u67e5\u627e\u7684\u5224\u5b9a\u6811</p> <p>https://blog.csdn.net/weixin_53965540/article/details/121583290</p> <p>https://blog.51cto.com/u_14866376/4858577</p> <p>\u82e5\u9009\u62e9\u5411\u4e0a\u53d6\u6574\uff1a\u5bf9\u4e8e\u8be5\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u90fd\u5927\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u9ad8\u5ea6\uff0c\u4e14\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u4e2a\u6570\u90fd\u5927\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u4e2a\u6570\u3002</p> <p>\u82e5\u9009\u62e9\u5411\u4e0b\u53d6\u6574\uff1a\u5bf9\u4e8e\u8be5\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u9ad8\u5ea6\uff0c\u4e14\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u4e2a\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u4e2a\u6570\u3002</p> <pre><code>List Reverse(List L){\n    List ptr1 = L-&gt;Next, prev = NULL, cur = L-&gt;Next;\n    while (ptr1 != NULL){\n        ptr1 = ptr1-&gt;Next;\n        cur-&gt;Next = prev;\n        prev = cur;\n        cur = ptr1;\n    }\n    L-&gt;Next = prev;\n    return L;\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw6","title":"HW6","text":"<p>1-1: If a complete binary tree with 137 nodes is stored in an array (root at position 1), then the nodes at positions 128 and 137 are at the same level. T</p> <p>\u76f8\u540c\u6df1\u5ea6h\u7684\u8282\u70b9\u57282^h ~ 2^(h+1)-1\u8303\u56f4\u5185\u3002\u6ce8\u610f\u6839\u7684\u6df1\u5ea6\u4e3a0</p> <p>1-2: The inorder traversal sequence of any min-heap must be in sorted order. F</p> <p>4 &lt;- 1 -&gt; 5 inorder traversal is 4 1 5</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u4e5f\u53ef\u80fd\u662f\u5012\u6570\u7b2c\u4e8c\u5c42\uff0c\u6bd4\u5982\u8bf4\u6700\u540e\u65b0\u52a0\u5165\u4e86\u4e00\u4e2a\u5c0f\u4e8e\u6700\u5927\u503c\uff08\u6700\u5de6\u53f6\u5b50\uff09\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u4f1a\u4f5c\u4e3a\u6700\u5927\u8282\u70b9\u7684\u5de6\u5b69\u5b50\uff0c\u90a3\u4e48\u6700\u5927\u8282\u70b9\u5c31\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\u4e86\uff0c\u4f46\u5b83\u4ecd\u7136\u662f\u6700\u5927\u7684\u8282\u70b9\u3002</p> <pre><code>/* \u7f16\u7a0b\u9898 \u5b8c\u5168\u4e8c\u53c9\u641c\u7d22\u6811*/\n#include &lt;stdio.h&gt;\nint input[1010], output[1010], n, t = 0;\n\nvoid sort(int *A, int N){\n    for(int i=0; i&lt;N; i++){\n        for(int j=0; j&lt;N-i-1; j++){\n            if(A[j] &gt; A[j+1]){\n                int temp = A[j];\n                A[j] = A[j+1];\n                A[j+1] = temp;\n            }\n        }\n    }\n}\n\nvoid inOrder(int root) {\n    if (root &gt;= n) return ;\n    inOrder(root * 2 + 1);\n    level[root] = in[t++];\n    inOrder(root * 2 + 2);\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++)\n        scanf(\"%d\", &amp;input[i]);\n    sort(input, n);\n    inOrder(0);\n    printf(\"%d\", output[0]);\n    for (int i = 1; i &lt; n; i++)\n        printf(\" %d\", output[i]);\n    return 0;\n}\n</code></pre> <pre><code>/* 6-1 Percolate Up and Down */\n\nvoid PercolateUp( int p, PriorityQueue H ){\n    ElementType x = H-&gt;Elements[p];\n    int i;\n    for(i=p; H-&gt;Elements[i/2] &gt; x; i = i/2){\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = x;\n}\nvoid PercolateDown( int p, PriorityQueue H ){\n    ElementType x = H-&gt;Elements[p];\n    int i;\n    int Child;\n    for(i = p; 2*i &lt;= H-&gt;Size; i = Child){\n        Child = 2*i;\n        if(Child+1 &lt;= H-&gt;Size &amp;&amp; H-&gt;Elements[Child+1] &lt; H-&gt;Elements[Child]){\n            Child += 1;\n        }\n        if(x &gt; H-&gt;Elements[Child]){\n            H-&gt;Elements[i] = H-&gt;Elements[Child];\n        } else {\n            break;\n        }\n    }\n    H-&gt;Elements[i] = x;\n}\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw7","title":"HW7","text":"<p>1-1: In Union/Find algorithm, if Unions are done by size, the depth of any node must be no more than N/2, but not O(logN). F</p> <p>Time complexity of N Union and M Find operations is now O( N + M log2 N ). Let T be a tree created by union-by-size with N nodes, then height(T)&lt;=(log2N)+1;</p> <p>2-1: </p> <p></p> <p></p>"},{"location":"ClassNotes/HW%20summary/#hw8","title":"HW8","text":"<p>1-1: In a connected graph, the number of edges must be greater than the number of vertices minus 1. F</p> <p>equal or greater than (no less than)</p> <p>1-2: In a directed graph, the sum of the in-degrees must be equal to the sum of the out-degrees of all the vertices. T</p> <p>1-3: If a directed graph G=(V, E) is weakly connected, then there must be at least |V| edges in G. F</p> <p>at least |V|-1 edges</p> <p>2-1: If graph G is NOT connected and has 35 edges, then it must have at least ____ vertices.</p> <p>10</p> <p>\\(\\frac{(n-1)(n-2)}2 \\geq 35\\)\u5373\u9664\u4e86\u4e00\u4e2a\u5b64\u7acb\u8282\u70b9\u610f\u5916\u7684\u5b50\u56fe\uff0c\u81f3\u5c11\u6db5\u76d6\u6240\u6709\u7684\u8fb9</p> <p>2-2: A graph with 90 vertices and 20 edges must have at least __ connected component(s).</p> <p>70</p> <p>\u5bf9\u4e8e\u591a\u4e2a\u8054\u901a\u5206\u91cf\u7684\u56fe r = E - V + C + 1</p> <p>1 = 20 - 90 + C + 1</p> <p></p> <p>2-4: Given an undirected graph G with 16 edges, where 3 vertices are of degree 4, 4 vertices are of degree 3, and all the other vertices are of degrees less than 3. Then G must have at least __ vertices.</p> <p>11</p> <p>32 = 12 + 12 + 2 * n</p> <p>n = 4</p> <p>V = 3 + 4 + 4</p> <p></p> <pre><code>//6-1 Is Topological Orger\n\nvoid updateDeg(int *deg, LGraph Graph){\n    for(int i=0; i&lt;=Graph-&gt;Nv;i++){\n        deg[i] = 0;\n    }\n    for(int i=0; i&lt;Graph-&gt;Nv; i++){\n        PtrToAdjVNode pNode = Graph-&gt;G[i].FirstEdge;\n        while(pNode!= NULL){\n            deg[pNode-&gt;AdjV]++;\n            pNode = pNode-&gt;Next;\n        }\n    }\n}\n\nbool IsTopSeq( LGraph Graph, Vertex Seq[] ){\n    int deg[MaxVertexNum];\n    updateDeg(deg, Graph);\n    for(int i=0; i&lt;Graph-&gt;Nv; i++){\n        if(deg[Seq[i]-1] == 0){\n            //printf(\"remove %d\\n\",Seq[i]-1);\n            PtrToAdjVNode pNode = Graph-&gt;G[Seq[i]-1].FirstEdge;\n            while(pNode!= NULL){\n                deg[pNode-&gt;AdjV]--;\n                pNode = pNode-&gt;Next;\n            }\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n</code></pre> <pre><code>//7-1 Hamiltonian Cycle\n#include &lt;stdio.h&gt;\n\nint G[201][201] = {0};\nint V, E;\nint Hamilton(int Seq[], int len){\n    if(Seq[0] != Seq[len-1] || len != V+1){\n        return 0;\n    }\n    int mark[V+1];\n    for(int i=1; i&lt;=V; i++){\n        mark[i] = 0;\n    }\n    for(int i=0; i&lt;len-1; i++) {\n        int v_s = Seq[i], v_e = Seq[i + 1];\n        mark[v_e] = mark[v_s] = 1;\n        if(G[v_s][v_e] == 0){\n            return 0;\n        }\n    }\n\n    for(int i=1; i&lt;=V; i++){\n        if(mark[i] == 0){\n            return 0;\n        }\n    }\n    return 1;\n}\nint main(){\n    scanf(\"%d %d\",&amp;V, &amp;E);\n    for(int i=0; i&lt;E; i++){\n        int v_s,v_e;\n        scanf(\"%d %d\", &amp;v_s, &amp;v_e);\n        G[v_s][v_e] = G[v_e][v_s] = 1;\n    }\n    int N;\n    scanf(\"%d\",&amp;N);\n    for(int i=0; i&lt;N; i++){\n        int len;\n        scanf(\"%d\",&amp;len);\n        int Seq[len];\n        for(int j=0; j&lt;len; j++){\n            scanf(\"%d\",&amp;Seq[j]);\n        }\n        if(Hamilton(Seq,len)){\n            printf(\"YES\\n\");\n        } else {\n            printf(\"NO\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"ClassNotes/HW%20summary/#hw9","title":"HW9","text":"<p>1-1:In a weighted undirected graph, if the length of the shortest path from <code>b</code> to <code>a</code> is 12, and there exists an edge of weight 2 between <code>c</code> and <code>b</code>, then the length of the shortest path from <code>c</code> to <code>a</code> must be no less than 10. T</p> <p>\u5982\u679cc\u5728b-a\u7684\u6700\u77ed\u8def\u4e0a\uff0c\u90a3\u4e48c-a\u7684\u6700\u77ed\u8def\u5c31\u4e3a10</p> <p>\u5982\u679cc\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u90a3\u4e48c-a\u7684\u6700\u77ed\u8def\u5c31\u4e0d\u786e\u5b9a\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u5927\u4e8e10\uff0c\u4e0d\u7136c-a\u7684\u8ddd\u79bb\u5c31\u5c0f\u4e8e\u7b49\u4e8e9\uff0c\u90a3\u4e48b-a\u7684\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u66f4\u65b0\u4e3ac-b-a = c-a + b-a &lt;= 9 + 2 = 11</p>"},{"location":"ClassNotes/HW%20summary/#hw10","title":"HW10","text":"<p>2-1</p> <p></p> <p>2-2</p> <p></p> <p>\u5f53\u4e14\u4ec5\u5f53G\u8054\u901a\u65f6\u6700\u5c0f\u751f\u6210\u6811\u5b58\u5728\u3002\uff08\u4f46\u4e0d\u4fdd\u8bc1unique\uff09</p> <p>2-3</p> <p></p> <p>2-4</p> <p></p>"},{"location":"ClassNotes/verilog/","title":"\u6570\u5b57\u903b\u8f91\u8bbe\u8ba1","text":""},{"location":"ClassNotes/verilog/#1","title":"1 \u6570\u636e\u7c7b\u578b","text":"<p>wire reg</p> <p>wire \uff1a\u7ebf\u7f51\u578b\u6570\u636e\u7c7b\u578b\uff0cverilog\u8bed\u6cd5\u4e2d\u7684\u4e00\u79cd\u4e3b\u8981\u6570\u636e\u7c7b\u578b\uff0c\u7528\u4e8e\u8868\u793a\u7ebf\u7f51\u578b\u4fe1\u53f7\uff0c\u4e0e\u5b9e\u9645\u7535\u8def\u4e2d\u7684\u4fe1\u53f7\u8fde\u7ebf\u76f8\u5bf9\u5e94\u3002wire\u662fverilog\u4e2d\u7684\u9ed8\u8ba4\u6570\u636e\u7c7b\u578b\uff0c\u6b64\u4f8b\u4e2d\u7684\u8f93\u5165\u8f93\u51fa\u4fe1\u53f7\u6ca1\u6709\u6307\u5b9a\u6570\u636e\u7c7b\u578b\uff0c\u5219\u9ed8\u8ba4\u4e3awire\u578b\u3002\u9664wire\u5916\uff0c\u53e6\u5916\u4e00\u79cd\u4e3b\u8981\u6570\u636e\u7c7b\u578b\u4e3areg\uff0c\u8868\u793a\u5bc4\u5b58\u5668\u7c7b\u578b\u6570\u636e\u3002</p> <p>reg \uff1a\u9664wire\u7c7b\u578b\u5916\uff0c\u53e6\u5916\u4e00\u79cd\u5e38\u7528\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e00\u822c\u8868\u793a\u5bc4\u5b58\u5668\u7c7b\u578b\u6570\u636e\uff0c\u4e0d\u8fc7\u5e76\u4e0d\u7edd\u5bf9\uff0c\u8bb0\u4f4f\u4e00\u6761\u539f\u5219\uff1a\u5728always\u5757\u5185\u88ab\u8d4b\u503c\u7684\u4fe1\u53f7\u5e94\u5b9a\u4e49\u6210reg\u578b\uff0c\u7528assign\u8bed\u53e5\u8d4b\u503c\u7684\u4fe1\u53f7\u5e94\u5b9a\u4e49\u6210wire\u578b\u3002</p> <p>\u8bbe\u8ba1\u4e2d\uff0c\u8f93\u5165\u4fe1\u53f7\u4e00\u822c\u6765\u8bf4\u4e0d\u80fd\u5224\u65ad\u51fa\u4e0a\u4e00\u7ea7\u662f\u5bc4\u5b58\u5668\u8f93\u51fa\u8fd8\u662f\u7ec4\u5408\u903b\u8f91\u8f93\u51fa\uff0c\u5bf9\u4e8e\u672c\u7ea7\u6765\u8bf4\uff0c\u5c31\u5f53\u6210\u4e00\u6839\u5bfc\u7ebf\uff0c\u5373wire\u578b\u3002\u800c\u8f93\u51fa\u4fe1\u53f7\u5219\u7531\u81ea\u5df1\u6765\u51b3\u5b9a\u662freg\u8fd8\u662f\u7ec4\u5408\u903b\u8f91\u8f93\u51fa\uff0cwire\u548creg\u578b\u90fd\u53ef\u4ee5\u3002\u4f46\u4e00\u822c\u7684\uff0c\u6574\u4e2a\u8bbe\u8ba1\u7684\u5916\u90e8\u8f93\u51fa\uff08\u5373\u6700\u9876\u5c42\u6a21\u5757\u7684\u8f93\u51fa\uff09\uff0c\u8981\u6c42\u662freg\u8f93\u51fa\uff0c\u8fd9\u6bd4\u8f83\u7a33\u5b9a\u3001\u6247\u51fa\u80fd\u529b\u597d\u3002</p> <p>\u4f46\u82e5\u6b64\u53d8\u91cf\u8981\u653e\u5728begin\u2026end\u4e4b\u5185\uff0c\u5219\u8be5\u53d8\u91cf\u53ea\u80fd\u662freg\u578b\uff1b\u5728begin\u2026end\u4e4b\u5916\uff0c\u5219\u7528wire\u578b\uff1b\u4f7f\u7528wire\u578b\u65f6\uff0c\u5fc5\u987b\u642d\u914dassign\uff1breg\u578b\u53ef\u4ee5\u4e0d\u7528\u3002input\u3001output\u3001inout\u9884\u8bbe\u503c\u90fd\u662fwire\u578b\u3002</p> <p>\u5728Verilog\u4e2d\u4f7f\u7528reg\u578b\uff0c\u5e76\u4e0d\u8868\u793a\u7efc\u5408\u51fa\u6765\u5c31\u662f\u6682\u5b58\u5668register\uff1a\u5728\u7ec4\u5408\u7535\u8def\u4e2d\u4f7f\u7528reg\uff0c\u7ec4\u5408\u540e\u53ea\u662fnet\uff1b\u5728\u65f6\u5e8f\u7535\u8def\u4e2d\u4f7f\u7528reg\uff0c\u5408\u6210\u540e\u624d\u662f\u4ee5Flip-Flop\u5f62\u5f0f\u8868\u793a\u7684register\u89e6\u53d1\u5668\u3002</p> <p>reg\u578b\u6570\u636e\u4fdd\u6301\u6700\u540e\u4e00\u6b21\u7684\u8d4b\u503c\uff0c\u800cwire\u578b\u6570\u636e\u9700\u8981\u6301\u7eed\u7684\u9a71\u52a8\u3002wire\u7528\u5728\u8fde\u7eed\u8d4b\u503c\u8bed\u53e5assign\u4e2d\uff1breg\u7528\u4e8ealways\u8fc7\u7a0b\u8d4b\u503c\u8bed\u53e5\u4e2d\u3002</p>"},{"location":"ClassNotes/verilog/#2","title":"2 \u8d4b\u503c","text":""},{"location":"ClassNotes/verilog/#21","title":"2.1\u8fde\u7eed\u8d4b\u503c","text":"<p><code>assign</code>\u8bed\u53e5\u4e5f\u79f0\u4e3a\u8fde\u7eed\u8d4b\u503c\uff0c\u5e76\u4e14\u59cb\u7ec8\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u3002</p> <p>\u7528\u4e8e\u5bf9wire\u578b\u53d8\u91cf\u8d4b\u503c\uff0c\u7b26\u53f7\u7528\u201dassign\u201d\u8868\u793a\uff0c\u683c\u5f0f\u5982\u4e0b\uff0c\u5176\u4e2dLHS\uff08left hand side\uff09\u6307\u5de6\u4fa7\uff0cRHS\uff08right hand side\uff09\u6307\u53f3\u4fa7</p> <p><code>assign     LHS_target = RHS_expression\uff1b</code></p> <p>LHS\u5fc5\u987b\u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u6216\u8005\u7ebf\u6027\u53d8\u91cf\uff0c\u4e0d\u80fd\u662f\u5bc4\u5b58\u5668</p> <p>RHS\u7684\u7c7b\u578b\u6ca1\u6709\u8981\u6c42\uff0c\u53ef\u4ee5\u662f\u6807\u91cf\u6216\u7ebf\u578b\u6216\u5b58\u5668\u5411\u91cf\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u8c03\u7528\u3002</p> <p>\u963b\u585e\u8d4b\u503c\u548c\u975e\u963b\u585e\u8d4b\u503c\u90fd\u8981\u53d1\u751f\u5728inital\u6216always\u5757\u4e2d\uff0c\u5728\u5757\u5916\u9762\u7684\u8d4b\u503c\u53ea\u80fd\u4e3a\u8fde\u7eed\u8d4b\u503cassign</p>"},{"location":"ClassNotes/verilog/#22","title":"2.2\u8fc7\u7a0b\u8d4b\u503c","text":""},{"location":"ClassNotes/verilog/#211","title":"2.1.1\u963b\u585e\u8d4b\u503c","text":"<p>\u963b\u585e\u8d4b\u503c\u5c5e\u4e8e\u987a\u5e8f\u6267\u884c\uff0c\u5373\u4e0b\u4e00\u6761\u8bed\u53e5\u6267\u884c\u524d\uff0c\u5f53\u524d\u8bed\u53e5\u4e00\u5b9a\u4f1a\u6267\u884c\u5b8c\u6bd5\u3002</p> <p>\u963b\u585e\u8d4b\u503c\u8bed\u53e5\u4f7f\u7528\u7b49\u53f7 = \u4f5c\u4e3a\u8d4b\u503c\u7b26\u3002</p>"},{"location":"ClassNotes/verilog/#212","title":"2.1.2\u975e\u963b\u585e\u8d4b\u503c","text":"<p>\u975e\u963b\u585e\u8d4b\u503c\u5c5e\u4e8e\u5e76\u884c\u6267\u884c\u8bed\u53e5\uff0c\u5373\u4e0b\u4e00\u6761\u8bed\u53e5\u7684\u6267\u884c\u548c\u5f53\u524d\u8bed\u53e5\u7684\u6267\u884c\u662f\u540c\u65f6\u8fdb\u884c\u7684\uff0c\u5b83\u4e0d\u4f1a\u963b\u585e\u4f4d\u4e8e\u540c\u4e00\u4e2a\u8bed\u53e5\u5757\u4e2d\u540e\u9762\u8bed\u53e5\u7684\u6267\u884c\u3002</p> <p>\u975e\u963b\u585e\u8d4b\u503c\u8bed\u53e5\u4f7f\u7528\u5c0f\u4e8e\u7b49\u4e8e\u53f7 &lt;= \u4f5c\u4e3a\u8d4b\u503c\u7b26\u3002</p> <p>\u5207\u8bb0\u4e0d\u8981\u5728\u4e00\u4e2a\u8fc7\u7a0b\u7ed3\u6784\u4e2d\u6df7\u5408\u4f7f\u7528\u963b\u585e\u8d4b\u503c\u4e0e\u975e\u963b\u585e\u8d4b\u503c\u3002\u4e24\u79cd\u8d4b\u503c\u65b9\u5f0f\u6df7\u7528\u65f6\uff0c\u65f6\u5e8f\u4e0d\u5bb9\u6613\u63a7\u5236\uff0c\u5f88\u5bb9\u6613\u5f97\u5230\u610f\u5916\u7684\u7ed3\u679c\u3002</p> <p>\u66f4\u591a\u65f6\u5019\uff0c\u5728\u8bbe\u8ba1\u7535\u8def\u65f6\uff0calways \u65f6\u5e8f\u903b\u8f91\u5757\u4e2d\u591a\u7528\u975e\u963b\u585e\u8d4b\u503c\uff0calways \u7ec4\u5408\u903b\u8f91\u5757\u4e2d\u591a\u7528\u963b\u585e\u8d4b\u503c\uff1b\u5728\u4eff\u771f\u7535\u8def\u65f6\uff0cinitial \u5757\u4e2d\u4e00\u822c\u591a\u7528\u963b\u585e\u8d4b\u503c\u3002</p> <pre><code>always @(posedge clk) begin\n\u00a0 \u00a0 a &lt;= b ;\nend\n\u00a0\nalways @(posedge clk) begin\n\u00a0 \u00a0 b &lt;= a;\nend\n</code></pre>"},{"location":"ClassNotes/verilog/#_1","title":"\u8fc7\u7a0b\u8fde\u7eed\u8d4b\u503c","text":"<p>\u8fc7\u7a0b\u8fde\u7eed\u8d4b\u503c\u5c5e\u4e8e\u8fc7\u7a0b\u8d4b\u503c\u7684\u4e00\u79cd\uff0c\u4e5f\u662f\u5728initial\u548calways\u8bed\u53e5\u5757\u4e2d\u4f7f\u7528assign - deassign\u3001force - release\u7684\u8d4b\u503c\u8bed\u53e5\u3002\u8fd9\u6837\u7684\u8d4b\u503c\u8bed\u53e5\u4f1a\u6539\u53d8\u6240\u6709\u5728\u5176\u4ed6\u5730\u65b9\u5bf9wire\u6216reg \u7684\u8d4b\u503c\uff0c\u4e5f\u5c31\u662f\u4e0d\u7ba1\u4f60\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u6539\u53d8\u4e86LHS\u7684\u503c\uff0c\u4e5f\u4f1a\u88ab\u76f4\u63a5\u6539\u5199\u3002</p>"},{"location":"ClassNotes/verilog/#3","title":"3 \u65f6\u5e8f\u63a7\u5236","text":"<p>\u65f6\u5ef6\u63a7\u5236\u548c\u4e8b\u4ef6\u63a7\u5236\u3002\u4e8b\u4ef6\u63a7\u5236\u4e3b\u8981\u5206\u4e3a\u8fb9\u6cbf\u89e6\u53d1\u4e8b\u4ef6\u63a7\u5236\u4e0e\u7535\u5e73\u654f\u611f\u4e8b\u4ef6\u63a7\u5236\u3002</p>"},{"location":"ClassNotes/verilog/#_2","title":"\u65f6\u5ef6\u63a7\u5236","text":"<p>\u57fa\u4e8e\u65f6\u5ef6\u7684\u65f6\u5e8f\u63a7\u5236\u51fa\u73b0\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5b83\u6307\u5b9a\u4e86\u8bed\u53e5\u4ece\u5f00\u59cb\u6267\u884c\u5230\u6267\u884c\u5b8c\u6bd5\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u3002</p> <p>\u65f6\u5ef6\u53ef\u4ee5\u662f\u6570\u5b57\u3001\u6807\u8bc6\u7b26\u6216\u8005\u8868\u8fbe\u5f0f\u3002</p> <p>\u6839\u636e\u5728\u8868\u8fbe\u5f0f\u4e2d\u7684\u4f4d\u7f6e\u5dee\u5f02\uff0c\u65f6\u5ef6\u63a7\u5236\u53c8\u53ef\u4ee5\u5206\u4e3a\u5e38\u89c4\u65f6\u5ef6\u4e0e\u5185\u5d4c\u65f6\u5ef6\u3002</p>"},{"location":"ClassNotes/verilog/#_3","title":"\u8fb9\u6cbf\u89e6\u53d1\u4e8b\u4ef6\u63a7\u5236","text":"<p>\u5728 Verilog \u4e2d\uff0c\u4e8b\u4ef6\u662f\u6307\u67d0\u4e00\u4e2a reg \u6216 wire \u578b\u53d8\u91cf\u53d1\u751f\u4e86\u503c\u7684\u53d8\u5316\u3002</p> <p>\u4e00\u822c\u4e8b\u4ef6\u63a7\u5236</p> <p>\u4e8b\u4ef6\u63a7\u5236\u7528\u7b26\u53f7 @ \u8868\u793a\u3002\u8bed\u53e5\u6267\u884c\u7684\u6761\u4ef6\u662f\u4fe1\u53f7\u7684\u503c\u53d1\u751f\u7279\u5b9a\u7684\u53d8\u5316\u3002</p> <p>\u5173\u952e\u5b57 posedge \u6307\u4fe1\u53f7\u53d1\u751f\u8fb9\u6cbf\u6b63\u5411\u8df3\u53d8\uff0cnegedge \u6307\u4fe1\u53f7\u53d1\u751f\u8d1f\u5411\u8fb9\u6cbf\u8df3\u53d8\uff0c\u672a\u6307\u660e\u8df3\u53d8\u65b9\u5411\u65f6\uff0c\u5219 2 \u79cd\u60c5\u51b5\u7684\u8fb9\u6cbf\u53d8\u5316\u90fd\u4f1a\u89e6\u53d1\u76f8\u5173\u4e8b\u4ef6\u3002</p> <pre><code>//\u4fe1\u53f7clk\u53ea\u8981\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u6267\u884cq&lt;=d\uff0c\u53cc\u8fb9\u6cbfD\u89e6\u53d1\u5668\u6a21\u578b\nalways @(clk) q &lt;= d ;                \n//\u5728\u4fe1\u53f7clk\u4e0a\u5347\u6cbf\u65f6\u523b\uff0c\u6267\u884cq&lt;=d\uff0c\u6b63\u8fb9\u6cbfD\u89e6\u53d1\u5668\u6a21\u578b\nalways @(posedge clk) q &lt;= d ;  \n//\u5728\u4fe1\u53f7clk\u4e0b\u964d\u6cbf\u65f6\u523b\uff0c\u6267\u884cq&lt;=d\uff0c\u8d1f\u8fb9\u6cbfD\u89e6\u53d1\u5668\u6a21\u578b\nalways @(negedge clk) q &lt;= d ;\n//\u7acb\u523b\u8ba1\u7b97d\u7684\u503c\uff0c\u5e76\u5728clk\u4e0a\u5347\u6cbf\u65f6\u523b\u8d4b\u503c\u7ed9q\uff0c\u4e0d\u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\nq = @(posedge clk) d ;  \nalways @(posedge clk or negedge rstn)    begin      \n//always @(posedge clk , negedge rstn)    begin      \n//\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u9648\u5217\u591a\u4e2a\u4e8b\u4ef6\u89e6\u53d1\n</code></pre> <p>\u654f\u611f\u5217\u8868</p> <p>\u5f53\u7ec4\u5408\u903b\u8f91\u8f93\u5165\u53d8\u91cf\u5f88\u591a\u65f6\uff0c\u90a3\u4e48\u7f16\u5199\u654f\u611f\u5217\u8868\u4f1a\u5f88\u7e41\u7410\u3002\u6b64\u65f6\uff0c\u66f4\u4e3a\u7b80\u6d01\u7684\u5199\u6cd5\u662f @* \u6216 @(*)\uff0c\u8868\u793a\u5bf9\u8bed\u53e5\u5757\u4e2d\u7684\u6240\u6709\u8f93\u5165\u53d8\u91cf\u7684\u53d8\u5316\u90fd\u662f\u654f\u611f\u7684. \u5373always\u6a21\u5757\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u8f93\u5165\u4fe1\u53f7\u6216\u7535\u5e73\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u8be5\u8bed\u53e5\u4e0b\u65b9\u7684\u6a21\u5757\u5c06\u88ab\u6267\u884c\u3002</p> <pre><code>always @(*) begin\n//always @(a, b, c, d, e, f, g, h, i, j, k, l, m) begin\n//\u4e24\u79cd\u5199\u6cd5\u7b49\u4ef7\n    assign s = a? b+c : d ? e+f : g ? h+i : j ? k+l : m ;\nend\n</code></pre>"},{"location":"ClassNotes/verilog/#4","title":"4 \u8bed\u53e5\u6267\u884c","text":""},{"location":"ClassNotes/verilog/#_4","title":"\u987a\u5e8f\u5757","text":"<p>\u987a\u5e8f\u5757\u7528\u5173\u952e\u5b57 begin \u548c end \u6765\u8868\u793a\u3002</p> <p>\u987a\u5e8f\u5757\u4e2d\u7684\u8bed\u53e5\u662f\u4e00\u6761\u6761\u6267\u884c\u7684\u3002\u5f53\u7136\uff0c\u975e\u963b\u585e\u8d4b\u503c\u9664\u5916\u3002</p> <p>\u987a\u5e8f\u5757\u4e2d\u6bcf\u6761\u8bed\u53e5\u7684\u65f6\u5ef6\u603b\u662f\u4e0e\u5176\u524d\u9762\u8bed\u53e5\u6267\u884c\u7684\u65f6\u95f4\u76f8\u5173\u3002</p> <p>\u5728\u672c\u8282\u4e4b\u524d\u7684\u4eff\u771f\u4e2d\uff0cinitial \u5757\u4e2d\u7684\u963b\u585e\u8d4b\u503c\uff0c\u90fd\u662f\u987a\u5e8f\u5757\u7684\u5b9e\u4f8b\u3002</p>"},{"location":"ClassNotes/verilog/#_5","title":"\u5e76\u884c\u5757","text":"<p>\u5e76\u884c\u5757\u6709\u5173\u952e\u5b57 fork \u548c join \u6765\u8868\u793a\u3002</p> <p>\u5e76\u884c\u5757\u4e2d\u7684\u8bed\u53e5\u662f\u5e76\u884c\u6267\u884c\u7684\uff0c\u5373\u4fbf\u662f\u963b\u585e\u5f62\u5f0f\u7684\u8d4b\u503c\u3002</p> <p>\u5e76\u884c\u5757\u4e2d\u6bcf\u6761\u8bed\u53e5\u7684\u65f6\u5ef6\u90fd\u662f\u4e0e\u5757\u8bed\u53e5\u5f00\u59cb\u6267\u884c\u7684\u65f6\u95f4\u76f8\u5173\u3002</p> <p>\u987a\u5e8f\u5757\u4e0e\u5e76\u884c\u5757\u7684\u533a\u522b\u663e\u800c\u6613\u89c1\uff0c\u4e0b\u9762\u7528\u4eff\u771f\u8bf4\u660e\u3002</p>"},{"location":"ClassNotes/verilog/#if","title":"if","text":"<pre><code>if (condition1)       true_statement1 ;\nelse if (condition2)        true_statement2 ;\nelse if (condition3)        true_statement3 ;\nelse                      default_statement ;\n</code></pre> <p>if\u5982\u679c\u6709\u591a\u4e2a\u8bed\u53e5\uff0c\u5c31\u8981\u52a0begin\u548cend</p>"},{"location":"ClassNotes/verilog/#case","title":"case","text":"<pre><code>case(case_expr)\n    condition1     :             true_statement1 ;\n    // ture_statement1 \u7b49\u6267\u884c\u8bed\u53e5\u53ef\u4ee5\u662f\u4e00\u6761\u8bed\u53e5\uff0c\u4e5f\u53ef\u4ee5\u662f\u591a\u6761\u3002\u5982\u679c\u662f\u591a\u6761\u6267\u884c\u8bed\u53e5\uff0c\u5219\u9700\u8981\u7528 begin \u4e0e end \u5173\u952e\u5b57\u8fdb\u884c\u8bf4\u660e\u3002\n    condition2     :             true_statement2 ;\n    \u2026\u2026\n    default        :             default_statement ;\nendcase\n</code></pre> <p>casex\u3001 casez \u8bed\u53e5\u662f case \u8bed\u53e5\u7684\u53d8\u5f62\uff0c\u7528\u6765\u8868\u793a\u6761\u4ef6\u9009\u9879\u4e2d\u7684\u65e0\u5173\u9879\u3002</p> <p>casex \u7528 \u201cx\u201d \u6765\u8868\u793a\u65e0\u5173\u503c\uff0ccasez \u7528\u95ee\u53f7 \u201c?\u201d \u6765\u8868\u793a\u65e0\u5173\u503c\u3002</p> <pre><code>casez(sel)\n            4'b???1:     sout_t = p0 ;\n            4'b??1?:     sout_t = p1 ;\n            4'b?1??:     sout_t = p2 ;\n            4'b1???:     sout_t = p3 ;  \n        default:         sout_t = 2'b0 ;\n    endcase\n</code></pre>"},{"location":"ClassNotes/verilog/#_6","title":"\u5faa\u73af","text":"<pre><code>while (condition) begin\n    \u2026\nend\n\nfor(initial_assignment; condition ; step_assignment)  begin\n    \u2026\nend\n\nrepeat (loop_times) begin\n    \u2026\nend \n//repeat \u7684\u529f\u80fd\u662f\u6267\u884c\u56fa\u5b9a\u6b21\u6570\u7684\u5faa\u73af\uff0c\u5b83\u4e0d\u80fd\u50cf while \u5faa\u73af\u90a3\u6837\u7528\u4e00\u4e2a\u903b\u8f91\u8868\u8fbe\u5f0f\u6765\u786e\u5b9a\u5faa\u73af\u662f\u5426\u7ee7\u7eed\u6267\u884c\u3002repeat \u5faa\u73af\u7684\u6b21\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u91cf\u3001\u53d8\u91cf\u6216\u4fe1\u53f7\u3002\u5982\u679c\u5faa\u73af\u6b21\u6570\u662f\u53d8\u91cf\u4fe1\u53f7\uff0c\u5219\u5faa\u73af\u6b21\u6570\u662f\u5f00\u59cb\u6267\u884c repeat \u5faa\u73af\u65f6\u53d8\u91cf\u4fe1\u53f7\u7684\u503c\u3002\n\nforever begin\n    \u2026\nend\n\n//example forever \u8bed\u53e5\u5b9e\u73b0\u4e00\u4e2a\u65f6\u949f\u8fb9\u6cbf\u63a7\u5236\u7684\u5bc4\u5b58\u5668\u95f4\u6570\u636e\u4f20\u8f93\u529f\u80fd\nreg    clk ;\nreg    data_in, data_temp ;\ninitial begin\n    forever @(posedge clk)      data_temp = data_in ;\nend\n</code></pre> <p>always \uff1a\u9664assign\u5916\uff0c\u53e6\u5916\u4e00\u79cd\u5b9e\u73b0\u8d4b\u503c\u64cd\u4f5c\u7684\u5173\u952e\u5b57\uff0c\u4e24\u8005\u90fd\u4e0d\u53ef\u5d4c\u5957\uff0c\u533a\u522b\u5728\u4e8e\uff0cassign\u8bed\u53e5\u53ea\u80fd\u5b9e\u73b0\u7ec4\u5408\u903b\u8f91\u8d4b\u503c\uff0c\u4e14\u4e00\u4e2aassign\u8bed\u53e5\u540e\u9762\u53ea\u80fd\u8ddf\u4e00\u6761\u8d4b\u503c\u8868\u8fbe\u5f0f\u3002\u800calways\u5373\u80fd\u5b9e\u73b0\u7ec4\u5408\u903b\u8f91\u8d4b\u503c\uff0c\u53c8\u80fd\u5b9e\u73b0\u65f6\u5e8f\u903b\u8f91\u8d4b\u503c\u64cd\u4f5c\uff0c\u4e14\u53ef\u4ee5\u5305\u542b\u591a\u6761\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u591a\u6761\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u5219\u5e94\u4f4d\u4e8ebegin/end\u5bf9\u4e2d\u95f4\u3002</p>"},{"location":"ClassNotes/verilog/#5","title":"5 \u8fc7\u7a0b\u7ed3\u6784","text":"<p>\u8fc7\u7a0b\u7ed3\u6784\u8bed\u53e5\u6709 2 \u79cd\uff0cinitial \u4e0e always \u8bed\u53e5\u3002\u5b83\u4eec\u662f\u884c\u4e3a\u7ea7\u5efa\u6a21\u7684 2 \u79cd\u57fa\u672c\u8bed\u53e5\u3002\u4e00\u4e2a\u6a21\u5757\u4e2d\u53ef\u4ee5\u5305\u542b\u591a\u4e2a initial \u548c always \u8bed\u53e5\uff0c\u4f46 2 \u79cd\u8bed\u53e5\u4e0d\u80fd\u5d4c\u5957\u4f7f\u7528\u3002\u8fd9\u4e9b\u8bed\u53e5\u5728\u6a21\u5757\u95f4\u5e76\u884c\u6267\u884c\uff0c\u4e0e\u5176\u5728\u6a21\u5757\u7684\u524d\u540e\u987a\u5e8f\u6ca1\u6709\u5173\u7cfb\u3002\u4f46\u662f initial \u8bed\u53e5\u6216 always \u8bed\u53e5\u5185\u90e8\u53ef\u4ee5\u7406\u89e3\u4e3a\u662f\u987a\u5e8f\u6267\u884c\u7684\uff08\u975e\u963b\u585e\u8d4b\u503c\u9664\u5916\uff09\u3002\u6bcf\u4e2a initial \u8bed\u53e5\u6216 always \u8bed\u53e5\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u72ec\u7acb\u7684\u63a7\u5236\u6d41\uff0c\u6267\u884c\u65f6\u95f4\u90fd\u662f\u4ece 0 \u65f6\u523b\u5f00\u59cb\u3002</p> <p>initial \u8bed\u53e5\u4ece 0 \u65f6\u523b\u5f00\u59cb\u6267\u884c\uff0c\u53ea\u6267\u884c\u4e00\u6b21\uff0c\u591a\u4e2a initial \u5757\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u5982\u679c initial \u5757\u5185\u5305\u542b\u591a\u4e2a\u8bed\u53e5\uff0c\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57 begin \u548c end \u7ec4\u6210\u4e00\u4e2a\u5757\u8bed\u53e5\u3002\u5982\u679c initial \u5757\u5185\u53ea\u8981\u4e00\u6761\u8bed\u53e5\uff0c\u5173\u952e\u5b57 begin \u548c end \u53ef\u4f7f\u7528\u4e5f\u53ef\u4e0d\u4f7f\u7528\u3002</p> <p>always \u8bed\u53e5\u662f\u91cd\u590d\u6267\u884c\u7684\u3002always \u8bed\u53e5\u5757\u4ece 0 \u65f6\u523b\u5f00\u59cb\u6267\u884c\u5176\u4e2d\u7684\u884c\u4e3a\u8bed\u53e5\uff1b\u5f53\u6267\u884c\u5b8c\u6700\u540e\u4e00\u6761\u8bed\u53e5\u540e\uff0c\u4fbf\u518d\u6b21\u6267\u884c\u8bed\u53e5\u5757\u4e2d\u7684\u7b2c\u4e00\u6761\u8bed\u53e5\uff0c\u5982\u6b64\u5faa\u73af\u53cd\u590d\u3002</p>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/","title":"\u5927\u5b66\u7269\u7406\u5b9e\u9a8c\u7eea\u8bba","text":""},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_2","title":"\u8bef\u5dee\u5206\u7c7b","text":"<ol> <li>\u7cfb\u7edf\u8bef\u5dee     \u5df2\u5b9a\u7cfb\u7edf\u8bef\u5dee\uff1a\u6d4b\u91cf\u503c\u548c\u771f\u503c\u504f\u79bb\u603b\u662f\u76f8\u540c\u7684\u90a3\u4e00\u90e8\u5206\u8bef\u5dee\u5206\u91cf\u3002\uff08\u5b9e\u9a8c\u516c\u5f0f\u5ffd\u7565\u67d0\u4e9b\u5f71\u54cd\u56e0\u7d20\u3001\u4eea\u5668\u51c6\u786e\u5ea6\u4e0d\u591f\u3001\u4eea\u8868\u96f6\u70b9\u6f02\u79fb\uff09     \u672a\u5b9a\u7cfb\u7edf\u8bef\u5dee\uff1a\u4e0d\u77e5\u9053\u786e\u5207\u7684\u7cfb\u7edf\u8bef\u5dee\u503c\uff0c\u53ea\u77e5\u9053\u5904\u4e8e\u4e00\u4e2a\u8303\u56f4\u5185\u3002\uff08\u4eea\u5668\u7684\u5141\u5dee\uff09</li> <li>\u968f\u673a\u8bef\u5dee     \u6d4b\u91cf\u503c\u5bf9\u4e8e\u771f\u503c\u6709\u4e00\u4e2a\u65e0\u89c4\u5f8b\u7684\u6da8\u843d\uff0c\u7b26\u5408\u5355\u5cf0\u6027\u3001\u5bf9\u79f0\u6027\u3001\u6709\u754c\u6027#\u4e0d\u53ef\u907f\u514d\uff0c\u4f46\u53ef\u901a\u8fc7\u591a\u6b21\u6d4b\u91cf\u51cf\u5c0f\u5f71\u54cd\u3002</li> <li>\u7c97\u5927\u8bef\u5dee     \u8bfb\u9519\u5199\u9519\u7ed3\u679c\u6c42\u9519\uff01</li> </ol>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_3","title":"\u6d4b\u91cf\u8bef\u5dee\u5206\u5e03","text":"<p>\u5982\u679c\u6d4b\u91cf\u8bef\u5dee\u5206\u5e03\u4e0d\u540c\uff0c\u90a3\u4e48\u6d4b\u91cf\u7ed3\u679c\u843d\u5728\u76f8\u540c\u7f6e\u4fe1\u533a\u95f4\u4e2d\u6240\u5bf9\u5e94\u7684\u7f6e\u4fe1\u6982\u7387\u4e0d\u4e00\u5b9a\u76f8\u540c\u3002</p> <ol> <li>\u6b63\u6001\u5206\u5e03\uff1a\u5355\u5cf0\u6027\u3001\u5bf9\u79f0\u6027\u3001\u6709\u754c\u6027\u3001\u62b5\u507f\u6027</li> <li>\u5747\u5300\u5206\u5e03\uff1a\u6807\u51c6\u504f\u5dee\u4e3a\\(\\sigma = \\frac{a}{\\sqrt{3}}\\)</li> </ol>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_4","title":"\u6d4b\u91cf\u7ed3\u679c\u8868\u8fbe\u5f0f","text":"<p>\u4e09\u8981\u7d20\uff1a\u6d4b\u5f97\u503c\u3001\u4e0d\u786e\u5b9a\u5ea6\u3001\u5355\u4f4d</p>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_5","title":"\u7cbe\u5bc6\u5ea6\u3001\u51c6\u786e\u5ea6\u3001\u6b63\u786e\u8bfb","text":"<ol> <li>\u7cbe\u5bc6\u5ea6\uff1a\u591a\u6b21\u6d4b\u5b9a\uff0c\u5404\u6d4b\u5b9a\u503c\u5f7c\u6b64\u63a5\u8fd1\u7684\u7a0b\u5ea6\u3002\u5373\u7ed3\u679c\u5f7c\u6b64\u4e4b\u95f4\u504f\u79bb\u662f\u5426\u5927\uff0c\u4e0d\u8003\u8651\u4e0e\u771f\u503c\u7684\u504f\u79bb\u60c5\u51b5\u3002\u7528\u6807\u51c6\u504f\u5dee\u8868\u793a\u3002</li> <li>\u51c6\u786e\u5ea6\uff1a\u6d4b\u5b9a\u503c\u4e0e\u771f\u5b9e\u503c\u7684\u7b26\u5408\u7a0b\u5ea6\uff0c\u4eea\u5668\u7684\u51c6\u786e\u5ea6\u7b49\u7ea7\u6307\u89c4\u5b9a\u6761\u4ef6\u4e0b\u6307\u9488\u6ee1\u504f\u65f6\u51fa\u73b0\u7684\u6700\u5927\u76f8\u5bf9\u8bef\u5dee\u7684\u767e\u5206\u6570\u503c\u3002</li> <li>\u6b63\u786e\u5ea6\uff1a\u5404\u6d4b\u5b9a\u503c\u7684\u5e73\u5747\u503c\u4e0e\u4e00\u4e2a\u53c2\u8003\u91cf\u503c\u95f4\u7684\u4e00\u81f4\u7a0b\u5ea6\u3002\u6b63\u786e\u5ea6\u4e0d\u662f\u4e00\u4e2a\u91cf\u3002\u6b63\u786e\u5ea6\u4e0e\u7cfb\u7edf\u8bef\u5dee\u6709\u5173\uff0c\u4e0e\u968f\u673a\u8bef\u5dee\u65e0\u5173\u3002</li> </ol>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_6","title":"\u6d4b\u91cf\u7684\u4e09\u4e2a\u5ea6","text":"<ol> <li>\u6d4b\u91cf\u7684\u7cbe\u5bc6\u5ea6\uff1a\u5404\u6b21\u6d4b\u91cf\u6570\u636e\u5927\u5c0f**\u5f7c\u6b64**\u63a5\u8fd1\u7684\u7a0b\u5ea6</li> <li>\u6d4b\u91cf\u7684\u6b63\u786e\u5ea6\uff1a\u6d4b\u91cf\u6570\u636e\u7684**\u5e73\u5747\u503c**\u504f\u79bb\u771f\u503c\u7684\u7a0b\u5ea6\uff0c\u4f46\u5bf9\u4e8e\u5355\u4e2a\u6d4b\u91cf\u6570\u636e\u53ef\u80fd\u5206\u5e03\u975e\u5e38\u79bb\u6563\u3002</li> <li>\u6d4b\u91cf\u7684\u51c6\u786e\u5ea6\uff1a\u6d4b\u91cf\u6570\u636e**\u96c6\u4e2d**\u4e8e\u771f\u503c\u9644\u8fd1\u7684\u7a0b\u5ea6\uff08\u53c8\u8981\u96c6\u4e2d\uff0c\u53c8\u8981\u9760\u8fd1\u771f\u503c\uff09</li> </ol> <p>\u6d4b\u91cf\u7684\u51c6\u786e\u5ea6\u662f\u5bf9\u6d4b\u91cf\u7ed3\u679c\u7684\u7efc\u5408\u8bc4\u4ef7\u3002</p>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_7","title":"\u5e38\u7528\u4eea\u5668\u8bef\u5dee","text":"<p>\u4eea\u5668\u5206\u8fa8\u529b\uff1a\u80fd\u5206\u8fa8\u7684\u7269\u7406\u91cf\u7684\u6700\u5c0f\u503c</p> <p>\u4eea\u5668\u793a\u503c\u8bef\u5dee\uff1a\u4eea\u5668\u5728\u6b63\u5e38\u4f7f\u7528\u4e0b\uff0c\u4eea\u5668\u793a\u503c\u4e0e\u5bf9\u5e94\u8f93\u5165\u91cf\u7684\u53c2\u8003\u503c\u4e4b\u5dee\u3002</p> <p>\u4eea\u5668\u7684\u6807\u5c3a\u95f4\u9694\uff1a\u5206\u5ea6\u503c</p> <p>\u4eea\u5668\u7684\u7075\u654f\u9608\uff1a\u4eea\u5668\u6307\u793a\u6709\u4e86\u521a\u521a\u53ef\u4ee5\u89c2\u5bdf\u5230\u7684\u53d8\u5316\u65f6\uff0c\u5bf9\u5e94\u7269\u7406\u91cf\u7684\u53d8\u5316\u7684\u5927\u5c0f\u3002</p> <p>\u4eea\u8868\u7684\u51c6\u786e\u5ea6\u7b49\u7ea7\uff1a\\(k=\u793a\u503c\u8bef\u5dee\u91cf\u7a0b\u00d7100k = \\frac{\u793a\u503c\u8bef\u5dee}{\u91cf\u7a0b} \\times 100k=\u91cf\u7a0b\u793a\u503c\u8bef\u5dee\u00d7100\\)</p>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_8","title":"\u4e0d\u786e\u5b9a\u5ea6","text":"<p>\u5b9e\u9645\u6d4b\u91cf\u4e2d\uff0c\u4e0d\u53ef\u80fd\u6d4b\u5f97\u88ab\u6d4b\u91cf\u7684\u771f\u503c\u3002\u6d4b\u91cf\u4e0d\u786e\u5b9a\u5ea6\u65f6\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u548c\u6d4b\u91cf\u7ed3\u679c\u5f97\u5230\u7684\u53c2\u6570\uff0c\u6d4b\u91cf\u7ed3\u679c\u7ed3\u5408\u8fd9\u4e2a\u53c2\u6570\u7ed9\u51fa\u4e86\u4e00\u4e2a\u533a\u95f4\uff0c\u6b64\u533a\u95f4\u8868\u5f81\u4e86\u88ab\u6d4b\u91cf\u503c\u56e0\u6d4b\u91cf\u8bef\u5dee\u7684\u5b58\u5728\u800c\u4ea7\u751f\u7684\u5206\u6563\u6027\u3002</p> <p>\u5728\u4e00\u4e9b\u5b9e\u9a8c\u4e2d\u4e5f\u4f1a\u7ed9\u51fa\u7406\u8bba\u771f\u503c\u3001\u7ea6\u5b9a\u771f\u503c\u7b49\uff0c\u6b64\u65f6\u4e5f\u5141\u8bb8\u7528\u7edd\u5bf9\u6d4b\u91cf\u8bef\u5dee\u548c\u76f8\u5bf9\u6d4b\u91cf\u8bef\u5dee\u6765\u8fdb\u884c\u4f30\u8ba1\u3002</p>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#a","title":"\u6807\u51c6\u4e0d\u786e\u5b9a\u5ea6\u7684A\u7c7b\u5206\u91cf\u8bc4\u5b9a","text":"<p>\u7531\u91cd\u590d\u89c2\u6d4b\u5f15\u8d77\uff0c\u53ef\u5229\u7528\u7edf\u8ba1\u5b66\u65b9\u6cd5\u8ba1\u7b97\u5f97\u5230\uff0c\u8bb0\u4e3a  </p>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#b","title":"\u6807\u51c6\u4e0d\u786e\u5b9a\u5ea6\u7684B\u7c7b\u5206\u91cf\u8bc4\u5b9a","text":"<p>\u7531\u9664A\u7c7b\u5206\u91cf\u8bc4\u5b9a\u5916\u7684\u5df2\u77e5\u4fe1\u606f\u83b7\u5f97\uff0c\u5305\u62ec\u6240\u7528\u4fe1\u606f\u7684\u6709\u5173\u6548\u5e94\uff0c\u65e2\u53ef\u4ee5\u662f\u968f\u673a\u6548\u5e94\uff0c\u4e5f\u53ef\u4ee5\u662f\u7cfb\u7edf\u6548\u5e94\u6216\u4e24\u8005\u517c\u800c\u6709\u4e4b\uff0cB\u7c7b\u5206\u91cf\u8bc4\u5b9a\u7ed3\u679c\u53ef\u9760\u7a0b\u5ea6\u51b3\u5b9a\u4e8e\u4fe1\u606f\u53ef\u9760\u7a0b\u5ea6\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4eea\u5668\u7684\u5141\u8bb8\u8bef\u5dee\u9650\u662f\u6807\u51c6\u4e0d\u786e\u5b9a\u5ea6B\u7c7b\u5206\u91cf\u7684\u4e3b\u8981\u6765\u6e90\u3002</p>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_9","title":"\u6709\u6548\u6570\u5b57","text":"<p>\u76f4\u63a5\u8bfb\u6570\u83b7\u5f97\u7684\u51c6\u786e\u6570\u5b57\u53eb\u505a**\u53ef\u9760\u6570\u5b57**\uff0c\u901a\u8fc7\u4f30\u8bfb\u5f97\u5230\u7684\u6570\u5b57\u53eb\u505a**\u5b58\u7591\u6570\u5b57**\u3002\u6d4b\u91cf\u7ed3\u679c\u4e2d\u53cd\u5e94\u6d4b\u91cf\u5927\u5c0f\u7684\u5e26\u6709\u4e00\u4f4d\u5b58\u7591\u6570\u5b57\u7684\u5168\u90e8\u6570\u5b57\u53eb\u505a**\u6709\u6548\u6570\u5b57**\u3002</p> <ul> <li>\u5f53\u88ab\u6d4b\u7269\u7684\u91cf\u548c\u6d4b\u91cf\u4eea\u5668\u786e\u5b9a\u540e\uff0c\u6709\u6548\u6570\u5b57\u4f4d\u6570\u5c31\u5df2\u7ecf\u786e\u5b9a</li> <li>\u6709\u6548\u6570\u5b57\u540e\u9762\u4e0d\u80fd\u4efb\u610f\u52a0\u4e0a\u6216\u62b9\u53bb\u96f6</li> <li>\u6709\u6548\u6570\u5b57\u4e0e\u5355\u4f4d\u6362\u7b97\u65e0\u5173</li> </ul>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_10","title":"\u4fee\u7ea6\u539f\u5219\u2014\u2014\u56db\u820d\u516d\u5165\u4e94\u51d1\u5076","text":"<ol> <li>\u4e0d\u5141\u8bb8\u8fde\u7eed\u4fee\u7ea6</li> <li>\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u4fee\u7ea6\u533a\u95f4\u7684\u6574\u6570\u500d\u6700\u63a5\u8fd1\u5df2\u77e5\u6570\uff0c\u5219\u6b64\u6574\u6570\u500d\u5c31\u8ba4\u4e3a\u662f\u4fee\u7ea6\u6570\u3002</li> <li>\u5982\u679c\u6709\u4e24\u4e2a\u8fde\u7eed\u7684\u4fee\u7ea6\u533a\u95f4\u6700\u63a5\u8fd1\u5df2\u77e5\u6570\uff0c\u9009\u53d6\u5076\u6570\u6574\u6570\u500d\u4f5c\u4e3a\u4fee\u7ea6\u6570\u3002</li> </ol>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_11","title":"\u6d4b\u91cf\u4e0d\u786e\u5b9a\u5ea6\u7684\u6709\u6548\u4f4d\u6570","text":"<p>\u5408\u6210\u6807\u51c6\u4e0d\u786e\u5b9a\u5ea6\u548c\u6269\u5c55\u4e0d\u786e\u5b9a\u5ea6\u6700\u591a\u53ea\u80fd\u53d6\u4e24\u4f4d\u6709\u6548\u6570\u5b57\u3002</p> <ol> <li>\u6700\u5de6\u8fb9\u7b2c\u4e00\u4f4d\u975e\u96f6\u6709\u6548\u6570\u5b57\u662f1\u548c2\u65f6\uff0c\u53ef\u53d6\u4e24\u4f4d\u3002\u800c3\u4ee5\u4e0a\u53ea\u53ef\u7528\u4e00\u4f4d\u3002</li> <li>\u6b32\u4fdd\u7559\u7684\u6700\u4f4e\u4f4d\u540e\u7684\u8fd9\u4f4d\u6570\u4e0d\u4e3a\u96f6\u5219\u8fdb\u4f4d\uff0c\u5982\u4e3a\u96f6\u5219\u820d\u53bb</li> </ol> <p>\\(u_c = 0.12134\\) -&gt; \\(u_c = 0.13\\)</p> <p>\\(u_c = 0.1201\\) -&gt; \\(u_c = 0.12\\)</p> <p>\\(u_c = 0.3201\\) -&gt; \\(u_c = 0.4\\)</p> <p>\\(u_c = 0.3021\\) -&gt; \\(u_c = 0.3\\)</p>"},{"location":"ClassNotes/%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E5%AE%9E%E9%AA%8C%E7%BB%AA%E8%AE%BA/#_12","title":"\u6709\u6548\u6570\u5b57\u7684\u8fd0\u7b97\u6cd5\u5219","text":"<ol> <li>\u5b58\u7591\u6570\u548c\u53ef\u9760\u6570\u52a0\u51cf\u4e58\u9664\uff0c\u4ecd\u7136\u662f\u5b58\u7591\u6570\u3002</li> <li>\u8bf8\u6570\u76f8\u52a0\u51cf\u65f6\uff0c\u5176\u7ed3\u679c\u7684\u53ef\u7591\u6570\u5b57\u4f4d\u7f6e\u4e0e\u8bf8\u6570\u4e2d\u53ef\u7591\u6570\u5b57\u6700\u5927\u7684\u4f4d\u7f6e\u4e00\u81f4\u3002</li> <li>\u8bf8\u6570\u76f8\u4e58\u9664\u65f6\uff0c\u7ed3\u679c\u7684\u79ef\u5546\u7684\u6709\u6548\u6570\u5b57\u4f4d\u6570\u4e0e\u53c2\u4e0e\u8fd0\u7b97\u8005\u7684\u8bf8\u6570\u4e2d\u6709\u6548\u6570\u5b57\u4f4d\u6570\u6700\u5c11\u8005\u76f8\u540c\u3002</li> <li>\u51fd\u6570\u8fd0\u7b97\u7684\u53d6\u4f4d\u65b9\u6cd5\u901a\u8fc7\u51fd\u6570\u8ba1\u7b97\u6765\u786e\u5b9a\u3002</li> </ol>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","title":"\u524d\u51e0\u7ae0","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","title":"\u590d\u6742\u5ea6\u5206\u6790","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#o_omega_theta_o","title":"\\(O\\ \\Omega\\ \\Theta\\ o\\)","text":"<p>\\(O(N)\\): f &lt;= kN</p> <p>\\(\\Omega(N)\\): f &gt;= kN</p> <p>\\(\\Theta(N)\\): f = kN</p> <p>\\(o(N)\\): f &lt; kN \u5373 f\u662f\\(O(N)\\)\u4f46\u4e0d\u662f\\(\\Omega(N)\\)</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","title":"\u8ba1\u7b97","text":"<ol> <li>\u9012\u63a8</li> <li>Master Theorem</li> </ol> <p>\u7ed9\u5b9a\u503c\u7684\u6bd4\u8f83\u6b21\u6570\u7b49\u4e8e\u7ed9\u5b9a\u503c\u8282\u70b9\u5728\u4e8c\u53c9\u6392\u5e8f\u6811\u4e2d\u7684\u5c42\u6570\u3002\u5982\u679c\u4e8c\u53c9\u6392\u5e8f\u6811\u662f\u5e73\u8861\u7684\uff0c\u5219n\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u9ad8\u5ea6\u4e3aLog2(n+1),\u5176\u67e5\u627e\u6548\u7387\u4e3aO(Log2n)\uff0c\u8fd1\u4f3c\u4e8e\u6298\u534a\u67e5\u627e\u3002\u5982\u679c\u4e8c\u53c9\u6392\u5e8f\u6811\u5b8c\u5168\u4e0d\u5e73\u8861\uff0c\u5219\u5176\u6df1\u5ea6\u53ef\u8fbe\u5230n\uff0c\u67e5\u627e\u6548\u7387\u4e3aO(n)\uff0c\u9000\u5316\u4e3a\u987a\u5e8f\u67e5\u627e\u3002\u4e00\u822c\u7684\uff0c\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u67e5\u627e\u6027\u80fd\u5728O(Log2n)\u5230O(n)\u4e4b\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u83b7\u5f97\u8f83\u597d\u7684\u67e5\u627e\u6027\u80fd\uff0c\u5c31\u8981\u6784\u9020\u4e00\u68f5\u5e73\u8861\u7684\u4e8c\u53c9\u6392\u5e8f\u6811\u3002</p> <p>\u5e73\u8861\u4e8c\u53c9\u6811\uff08Balanced BinaryTree\uff09\u53c8\u88ab\u79f0\u4e3aAVL\u6811\u3002 \u5b83\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\u5b83\u662f**\u4e00\u68f5\u7a7a\u6811\u6216\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811**\u3002 \u5e73\u8861\u4e8c\u53c9\u6811\u4e00\u822c\u662f\u4e00\u4e2a\u6709\u5e8f\u6811\uff0c\u5b83\u5177\u6709\u4e8c\u53c9\u6811\u7684\u6240\u6709\u6027\u8d28\uff0c\u5176\u904d\u5386\u64cd\u4f5c\u548c\u4e8c\u53c9\u6811\u7684\u904d\u5386\u64cd\u4f5c\u76f8\u540c\u3002</p> <p>AVL</p> <p>\u4e0d\u7528\u6570\u7ec4\u5b58\u6811\uff1a\u5982\u679c\u662f\u4e00\u4e2askewed tree\uff0c\u4f1a\u6709\u5f88\u591a\u7a7a\u7684\u7a7a\u95f4</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#tree","title":"Tree","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#property","title":"Property","text":"<p>\u6df1\u5ea6\uff1a\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9n,n\u7684\u6df1\u5ea6\u4e3a\u4ece\u6839\u5230n\u7684\u552f\u4e00\u8def\u5f84\u957f\uff0c\u6839\u7684\u6df1\u5ea6\u4e3a0\uff1b \u9ad8\u5ea6\uff1a\u5bf9\u4e8e\u4efb\u610f\u8282\u70b9n,n\u7684\u9ad8\u5ea6\u4e3a\u4ecen\u5230\u4e00\u7247\u6811\u53f6\u7684\u6700\u957f\u8def\u5f84\u957f\uff0c\u6240\u6709\u6811\u53f6\u7684\u9ad8\u5ea6\u4e3a0\uff1b</p> <p>\u6811\u7684\u9ad8\u5ea6\u7b49\u4e8e\u6700\u6df1\u53f6\u5b50\u7684\u6df1\u5ea6\u3002</p> <p></p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#priority_queues","title":"Priority Queues","text":"<p>\u64cd\u4f5c\uff1a1. \u63d2\u5165 2. \u5220\u9664\u6700\u5927/\u6700\u5c0f\u6570</p> <p></p> <p>\u7528\u94fe\u8868\u662f\u6700\u65b9\u4fbf\u7684\uff0c\u56e0\u4e3a\u4f1a\u6709\u63d2\u5165\u4f1a\u6bd4\u5220\u9664\u66f4\u591a</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#binary_heap","title":"Binary Heap","text":"<p>\u5982\u679c\u4e8c\u53c9\u6811\u9664\u4e86\u6700\u540e\u4e00\u5c42\u6709\u7f3a\u5931\u5916\uff0c\u5176\u5b83\u662f\u6ee1\u7684\uff0c\u4e14\u6700\u540e\u4e00\u5c42\u7f3a\u5931\u7684\u53f6\u5b50\u7ed3\u70b9\u53ea\u51fa\u73b0\u5728\u53f3\u4fa7\uff0c\u5219\u8fd9\u6837\u7684\u4e8c\u53c9\u6811\u53eb\u5b8c\u5168\u4e8c\u53c9\u6811</p> <p>\u9ad8\u5ea6\u4e3ah\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6709\\(2^h\\)\u5230\\(2^{h+1}-1\\)\u4e2a\u8282\u70b9</p> <p>\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8868\u793aBT[n+1]\uff0cBT[0]\u4e0d\u88ab\u4f7f\u7528\uff0c\u53ef\u4ee5\u5728\u4e8c\u9879\u5806\u91cc\u9762\u5b58\u50a8\u6700\u5927\u3001\u6700\u5c0f\u503c\u4f5c\u4e3asentinel</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","title":"\u4e0b\u6807\u7684\u89c4\u5f8b","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","title":"\u521d\u59cb\u5316","text":"<pre><code>struct HeapStruct{\n    int Capacity;\n    int Size;\n    ElementType *Elements;\n}\ntypedef struct HeapStruct *PriorityQueue;\n\nPriorityQueue  Initialize( int  MaxElements ) \n{ \n    PriorityQueue  H; \n    if ( MaxElements &lt; MinPQSize ) \n        return  Error( \"Priority queue size is too small\" ); \n    H = malloc( sizeof ( struct HeapStruct ) ); \n    if ( H ==NULL ) \n        return  FatalError( \"Out of space!!!\" ); \n    /* Allocate the array plus one extra for sentinel */ \n    H-&gt;Elements = malloc(( MaxElements + 1 ) * sizeof( ElementType )); \n    if ( H-&gt;Elements == NULL ) \n        return  FatalError( \"Out of space!!!\" ); \n    H-&gt;Capacity = MaxElements; \n    H-&gt;Size = 0; \n    H-&gt;Elements[ 0 ] = MinData;  /* set the sentinel */\n    return  H; \n}\n</code></pre> <p>\u5806\u662f\u4e00\u68f5\u6811\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u952e\u503c\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u952e\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e/\u5c0f\u4e8e\u7b49\u4e8e\u5176\u7236\u4eb2\u7684\u952e\u503c\u3002\u6bcf\u4e2a\u8282\u70b9\u7684\u952e\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\u5176\u7236\u4eb2\u952e\u503c\u7684\u5806\u53eb\u505a\u5c0f\u6839\u5806\uff0c\u5426\u5219\u53eb\u505a\u5927\u6839\u5806\u3002</p>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_5","title":"\u63d2\u5165","text":"<p>\u628a\u65b0\u8282\u70b9\u63a5\u5728\u6811\u7684\u6700\u5c3e\u7aef\uff0c\u7136\u540e\u6267\u884c\u5411\u4e0a\u8fc7\u6ee4\u64cd\u4f5c\u2014\u2014\u5982\u679c\u662f\u5c0f\u6839\u5806\u5219\u4e0d\u65ad\u6bd4\u8f83\u5f53\u524d\u8282\u70b9\u548c\u7236\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u5982\u679c\u5f53\u63d2\u5165\u503c\u66f4\u5c0f\uff0c\u5219\u628a\u7236\u8282\u70b9\u6362\u5230\u4ed6\u7684\u5b50\u8282\u70b9\u5904\uff08\u628a\u7236\u8282\u70b9\u7684\u4f4d\u7f6e\u73b0\u5728\u7a7a\u51fa\uff09\uff0c\u76f4\u5230\u5f53\u524d\u503c\u5927\u4e8e\u7236\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u63d2\u5165\u76ee\u524d\u9009\u4e2d\u7684\u8282\u70b9\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)</p> <pre><code>void Insert(ElementType X, PriorityQueue H){\n    int i;\n    if(ISFull(H)){\n        return;\n    }\n    for(i = ++H-&gt;Size; H-&gt;Elements[i/2] &gt; X; i = i/2){\n        H-&gt;Elements[i] = H-&gt;Elements[i/2];\n    }\n    H-&gt;Elements[i] = X;\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_6","title":"\u5220\u9664\u6700\u5c0f","text":"<p>\u628a\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u548c\u4ed6\u4ea4\u6362\uff0c\u628aSize\u51cf\u5c0f\uff0c\u7136\u540e\u4ece\u5934\u8fdb\u884c\u5411\u4e0b\u8fc7\u6ee4\u64cd\u4f5c\uff0c\u5982\u679c\u5b50\u8282\u70b9\u4e2d\u6700\u5c0f\u7684\u90a3\u4f4d\u5c0f\u4e8e\u5f53\u524d\u503c\uff0c\u5219\u628a\u5b50\u8282\u70b9\u79fb\u5230\u7236\u8282\u70b9\u5904\u3002\u76f4\u5230\u5f53\u524d\u503c\u5c0f\u4e8e\u6240\u6709\u5b50\u8282\u70b9\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(logN)</p> <pre><code>ElementType  DeleteMin( PriorityQueue  H ){\n    int i, Child;\n    ElementType MinElement, LastElement;\n    if(H-&gt;Size==0){ // empty head\n        return H-&gt;Elements[0];\n    }\n    MinElement = H-&gt;Elements[1];\n    LastELement = H-&gt;Elements[H-&gt;Size--]; //\u51cf\u5c0f\u4e00\u4e2a\u7a7a\u95f4\n    for(i=1; i*2 &lt;= H-&gt;Size; i = Child){\n        Child = 2*i;\n        if(H-&gt;Elements[Child] &gt; H-&gt;Elements[Child+1]){\n            Child++;\n        }\n        if(LastElement &lt; H-&gt;Elements[Child]){\n            break;\n        }\n        H-&gt;Elements[i] = H-&gt;Elements[Child];\n    }\n    H-&gt;Elements[i] = LastElement;\n    return MinElement;\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_7","title":"\u5176\u4ed6\u64cd\u4f5c","text":"<ol> <li>\u7ed9\u67d0\u4e2a\u8282\u70b9\u51cf\u53bb\u4e00\u4e2a\u503c\uff1a\u5411\u4e0a\u8fc7\u6ee4\uff08Percolate up\uff09</li> <li>\u7ed9\u67d0\u4e2a\u8282\u70b9\u52a0\u4e0a\u4e00\u4e2a\u503c\uff1a\u5411\u4e0b\u8fc7\u6ee4\uff08Percolate down\uff09</li> <li>\u521b\u5efa\u5806\uff1a\u5148\u6309\u7167\u6570\u5217\u987a\u5e8f\u5b58\u5165\u6240\u6709\u503c\uff0c\u63a5\u7740\u5bf9\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u4ece\u540e\u5230\u524d\u4e00\u6b21Percolate down</li> </ol>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#d-heaps","title":"d-Heaps","text":"<ul> <li>\u4ee50\u4e3a\u6839\u7ed3\u70b9\uff0c\u5bf9\u67d0\u7ed3\u70b9 \\(i\\) ,\u5176\u7236\u7ed3\u70b9\u4e3a \\(\u230a\\frac{i\u22121}{d}\u230b\\) \uff0c\u5176d\u4e2a\u5b50\u7ed3\u70b9\u8303\u56f4\u4e3a\\([(di+1),(di+d)]\\)</li> </ul>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#unionfind","title":"UnionFind","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_8","title":"\u7b97\u6cd5","text":""},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#naive","title":"Naive","text":"<pre><code>void init(int N, int *fa){\n    for(int i = 1; i&lt;=N; i++){\n        fa[i] = i;\n    }\n}\n\nint find(int x, int *fa){//\u627e\u5230x\u6240\u5728\u96c6\u5408\u7684\u6839\n    if(x == fa[x]){\n        return x;\n    } else {\n        return find(fa[x], fa);\n    }\n}\n\nint find_iter(int x, int *fa){\n    while(x != fa[x]){\n        x = fa[x];\n    }\n    return x;\n}\n\nvoid union(int x, int y, int *fa){\n    fa[find(y, fa)] = find(x, fa); // \u628ay\u6240\u5728\u7684\u96c6\u5408\u63a5\u5230x\u7684\u96c6\u5408\u4e2d\uff1b\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#find_compression","title":"\u4f18\u5316find Compression","text":"<pre><code>int find(int x, int *fa){\n    if(fa[x] == x){\n        return x;\n    } else {\n        return fa[x] = find(fa[x], fa);   \n    }\n}\n\nint find(int x, int *fa){\n    return fa[x] == x? x : (fa[x] = find(fa[x], fa));\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#union_by_size","title":"\u4f18\u5316union by size","text":"<pre><code>void init(int N, int *fa){\n    for(int i=1; i&lt;=N; i++){\n        fa[i] = -1;\n    }\n} // \u53ef\u4ee5\u76f4\u63a5\u628a\u6839\u7684\u503c\u8bbe\u4e3a\u8be5\u96c6\u5408\u7684size\u7684\u590d\u6570\uff0c\u4e5f\u53ef\u4ee5\u53e6\u5916\u5f00\u4e00\u4e2asize\u6570\u7ec4\n\nvoid union(int x, int y, int *fa){\n    root_x = find(x, fa);\n    root_y = find(y, fa)\n    if(fa[root_x] &lt;= fa[root_y]){\n        fa[root_y] += fa[root_x];\n        fa[root_y] = root_x;\n    } else {\n        fa[root_x] += fa[root_y];\n        fa[root_x] = root_y;\n    }\n}\n\nint find(int x, int *fa){\n    if(fa[x] &lt; 0){\n        return x;\n    } else {\n        return find(fa[x], fa);\n    }\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#union-by-rank","title":"\u4f18\u5316Union-by-rank","text":"<pre><code>void init(int N, int *fa){\n    for(int i=1; i&lt;=N; i++){\n        fa[i] = -1;\n    }\n}\n\nvoid union(int x, int y, int *fa){\n    rank_x = fa[find(x, fa)];\n    rank_y = fa[find(y, fa)];\n    if(rank_x &lt; rank_y){ // y\u7684\u6df1\u5ea6\u66f4\u5c0f\uff0c\u6ce8\u610f\u8fd9\u91cc\u76f4\u63a5\u6bd4\u8f83\u7684\u662f\u6df1\u5ea6\u7684\u76f8\u53cd\u6570\n        fa[y] = find(x, fa);   \n    } else if(rank_x &gt; rank_y){\n        fa[x] = find(y, fa);\n    } else if(rank_x == rank_y){\n        fa[y] = finx(x, fa);\n        fa[find(x, fa)] --; //\u6df1\u5ea6\u76f8\u540c\uff0c\u5219\u8981+1\n    }\n}\n</code></pre>"},{"location":"ClassNotes/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_9","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>Union-bySize complexities</p> <p></p> <p>\u5047\u8bbe\u5bf9\u4e8e\u6df1\u5ea6\u4e3a\\(h\\)\u7684\u6811\uff0c\u4ed6\u81f3\u5c11\u6709\\(2^h\\)\u4e2a\u8282\u70b9\uff08\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u63a8\u7406\uff09\u3002\u5373\\(N\\geq2^h\\)\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u5177\u6709\\(N\\)\u8282\u70b9\u7684\u6811\uff0c\u4ed6\u7684\u6df1\u5ea6\u5c0f\u4e8e\\(\\lfloor logN\\rfloor + 1\\)\uff0c\u56e0\u6b64\u67e5\u627e\u7684\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)</p> <p>Using link-by-size, any UNION or FIND operation takes O(log n) time in the worst case, where n is the number of elements.</p> <p></p> <p></p> <p></p>"},{"location":"ClassNotes/ICS/ICS/","title":"Introduction to Computing Systems","text":""},{"location":"ClassNotes/ICS/ICS/#_1","title":"\u8d44\u6599","text":"<p>\u5386\u5e74\u5377</p> <p>\u8bed\u96c0\u7b14\u8bb0</p> <p>\u4f5c\u4e1a\u7b54\u6848</p>"},{"location":"ClassNotes/ICS/ICS/#chapter_1_welcome_aboard","title":"Chapter 1 Welcome Aboard","text":""},{"location":"ClassNotes/ICS/ICS/#13_two_recurring_themes","title":"1.3 Two Recurring Themes","text":""},{"location":"ClassNotes/ICS/ICS/#abstraction","title":"Abstraction","text":"<p>Abstraction is a technique for establishing a simpler way for a person to interact with a system, removing the details that are unnecessary for the person to interact effectively with that system. Our ability to abstract is very much a productivity enhancer. It allows us to deal with a situation at a higher level, focusing on the essential aspects, while keeping the component ideas in the background. It allows us to be more efficient in our use of time and brain activity. It allows us to not get bogged down in the detail when everything about the detail is working just fine.</p> <ul> <li> <p>We needn\u2019t know the layers below of one machine. We have to make a new level of abstraction.</p> </li> <li> <p>Deconstruct \u2014 the ability to go from the abstraction back to its component parts.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#hardware_vs_software","title":"Hardware vs. Software","text":"<ul> <li> <p>We shouldn\u2019t separate people by Hardware and Software.</p> </li> <li> <p>There are important topics in the software that are very deeply interwoven with topics in the hardware. Our contention is that mastering either is easier if you pay attention to both.</p> </li> <li> <p>Most importantly, most computing problems yield better solutions when the problem solver has the capability of both at his or her disposal.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#14_a_computer_system","title":"1.4 A  Computer System","text":"<ul> <li>Computer \u2013 a system consisting of the software (i.e., computer programs) that directs and specifies the processing of information (\u63a7\u5236\u4fe1\u606f\u7684\u5904\u7406\u8fc7\u7a0b) and the hardware that performs the actual processing of information (\u6267\u884c\u5904\u7406\u8fc7\u7a0b) in response to what the software asks the hardware to do.</li> <li>This hardware is a central processing unit (CPU)</li> <li>Computer \u2014\u2014 the collection of parts that in combination from their computer system. in addition to the processor, a key- board for typing commands, a mouse or keypad or joystick for positioning on menu entries, a monitor for displaying information that the computer system has produced, memory for temporarily storing information, disks and USB memory sticks of one sort or another for storing information for a very long time, even after the computer has been turned off, connections to other devices such as a printer for obtaining paper copies of that information, and the collection of programs (the software) that the user wishes to execute.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#15_two_very_important_ideas","title":"1.5 Two Very Important Ideas","text":""},{"location":"ClassNotes/ICS/ICS/#a","title":"a.","text":"<ul> <li>All computers (the biggest and the smallest, the fastest and the slowest, the most expensive and the cheapest) are capable of computing exactly the same things if they are given enough time and enough memory. That is, anything a fast computer can do, a slow computer can do also. The slow computer just does it more slowly. A more expensive computer cannot figure out something that a cheaper computer is unable to figure out as long as the cheaper computer can access enough memory. All computers can do exactly the same things. Some computers can do things faster, but none can do more than any other.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#b","title":"b.","text":"<ul> <li>We describe our problems in English or some other language spoken by people. It is necessary to transform our problem from the language of humans to the voltages that influence the flow of electrons. This transformation is really a sequence of systematic transformations.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#16_computers_as_universal_computational_devices","title":"1.6 Computers as Universal Computational Devices","text":"<ul> <li> <p>Before modern computers</p> </li> <li> <p>analog machines </p> <ul> <li> <p>produced an answer by measuring some physical quantity</p> </li> <li> <p>very hard to increase their accuracy</p> </li> </ul> </li> <li> <p>digital machine</p> <ul> <li>adding machine</li> </ul> </li> <li> <p>We don\u2019t have to buy a new computer. We just give the old computer a new set of instructions (a program) to carry out the new computation</p> </li> <li> <p>Anything that can be computed, can be computed by a computer provided it has enough time and enough memory. So computers are programmable.</p> </li> <li> <p>A big  or expensive computer cannot do more than a small cheap computer.</p> </li> <li> <p>Computer Capability</p> </li> <li>The ability to solve the problem is not dependent on the quality of one computer, which only affects the time to solve a problem.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#17_how_do_we_get_the_electrons_to_do_the_work","title":"1.7 How Do We Get the Electrons to Do the Work?","text":"<p>We call the steps of this process the \u201cLevels of Transformation.\u201d As we will see, at each level we have choices. If we ignore any of the levels, our ability to make the best use of our computing system can be very adversely affected.</p>"},{"location":"ClassNotes/ICS/ICS/#transformation_hierarchy","title":"Transformation Hierarchy","text":"<ul> <li> <p>The Statement of the Problem: Computer can not understand natural language, because of ambiguity, so the first step is interpreting the problem.   To tell it to do something where there are multiple interpretations would cause the computer to not know which interpretation to follow.</p> </li> <li> <p>The Algorithm: step-by-step procedure that is guaranteed to terminate, such that each step is precisely stated and can be carried out by the computer.</p> </li> <li> <p>effective computability : each step can be carried out by a computer     To take the largest prime number lacks effective computability</p> </li> <li> <p>definiteness : each step is precisely stated     stir until lumpy lacks definiteness, since the notion of lumpiness is not precise</p> </li> <li> <p>finiteness : the procedure will terminate</p> </li> <li> <p>small example: Data Type Conversion \u2013 the unary into binary</p> </li> <li> <p>Program</p> </li> </ul> <p>transform the algorithm into a computer program in one of the programming languages that are available.</p> <ul> <li> <p>Programming languages are mechanical languages (C, C++m COBOL, Fortran, Pascal)</p> </li> <li> <p>high-level languages: at a distance (a high level) from the underlying computer. At their best, they are independent of the computer on which the programs will execute. We say the language is \u201cmachine independent.\u201d \uff08\u5148\u524d\u7684\u51e0\u79cd\u90fd\u662f\u9ad8\u7ea7\u8bed\u8a00\uff09</p> </li> <li> <p>low-level languages: tied to the computer on which the programs will execute. There is generally one such low-level language for each computer. That language is called the assembly language (\u6c47\u7f16\u8bed\u8a00)for that computer.</p> </li> <li> <p>ISA ( instruction set architecture )</p> </li> </ul> <p>complete specification  of the interface between programs and the underlying computer hardware</p> <p>\u66f4\u65b0\uff1aISA\u5185\u5b9a\u4e49\u4e86\u6307\u4ee4\u3001\u5185\u5b58\u7a7a\u95f4\u3001\u5bfb\u5740\u6a21\u5f0f\u3001\u4e2d\u65ad/\u5f02\u5e38</p> <ul> <li> <p>opcode: describe the operation</p> </li> <li> <p>operand: describe individual data values</p> </li> <li> <p>data types: representation of an operand such that the computer can perform operations on that representation</p> </li> <li> <p>addressing mode: the mechanisms that the computer can use to figure out where the operands are located</p> </li> <li> <p>The number of opcodes, data types, and addressing modes specified by an ISA vary among different ISAs.      Some ISAs have one or two addressing modes, whereas others have more than 20. The x86, the ISA used in the PC, has more than 200 opcodes, more than a dozen data types, and more than two dozen addressing modes.</p> </li> <li> <p>ex. x86(intel), ARM, THUMB, POWER</p> </li> <li> <p>The translation from a high-level language ( C ) to the ISA of the computer is usually done by a translating program called compiler. For each high-level language and each desired target ISA, one must provide a corresponding compiler.</p> </li> <li> <p>The translation from the unique assembly language of a computer to its ISA is done by an assembler.</p> </li> <li> <p>\u6c47\u7f16\u8bed\u8a00\u662f\u7528\u4eba\u7c7b\u770b\u5f97\u61c2\u7684\u8bed\u8a00\u6765\u63cf\u8ff0\u6307\u4ee4\u96c6\u3002\u5426\u5219\u6307\u4ee4\u96c6\u7684\u673a\u5668\u7801\u90fd\u662f\u4e00\u5806\u4e8c\u8fdb\u5236\u6570\u5b57\uff0c\u4eba\u7c7b\u8bfb\u8d77\u6765\u975e\u5e38\u9ebb\u70e6\u3002\u4f46\u662f\u6c47\u7f16\u8bed\u8a00\u4e5f\u6709\u7f3a\u70b9\uff0c\u9996\u5148\u6c47\u7f16\u8bed\u8a00\u64cd\u4f5c\u8d77\u6765\u8fd8\u662f\u633a\u9ebb\u70e6\u7684\u3002\u5176\u6b21\u6c47\u7f16\u8bed\u8a00\u5bf9\u5e94\u4e00\u6761\u6761\u6307\u4ee4\u96c6\uff0c\u6240\u4ee5\u5f53\u6307\u4ee4\u96c6\u6539\u53d8\u65f6\uff0c\u5c31\u5f97\u4fee\u6539\u76f8\u5e94\u6c47\u7f16\u8bed\u8a00\uff0c\u5bfc\u81f4\u5176\u53ef\u79fb\u690d\u6027\u5f88\u5dee\uff0c\u4e0d\u80fd\u8de8\u5e73\u53f0\u4f7f\u7528\uff0c\u5982ARM\u7684\u6c47\u7f16\u8bed\u8a00\u4e0eIntel X86\u7684\u5c31\u4e0d\u540c\u3002\u8fd9\u65f6\u4eba\u4eec\u5c31\u60f3\u5f00\u53d1\u4e00\u79cd\u66f4\u65b9\u4fbf\u64cd\u4f5c\uff0c\u8d85\u8d8a\u6307\u4ee4\u96c6\u7684\u8bed\u8a00\uff0c\u4e8e\u662f\u6709\u4e86C\uff0cC++\u7b49\u9ad8\u7ea7\u8bed\u8a00\u3002</p> </li> <li> <p>ISA \u8fde\u63a5\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u529f\u80fd\u548c\u7535\u8111\u7406\u89e3\u529f\u80fd \uff08eg \u5b9a\u4e49\u6c7d\u8f66\u8e0f\u677f\u7684\u4f5c\u7528\uff0c\u4f46\u662f\u5bf9\u8e0f\u677f\u80cc\u540e\u7684\u5b9e\u73b0\u4e0d\u505a\u8981\u6c42\uff09</p> </li> <li> <p>Micro Architecture</p> </li> <li> <p>implementation of the ISA</p> </li> <li> <p>can be different from each other</p> </li> <li> <p>Computer design is always an exercise in tradeoffs, as the designer opts for higher (or lower) performance, more (or less) energy required, at greater(or lesser) cost.</p> </li> <li> <p>\u4e00\u4e2a\u6307\u4ee4\u96c6\u53ef\u80fd\u6709\u591a\u4e2a\u5fae\u67b6\u6784\uff0c\u4f46\u4e00\u4e2a\u5fae\u67b6\u6784\u53ea\u9002\u7528\u4e8e\u4e00\u4e2a\u6307\u4ee4\u96c6</p> </li> <li> <p>Logic Gates</p> </li> <li> <p>also have many choices, like an addition, there are several choices of logic circuits to perform the operations at different speeds and corresponding costs</p> </li> <li> <p>Electronic circuits</p> </li> <li> <p>Electron</p> </li> <li> <p>If you are familiar with all layers, you will do a better job</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#chapter_2_bits_and_data_types","title":"Chapter 2 Bits and Data Types","text":""},{"location":"ClassNotes/ICS/ICS/#21_bits_and_data_types","title":"2.1 Bits and Data Types","text":"<ul> <li> <p>Bit: We symbolically represent the presence of a voltage as \u201c1\u201d and the absence of a voltage as \u201c0.\u201d We refer to each 0 and each 1 as a \u201cbit,\u201d which is a shortened form of binary digit.</p> </li> <li> <p>Data Type</p> </li> </ul> <p>We say a particular representation is a data type if there are operations in the computer that can operate on information that is encoded in that representation.</p> <ul> <li> <p>Representation</p> <ul> <li> <p>Binary</p> </li> <li> <p>Unary</p> </li> <li> <p>\u5b9a\u4e49\u4e86\u6570\u636e\u7684\u8868\u8fbe\u5f62\u5f0f\uff0c\u5e76\u4e14\u5b9a\u4e49\u4e86\u76f8\u5173\u7684\u64cd\u4f5c\u65b9\u6cd5\uff0c\u624d\u80fd\u5c06\u8be5\u8868\u8fbe\u65b9\u5f0f\u79f0\u4e3a\u6570\u636e\u7c7b\u578b</p> </li> </ul> </li> <li> <p>In this book, we will mainly use two data types: 2\u2019s complement integers for representing positive and negative integers that we wish to perform arithmetic on, and ASCII codes for representing characters that we wish to input to a computer via the keyboard or output from the computer via a monitor. </p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#22_integer_data_type","title":"2.2 Integer Data Type","text":"<ul> <li> <p>Unsigned integers   With k bits, we can represent in this positional notation exactly 2<sup>k</sup> integers, ranging from 0 to 2<sup>k-1</sup></p> </li> <li> <p>use positional notation(\u4f4d\u503c\u6cd5\uff09</p> </li> <li> <p>Signed integers</p> </li> <li> <p>Representation</p> <ul> <li> <p>signed-magnitude data type(\u7b26\u53f7\u4f4d / \u539f\u7801): let the leading 0 signifies a positive integer, leading 1 signifies a negative integer</p> </li> <li> <p>1\u2019s complement(\u53cd\u7801): \u201cflipping\u201d all the bits</p> </li> <li> <p>2\u2019s complement(\u8865\u7801)</p> </li> </ul> <p>two representations above both require unnecessarily cumbersome hardware to do addition, so it is necessary to choose representations that simplified the circuit</p> <ul> <li> <p>\u5f15\u5165\u8865\u7801\u7684\u539f\u56e0\uff1a1.\u539f\u7801\u7b26\u53f7\u4e0d\u540c\u505a\u52a0\u51cf\u6cd5\u7ed3\u679c\u4f1a\u51fa\u73b0\u95ee\u98982.\u5176\u4ed6\u65b9\u6cd5\u6d6a\u8d39\u7a7a\u95f4\uff0c\u539f\u7801\u5bf90\u7684\u8868\u793a\u65b9\u6cd5\u6709\u4e24\u79cd3.A+\uff08-A\uff09\u2260 0</p> </li> <li> <p>get the representation of -A after knowing the representation of A: Flip all the bits of A (the official term for \u201cflip\u201d is complement), and add 1 to the complement of A. The sum of A and the complement of A is 11111. If we then add 00001 to 11111, the final result is 00000. (\u8d1f\u6570\u7684\u8865\u7801\u662f\u8be5\u6b63\u6570\u7684\u8865\u7801\u6216\u539f\u7801\u53d6\u53cd\u52a0\u4e00\uff0c\u8d1f\u6570\u8865\u7801\u7684\u8865\u7801\u662f\u539f\u7801)</p> </li> <li> <p>\u8865\u5145\u65b9\u6cd5\uff1a\u4ece\u53f3\u5f80\u5de6\u627e\u5230\u7b2c\u4e00\u4e2a1\uff0c\u8be51\u7684\u5de6\u4fa7\u6240\u6709\u6570\u53cd\u8f6c</p> </li> <li> <p>REPRESENTATION(value + 1) = REPRESENTATION(value) + REPRESENTATION(1).</p> </li> <li> <p>\u53ef\u4ee5\u8868\u793a -2<sup>(n-1)</sup> ~ 2<sup>(n-1)</sup> - 1 \u6240\u6709\u6570\u503c</p> </li> </ul> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#24_conversion_between_binary_and_decimal","title":"2.4 Conversion Between Binary and Decimal","text":"<ul> <li> <p>Binary to Decimal</p> </li> <li> <p>Examine the leading bit: </p> <ul> <li> <p>If it is a 0, the integer is positive, and we can begin evaluating its magnitude. </p> </li> <li> <p>If it is a 1, the integer is negative. In that case, we need to first obtain the 2\u2019s complement representation of the positive number having the same magnitude. We do this by flipping all the bits and adding 1.</p> </li> </ul> </li> <li> <p>Calculate magnitude</p> </li> <li> <p>Add minus sign when necessary</p> </li> <li> <p>Decimal to Binary</p> </li> <li>\u5c06\u5341\u8fdb\u5236\u5199\u6210\u4e8c\u8fdb\u5236\u5c55\u5f00\uff0c\u6839\u636e\u5341\u8fdb\u5236\u6570\u5b57\u7684\u5947\u5076\u6027\u5224\u65ad\u4e8c\u8fdb\u5236\u683c\u5f0f\u4e2d\u6700\u540e\u4e00\u4f4d\u76840/1\u683c\u5f0f\u3002\u51cf\u53bb\u8be5\u4f4d\u540e\uff0c\u7b49\u5f0f\u4e24\u4fa7\u540c\u96642\uff0c\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u3002</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#25_operations_on_bits_--_part_i_arithmetic","title":"2.5 Operations on Bits \u2013 Part I: Arithmetic","text":"<ul> <li>Addition and Subtraction</li> <li> <p>A + B, A + (-B)</p> </li> <li> <p>Sign-Extension</p> </li> <li> <p>It is often useful to represent a small number with fewer bits. </p> </li> <li> <p>leading 0s do not affect the value of a positive number, leading 1s do not affect the value of a negative number.</p> </li> <li> <p>Sign-EXTension, often abbreviated SEXT : Sign-extension is performed in order to be able to operate on representations of different lengths.It does not affect the values of the numbers being represented.</p> </li> <li> <p>Overflow</p> </li> <li> <p>Note that the sum of a negative number and a positive number never presents a problem.</p> </li> <li> <p>\u524d\u9762\u7684\u4e24\u4e2aoverflow\u4f8b\u5b50\u90fd\u53d1\u751f\u5728\u540c\u7b26\u53f7\u6570\u76f8\u52a0\u7684\u60c5\u51b5\u4e0b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e5f\u53ea\u6709\u5728\u8fd9\u4e24\u79cd\u540c\u7b26\u53f7\u8fd0\u7b97\u60c5\u89c2\u4e0b\uff0c\u624d\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002\u4e00\u4e2a\u6b63\u6570\u548c\u4e00\u4e2a\u8d1f\u6570\u76f8\u52a0\uff0c\u6c38\u8fd0\u90fd\u4e0d\u4f1a\u6ea2\u51fa</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#26_operations_on_bits_--_part_ii_logical_operations","title":"2.6 Operations on Bits \u2013 Part II: Logical Operations","text":"<ul> <li>AND function</li> <li> <p>bit-wise AND</p> </li> <li> <p>OR function (inclusive OR)</p> </li> <li> <p>NOT function   a unary logical function</p> </li> <li> <p>Exclusive-OR function</p> </li> <li> <p>DeMorgan\u2019s Laws</p> </li> <li> <p>The Bit Vector</p> </li> <li> <p>An m-bit pattern where each bit has a logical value (0 or 1) independent of the other bits is called a bit vector. It is a convenient mechanism for identifying a property such that some of the bits identify the presence of the property and other bits identify the absence of the property.</p> </li> <li> <p>Bit Mask: A bit mask is a binary pattern that enables the bits of A to be separated into two parts\u2014generally the part you care about and the part you wish to ignore.      \u4e0e\u67d0\u4e0000001000\u6309\u4f4d\u6216\u6765\u628a\u8be5\u4f4dset 1\uff0c\u4e0e000010000\u6309\u4f4d\u4e0e\u6765\u628a\u96641\u610f\u5916\u7684\u5176\u4ed6\u4f4dset 0</p> </li> <li> <p>Data Structure</p> </li> <li>Doubly link list</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#27_other_representations","title":"2.7 Other Representations","text":""},{"location":"ClassNotes/ICS/ICS/#floating_point_data_type","title":"Floating Point Data Type","text":"<ul> <li> <p>One of them,usually called float, consists of 32 bits, allocated as follows:</p> </li> <li> <p>1 bit for the sign (positive or negative)</p> </li> <li> <p>8 bits for the range (the exponent field)</p> </li> <li> <p>23 bits for precision (the fraction field)</p> </li> <li> <p></p> </li> <li> <p>Normalized Form: N = (\u22121)<sup>S</sup> \u00d7 1. fraction \u00d7 2<sup>(exponent\u2212127)</sup>, 1 \u2264 exponent \u2264 254</p> </li> <li> <p>Exponent: the eight-bit exponent is restricted to the 254 unsigned integer values, 1 (00000001) through 254 (11111110).The eight exponent bits are encoded in what we call an excess code, named for the notion that one can get the real exponent by treating the code as an unsigned integer and subtracting the excess (sometimes called the bias).</p> </li> <li> <p>infinities: Infinity is represented by the exponent field containing all 1s and the fraction field containing all 0s. We represent positive infinity if the sign bit is 0 and negative infinity if the sign bit is 1.</p> </li> <li> <p>NaN: exponent field contains all 1s but the fraction field does not contain all 0s</p> </li> <li> <p>subnormal numbers : numbers smaller than 2\u2212126 but larger than 0. </p> </li> <li> <p>The largest subnormal number is N = 0.11111111111111111111111 \u00d7 2\u2212126</p> </li> <li> <p>The smallest subnormal number is N = 0.00000000000000000000001 \u00d7 2<sup>\u2212126</sup> , i.e., 2<sup>\u221223</sup> \u00d7 2<sup>\u2212126</sup> which is 2<sup>\u2212149</sup> .     We represent them with an exponent field of 00000000. The fraction field is represented in the same way as with normalized numbers. That is, if the exponent field contains 00000000, the exponent is \u2212126, and the significant digits are obtained by starting with a leading 0.</p> </li> <li> <p>\u89c4\u683c\u6570: \u7528\u4e8e\u8868\u793a\u6700\u5e38\u89c1\u7684\u6570\u503c, \u6bd4\u59821.2, 34567, 7.996, 0.2. \u4f46\u89c4\u683c\u6570\u4e0d\u80fd\u8868\u793a0\u548c\u975e\u5e38\u9760\u8fd10\u7684\u6570.\u975e\u89c4\u683c\u6570: \u7528\u4e8e\u8868\u793a0, \u4ee5\u53ca\u975e\u5e38\u9760\u8fd10\u7684\u6570, \u6bd4\u59821E-38.\u7279\u6b8a\u6570: \u7528\u4e8e\u8868\u793a\u201d\u65e0\u7a77\u201d\u548c\u201dNaN\u201d:</p> </li> <li> <p></p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#ascii_codes","title":"ASCII Codes","text":"<p>the standard code that almost all computer equipment manufacturers have agreed to use for transferring characters between the main computer processing unit and the input and output devices.(\u7528\u6765\u5728\u5904\u7406\u5355\u5143\u548cI/O\u8bbe\u5907\u95f4\u4f20\u8f93\u5b57\u7b26)</p> <p>an eight-bit code. stands for American Standard Code for Information Interchange</p> <p>Each key on the keyboard is identified by its unique ASCII code.</p>"},{"location":"ClassNotes/ICS/ICS/#hexadecimal_notation_easy_to_remember_copy","title":"Hexadecimal Notation (easy to remember, copy)","text":"<ul> <li>2\u2018s complement to Hex\u65f6\u8981\u6ce8\u610f\u5982\u679c\u662f\u8d1f\u6570\u8981\u524d\u88651\uff0c\u5e76\u4e14\u662f\u8865\u7801\u7684\u5f62\u5f0f</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#chapter_3_digital_logic_structures","title":"Chapter 3 Digital Logic Structures","text":""},{"location":"ClassNotes/ICS/ICS/#31_the_transistor","title":"3.1 The Transistor","text":"<ul> <li>MOS</li> </ul> <p>metal-oxide semiconductor</p> <ul> <li> <p>N-type \uff08negative\uff09</p> <p>\u63ba\u6742P\u539f\u5b50\uff0c\u591a\u7535\u5b50\uff0c\u79f0\u4e3aN-type\u534a\u5bfc\u4f53</p> <ul> <li> <p>it has gate(\u6805\u6781), source(\u6e90\u6781), drain(\u6f0f\u6781)</p> </li> <li> <p>gate is supplied with 1.2 volts: short circuit</p> </li> <li> <p>gate is supplied with 0 volts: open circuit</p> </li> <li> <p>   only show the terminals of the power supply, because the power supply itself provides the completion of the completed circuit is well understood.\u6a2a\u7ebf\u662f\u6b63\u6781\uff0c\u4e0b\u4e09\u89d2\u4ee3\u8868\u63a5\u5730</p> </li> </ul> </li> <li> <p>P-type \uff08positive\uff09</p> <p>\u63ba\u6742B\u539f\u5b50\uff0c\u7f3a\u7535\u5b50\uff0c\u79f0\u4e3aP-type\u534a\u5bfc\u4f53</p> <ul> <li> <p></p> </li> <li> <p>0 volts: short circuit:</p> </li> <li> <p>1.2 volts: open circuit</p> </li> </ul> </li> <li> <p>NMOS\u662f\u6805\u6781\u9ad8\u7535\u5e73\uff08|VG-S| &gt; Vt, VG - Vs &gt; -Vt\uff09\u5bfc\u901a,\u4f4e\u7535\u5e73\u65ad\u5f00,\u53ef\u7528\u6765\u63a7\u5236\u4e0e\u5730\u4e4b\u95f4\u7684\u5bfc\u901a\u3002</p> </li> <li> <p>PMOS\u662f\u6805\u6781\u4f4e\u7535\u5e73\uff08|VG-S| &gt; Vt, VG - Vs &lt; -Vt\uff09\u5bfc\u901a,\u9ad8\u7535\u5e73\u65ad\u5f00,\u53ef\u7528\u6765\u63a7\u5236\u4e0e\u7535\u6e90\u4e4b\u95f4\u7684\u5bfc\u901a</p> </li> <li> <p>CMOS circuits(complementary metal-oxide semiconductor): circuits that contain both P-type and N-type transistors   CMOS\u95e8\u7535\u8def\u9759\u6001\u529f\u8017\u4f4e\uff0c\u6297\u5e72\u6270\u80fd\u529b\u5f3a\uff0c\u5f00\u5173\u901f\u5ea6\u9ad8\uff0c\u5de5\u4f5c\u7a33\u5b9a\u53ef\u9760\uff0c\u9002\u7528\u4e8e\u903b\u8f91\u7535\u8def\u8bbe\u8ba1\uff0c\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\u3002</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#32_logic_gates","title":"3.2 Logic Gates","text":"<p>There are transistor circuits that implement each of these functions. The corresponding circuits are called AND, OR, and NOT gates.</p>"},{"location":"ClassNotes/ICS/ICS/#the_not_gateinverter","title":"The NOT Gate(Inverter)","text":"<ul> <li> <p>It is constructed from two MOS transistors, one P-type and one N-type.</p> </li> <li> <p>Q\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u53ea\u4f7f\u7528PMOS\uff1fA\uff1a\u4e0d\u7ba1\u8f93\u5165\u7aef\u4e3a\u9ad8\u7535\u5e73\u8fd8\u662f\u4f4e\u7535\u5e73\uff0cVT1\u548cVT2\u59cb\u7ec8\u6709\u4e00\u4e2a\u5904\u4e8e\u622a\u6b62\u72b6\u6001\uff0c\u7535\u6e90\u4e0e\u5730\u4e4b\u95f4\u57fa\u672c\u65e0\u7535\u6d41\u901a\u8fc7\uff0c\u8fd9\u6837CMOS\u975e\u95e8\u7535\u8def\u7684\u529f\u8017\u5f88\u4f4e\u3002</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#the_nor_gates","title":"The NOR Gates","text":""},{"location":"ClassNotes/ICS/ICS/#the_or_gates","title":"The OR Gates","text":"<ul> <li> \u4e3a\u4ec0\u4e48PMOS\u5728\u4e0a\uff0cNMOS\u5728\u4e0b?</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#the_and_gates","title":"The AND Gates","text":""},{"location":"ClassNotes/ICS/ICS/#basic_logic_gates","title":"Basic Logic Gates","text":""},{"location":"ClassNotes/ICS/ICS/#33_combinational_logic_gates","title":"3.3 Combinational Logic Gates","text":""},{"location":"ClassNotes/ICS/ICS/#decoder","title":"Decoder","text":"<p>A decoder has the property that exactly one of its outputs is 1 and all the rest are 0s.</p> <ul> <li> <p>In general, decoders have n inputs and 2n outputs. We say the output line that detects the input pattern is asserted. </p> </li> <li> <p>the input to the decoder is 10, resulting in the third output line being asserted.!</p> </li> <li> <p></p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#mux_multiplexer","title":"MUX (multiplexer)","text":"<p>a shows a logic gate implementation of a two-input multiplexer. </p> <ul> <li> <p>The function of a mux is to select one of the inputs (A or B) and connect it to the output. The select signal (S in Figure 3.12)determines which input is connected to the output.</p> </li> <li> <p></p> </li> <li> <p></p> </li> <li> <p>In general, a mux consists of 2<sup>n</sup> inputs and n select lines.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#a_one-bit_adder","title":"A One-Bit Adder","text":""},{"location":"ClassNotes/ICS/ICS/#the_programmable_logic_arraypla","title":"The Programmable Logic Array(PLA)","text":"<ul> <li>It consists of an array of AND gates (called an AND array) followed by an array of OR gates (called an OR array). The number of AND gates corresponds to the number of input combinations (rows) in the truth table. For n-input logic functions, we need a PLA with 2<sup>n</sup> n-input AND gates.</li> <li></li> </ul>"},{"location":"ClassNotes/ICS/ICS/#logical_completeness","title":"Logical Completeness","text":"<p>the set of gates {AND, OR, and NOT} is logically complete because we can build a circuit to carry out the specification of any truth table we wish without using any other kind of gate.</p> <ul> <li>NAND\u5b9e\u73b0\u5176\u4ed6\u51e0\u4e2agates\u7684\u903b\u8f91\u7535\u8def\u56fe</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#34_basic_storage_elements","title":"3.4 Basic Storage Elements","text":"<ul> <li> <p>The R-S Latch</p> </li> <li> <p></p> </li> <li> <p>Setting the latch:  set the latch to store 1</p> </li> <li> <p>Resetting the latch: set the latch to store 0</p> </li> <li> <p>The Quiescent State:  S and R are 1</p> <p>We describe the quiescent (or quiet) state of a latch as the state when the latch is storing a value, either 0 or 1, and nothing is trying to change that value. </p> </li> <li> <p>Setting the Latch to a1 or a0</p> <ul> <li> <p>a1: momentarily set S to 0, keep R 1</p> </li> <li> <p>a0: momentarily set R to 0, keep S 1</p> </li> <li> <p>then, set R and S both to 1 (return to the quiescent state)</p> </li> </ul> </li> <li> <p>set: setting a variable to 0 or 1, as in \u201cset to 0\u201d or\u201cset to 1.\u201d</p> </li> <li> <p>clear: the act of setting a variable to 0.</p> </li> <li> <p>Note: We should point out that if both S and R were allowed to be set to 0 at the same time, the outputs a and b would both be 1, and the final state of the latch would depend on the electrical properties of the transistors making up the gates and not on the logic being performed. </p> </li> <li> <p>The Gated D Latch</p> </li> <li> <p>WE(write enable): \u4e3a1\u65f6\u53ef\u5199\u5165\u6570\u636e\u3002</p> </li> <li> <p></p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#35_the_concept_of_memory","title":"3.5 The Concept of Memory","text":"<p>Memory is made up of a (usually large) number of locations, each uniquely identifiable and each having the ability to store a value.</p>"},{"location":"ClassNotes/ICS/ICS/#address","title":"address","text":"<p>unique identifier associated with each memory location </p>"},{"location":"ClassNotes/ICS/ICS/#addressability","title":"addressability","text":"<p>the number of bits of information stored in each location</p> <ul> <li>Most memories are byte-addressable.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#address_space","title":"Address Space","text":"<p>the total number of uniquely identifiable locations</p> <ul> <li> <p>With n bits of address, we can uniquely identify 2<sup>n</sup> locations. </p> </li> <li> <p>kilo ~ 2<sup>10</sup></p> </li> <li> <p>mega ~ 2<sup>20</sup></p> </li> <li> <p>giga ~ 2<sup>30</sup></p> </li> <li>\u6ce8\u610f\u548c address space \u505a\u533a\u5206\uff0caddress space \u6307\u7684\u662f memory \u4e2d\uff0c\u4f9d\u636e\u5bfb\u5740\u8f93\u5165\uff08\u4e0b\u56fe\u7684<code>A[1:0]</code>\uff09\u80fd\u591f\u67e5\u8be2\u5230\u7684 location \u6570\u91cf\u7684**\u4e0a\u9650**\uff08\u5373\u4e24\u6761\u7ebf\u4f46\u662f\u53ea\u753b\u51fa\u4e86 3 \u4e2alocation\u7684\u8bdd\uff0caddress space \u4f9d\u7136\u662f 4\uff09\u3002</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#a_22-by-3-bit_memory","title":"A 2^2-by-3-Bit Memory","text":"<p>In both cases, our notation A[high:low] and D[high:low] reflects the fact that we have numbered the bits of address and data from right to left, in order, starting with the rightmost bit, which is numbered 0.</p>"},{"location":"ClassNotes/ICS/ICS/#36_sequential_logic_circuits","title":"3.6 Sequential Logic Circuits","text":"<p>In this section, we discuss digital logic structures that can both process information (i.e., make decisions) and store information.</p> <p>Sequential logic circuits are used to implement a very important class of mechanisms called finite state machines.</p> <p>They contain storage elements that allow them to keep track of prior history information.</p> <p>Note also that the output can be dependent on both the inputs now and the values stored in the storage elements. The values stored in the storage elements reflect the history of what has happened before.(\u8f93\u51fa\u7ed3\u679c\u548c\u8f93\u5165\u503c\u3001\u5386\u53f2\u72b6\u6001\u90fd\u6709\u5173)</p>"},{"location":"ClassNotes/ICS/ICS/#361_combination_lock","title":"3.6.1 Combination Lock","text":"<ul> <li>combination lock</li> </ul> <p>Whether or not this lock opens is totally independent of the past rotations of the four wheels. The lock does not care at all about past rotations. The only thing important is the current value of each of the four wheels.</p> <p>\u662f\u5426\u89e3\u5f00\u7ec4\u5408\u9501\u548c\u65cb\u8f6c\u5708\u6570\u7b49\u72b6\u6001\u65e0\u5173\uff0c\u53ea\u548c**\u5f53\u524d**\u7684\u503c\u6709\u5173</p> <ul> <li>sequential lock</li> </ul> <p>Because the lock stores the previous rotations and makes its decision (open or don\u2019t open) on the basis of the the history of the past operations, that is, on the correct sequence being performed.</p>"},{"location":"ClassNotes/ICS/ICS/#362_the_concept_of_state","title":"3.6.2 The Concept of State","text":"<p>The state of a mechanism\u2014 more generally, the state of a system\u2014is a snapshot of that system in which all relevant items are explicitly expressed.</p> <p>That is: The state of a system is a snapshot of all the relevant elements of the system at the moment the snapshot is taken.</p> <ul> <li>examples\uff1aa combination lock, basketball games, tic-tac-toe</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#363_the_finite_state_machinefsm_and_its_state_diagram","title":"3.6.3 The Finite State Machine(FSM) and its State Diagram","text":""},{"location":"ClassNotes/ICS/ICS/#elements","title":"Elements","text":"<ol> <li>a finite number of states</li> <li>a finite number of external inputs</li> <li>a finite number of external outputs</li> <li>an explicit specification of all state transitions</li> <li>an explicit specification of what determines each external output value.</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#combination_lock","title":"Combination Lock","text":"<p>The explicit specifications of all state transitions are shown by the arrows in the state diagram. The more sophisticated term for \u201carrow\u201d is arc. The arrowhead on each arc specifies which state the system is coming from and which state it is going to. </p> <ul> <li>We refer to the state the system is coming from as the current state, and the state it is going to as the next state.</li> <li>First, it is usually the case that from a current state there are multiple transitions to next states. The state transition that occurs depends on both the current state and the value of the external input.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#364_the_synchronous_final_state_machine","title":"3.6.4 The Synchronous Final State Machine","text":"<p>On the contrary, we say that computers are synchronous because the state transitions take place, one after the other, at identical fixed units of time.(\u4ee5\u4e00\u4e2a\u76f8\u540c\u7684\u3001\u56fa\u5b9a\u7684\u65f6\u95f4\u5355\u4f4d\u8fdb\u884c\u72b6\u6001\u8f6c\u6362) They are controlled by a synchronous finite state machine. </p> <p>\u540c\u6b65\u548c\u5f02\u6b65\u7684\u533a\u522b\uff1a\u540c\u6b65\u72b6\u6001\u673a\u548c\u5f02\u6b65\u72b6\u6001\u673a\u662f\u72b6\u6001\u673a\u7684\u4e24\u79cd\u57fa\u672c\u7c7b\u578b\u3002\u5f02\u6b65\u72b6\u6001\u673a\u72b6\u6001\u5728\u8f93\u51fa\u4fe1\u53f7\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u5ef6\u65f6\u540e\u53d8\u5316\u65f6\uff0c\u65f6\u95f4\u65e0\u6cd5\u9884\u6d4b\u3002\u540c\u6b65\u72b6\u6001\u673a\u72b6\u6001\u53d8\u5316\u7531\u65f6\u949f\u4fe1\u53f7\u63a7\u5236\u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f02\u6b65\u72b6\u6001\u673a\u7684\u72b6\u6001\u5207\u6362\u7684\u65f6\u95f4\u95f4\u9694\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u7531\u64cd\u4f5c\u89e6\u53d1\u3002</p>"},{"location":"ClassNotes/ICS/ICS/#365_the_clock","title":"3.6.5 The Clock","text":"<p>A clock circuit produces a signal, commonly referred to as THE clock, whose value alternates between 0 volts and some specified fixed voltage.</p>"},{"location":"ClassNotes/ICS/ICS/#clock_cycle","title":"Clock Cycle","text":"<p>Each of the repeated sequence of identical intervals is referred to as a clock cycle. </p> <p>A clock cycle starts when the clock signal transitions from 0 to 1 and ends the next time the clock signal transitions from 0 to 1. \uff08\u8ba1\u7b97\u673a\u754c\u7ea6\u5b9a\u4fd7\u6210\uff0c\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u4ece\u4e00\u4e2a\u4e0a\u5347\u6cbf\u5f00\u59cb\u5230\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u7ed3\u675f\uff09</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#366_the_traffic_controller_example","title":"3.6.6 The Traffic Controller Example","text":"<p>State Diagram</p>"},{"location":"ClassNotes/ICS/ICS/#the_sequential_logic_circuit","title":"The Sequential Logic Circuit","text":""},{"location":"ClassNotes/ICS/ICS/#combinational_logic","title":"Combinational Logic","text":"<ul> <li>\u6709\u56db\u79cdState\uff0c\u6240\u4ee5\u4f7f\u7528\u4e24\u4e2aStorage Element</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#the_problem_with_gated_latches","title":"The Problem with Gated Latches","text":"<p>The problem is the gated D latch. We want the output of OR gates Y and Z to transition to the next state at the end of the current clock cycle and allow the current state to remain unchanged until then. That is, we do not want the input to the storage elements to take effect until the end of the current clock cycle. Since the output of a gated D latch changes immediately in response to its input if the Write Enable signal is asserted, it cannot be the storage element for our synchronous finite state machine. </p> <p>\u5728\u5f53\u524d\u65f6\u949f\u5468\u671f\u5185\u3002\u5b58\u50a8\u5355\u5143\u7684\u8f93\u51fa\u662f\u903b\u8f91\u7535\u8def\u7684\u4e00\u4e2a\u8f93\u5165\uff0c\u903b\u8f91\u7535\u8def\u4f1a\u56e0\u6b64\u6539\u53d8\uff0c\u4f46\u903b\u8f91\u7535\u8def\u7684\u8f93\u51fa\u53c8\u662f\u5b58\u50a8\u5355\u5143\u7684\u8f93\u5165\u3002\u8be5\u8f93\u5165\u5e94\u8be5\u7b49\u5230\u4e0b\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u624d\u80fd\u5199\u5165\u5b58\u50a8\u5355\u5143\uff0c\u5982\u679c\u4f7f\u7528D Gated Latch\uff0c\u90a3\u4e48\u5c31\u4f1a\u4e00\u76f4\u6539\u53d8\u3002</p>"},{"location":"ClassNotes/ICS/ICS/#master-slave_flip-flop","title":"Master-slave flip-flop \uff08\u4e3b\u4ece\u9501\u5b58\u5668\uff09","text":"<ul> <li>Clock\u4e3a 1\uff0cMaster\u4e0d\u53ef\u5199\uff0cSlave\u53ef\u5199\uff0cMaster\u5b58\u50a8\u7684\u6570\u636e\u5199\u5165Slave\u4e2d\uff0cSlave\u5199\u5165\u903b\u8f91\u7535\u8def\u4e2d\uff0c\u6574\u4e2a\u7535\u8def\u8fdb\u5165\u4e0b\u4e00\u4e2a\u72b6\u6001\u3002   Clock\u4e3a 0\uff0cMaster\u53ef\u5199\uff0cSlave\u4e0d\u53ef\u5199\uff0cSlave\u4fdd\u5b58\u7684\u4f9d\u65e7\u662f\u524d\u4e00\u4e2a\u72b6\u6001\uff0c\u4e0d\u4f1a\u6539\u53d8\u903b\u8f91\u7535\u8def\u7684\u72b6\u6001\u3002Master\u5b58\u5165\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u6570\u636e\uff0c\u4e3a\u4e0b\u4e00\u4e2a\u72b6\u6001\u505a\u51c6\u5907\u3002</li> <li>Flip-flop\u5b9e\u73b0\u4e86\u6309\u7167\u65f6\u949f\u5468\u671f\u8bfb\u5199\uff0c\u5e76\u4e14\u662f\u7528\u65f6\u949f\u63a7\u5236WE\u3002</li> </ul> <ul> <li>prop delay: \u4f20\u64ad\u5ef6\u8fdf</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#37_the_data_path_of_lc-3","title":"3.7 The Data Path of LC-3","text":"<p>The data path consists of all the logic structures that combine to process information in the core of the computer.</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#register","title":"Register","text":"<p>It is a temporary location</p> <p>A register is simply a set of n flip-flops that collectively are used to store one n-bit value.</p> <p>In fact, a register can be any size that we need. </p> <p>We usually need flip-flops, rather than latches, because it is usually important to be able to both read the contents of a register throughout a clock cycle and also store a new value in the register at the end of that same clock cycle.</p> <ul> <li>PC, IR, MAR, and MDR are all 16-bit registers that store 16 bits of information each</li> <li>The block labeled REG FILE consists of eight registers that each store 16 bits of information. </li> <li>The data path also shows three 1-bit registers, N, Z, and P.</li> </ul> <p></p> <ul> <li> \u4e3a\u4ec0\u4e48register\u8981\u7528flip-flop\uff0c\u4e0d\u80fd\u7528latch\u3002\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u5bf9register\u6709\u4ec0\u4e48\u8981\u6c42\uff1f</li> </ul> <p>\u5728\u300c\u7ec4\u5408\u7535\u8def\u300d\u4e2d\uff0c\u5fae\u5c0f\u7684\u4fe1\u53f7\u4f20\u8f93\u8fdf\u5ef6\uff0c\u90fd\u6709\u53ef\u80fd\u9020\u6210\u8f93\u51fa\u6bdb\u523a\u3002\u5c3d\u7ba1\u6bdb\u523a\u662f\u4e00\u4e2a\u6781\u5176\u77ed\u6682\u7684\u4fe1\u53f7\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5f15\u8d77\u903b\u8f91\u7535\u8def\u7684\u8bef\u52a8\u4f5c\u3002\u4e3a\u4e86\u56de\u907f\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u8981\u4f7f\u7528\u65f6\u949f\u540c\u6b65\u7535\u8def\u3002\u5982\u56fe\u6240\u793a\uff0c\u5176\u6784\u9020\u662f\u5728FF\uff08\u89e6\u53d1\u5668\uff09\u4e4b\u95f4\u5939\u7740\u300c\u7ec4\u5408\u7535\u8def\u300d\u3002\u6bdb\u523a\u662f\u300c\u7ec4\u5408\u7535\u8def\u300d\u5728\u8f93\u51fa\u7a33\u5b9a\u4e4b\u524d\uff0c\u8f93\u51fa\u7684\u77ed\u6682\u4fe1\u53f7\u3002\u56e0\u6b64\uff0c\u5728\u300c\u7ec4\u5408\u7535\u8def\u300d\u8f93\u51fa\u7a33\u5b9a\u4ee5\u540e\uff0c\u518d\u6539\u53d8\u65f6\u949f\uff0c\u7528\u89e6\u53d1\u5668\u4fdd\u6301\u8fd9\u4e2a\u8f93\u51fa\uff0c\u5c31\u53ef\u4ee5\u56de\u907f\u8fd9\u79cd\u8bef\u52a8\u4f5c\u4e86\u3002 </p> <ul> <li>\u6240\u4ee5\u5c3d\u7ba1\u9501\u5b58\u5668\u53ef\u80fd\u53ef\u4ee5\u5b9e\u73b0\u9700\u6c42\uff0c\u4f46\u662f\u56e0\u4e3a\u4fe1\u53f7\u4f20\u8f93\u5ef6\u8fdf\uff0c\u4f7f\u7528\u5bc4\u5b58\u5668\uff08\u7531FF\u7ec4\u6210\uff09\u53ef\u4ee5\u4f7f\u7535\u8def\u66f4\u52a0\u7a33\u5b9a</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#chapter_4_the_von_neumann_model","title":"Chapter 4 The von Neumann Model","text":""},{"location":"ClassNotes/ICS/ICS/#41_basic_components","title":"4.1 Basic Components","text":"<p>The instruction is the smallest piece of work specified in a computer program. </p> <p>The von Neumann model consists of five parts: memory, a processing unit, input, output, and a control unit. </p> <p>The computer program is contained in the computer\u2019s memory.  The data the program needs to carry out the work of the program is either contained in the program\u2019s memory or is obtained from the input devices.  The results of the program\u2019s execution are provided by the output devices. The order in which the instructions are carried out is performed by the control unit.</p> <p>\u4e5f\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e09\u90e8\u5206\uff0cCPU(\u5305\u542b\u63a7\u5236\u548c\u64cd\u4f5c\u5355\u5143)\uff0cMEMORY\uff0cI/O</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#input_and_output","title":"Input and Output","text":"<p>In order for a computer to process information, the information must get into the computer. </p> <p>In order to use the results of that processing, those results must be displayed in some fashion outside the computer. </p>"},{"location":"ClassNotes/ICS/ICS/#memory","title":"Memory","text":"<ul> <li> <p>a typical memory in today\u2019s world of computers consists of 2<sup>34</sup>\uff0816GB\uff09 distinct memory locations, each of which is capable of storing eight bits of information. </p> </li> <li> <p>To read the contents of a memory location, we first place the address of that location in the memory\u2019s address register (MAR) and then interrogate the computer\u2019s memory. The information stored in the location having that address will be placed in the memory\u2019s data register (MDR). </p> </li> <li> <p>To write (or store) a value in a memory location, we first write the address of the memory location in the MAR, and the value to be stored in the MDR.    We then interrogate the computer\u2019s memory with the write enable signal asserted.    The information contained in the MDR will be written into the memory location whose address is in the MAR.</p> </li> <li> <p>two characteristics of a memory location: its address and what is stored there.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#computation_unit_processing_unit","title":"Computation Unit / Processing Unit","text":"<p>The actual processing of information in the computer is carried out by the processing unit.</p> <ul> <li>ALU   The ALU normally processes data elements of a fixed size referred to as the word length of the computer. The data elements are called words.   In the LC-3, the ALU processes 16-bit words. We say the LC-3 has a word length of 16 bits.</li> <li>Temporary locations   Because the time it takes to access memory is long compared to the time it takes to perform the ADD or MULTIPLY. The most common form of temporary storage is a set of registers. The size of each register is identical to the size of values processed by the ALU; that is, they each contain one word.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#control_unit","title":"Control Unit","text":"<p>It is the control unit that keeps track of both where we are within the process of executing the program and where we are in the process of executing each instruction.</p> <ul> <li>IR (instruction register)   To keep track of which instruction is being executed, the control unit has an instruction register to contain that instruction.</li> <li>PC (program counter)   To keep track of which instruc- tion is to be processed next, the control unit has a register that contains the next instruction\u2019s address.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#42_the_lc-3","title":"4.2 The LC-3","text":"<ul> <li> <p>Filled-in arrowheads: data elements that flow along the corresponding paths.</p> </li> <li> <p>Not-filled-in arrowheads: control signals that control the processing of the data elements. </p> </li> <li> <p>MEMORY</p> </li> <li> <p>storage elements</p> </li> <li> <p>Memory Address Register (MAR) </p> <p>for addressing individual locations.</p> <p>Note that the MAR contains 16 bits, reflecting the fact that the memory address space of the LC-3 is 2<sup>16</sup> memory locations.</p> </li> <li> <p>Memory Data Register (MDR) </p> <p>for holding the contents of a memory location on its way to/from the storage.  </p> <p>The MDR contains 16 bits, reflecting the fact that each memory location contains 16 bits\u2014that is, the LC-3 is 16-bit addressable.</p> </li> <li> <p>INPUT/OUTPUT </p> </li> <li> <p>a keyboard and a monitor. </p> </li> <li> <p>a keyboard data register (KBDR)</p> <p>for holding the ASCII codes of keys struck</p> </li> <li> <p>a keyboard status register (KBSR) </p> <p>for maintaining status information about the keys struck. </p> </li> <li> <p>a display data register (DDR) </p> <p>for holding the ASCII code of something to be displayed on the screen and </p> </li> <li> <p>a display status register (DSR)</p> <p>for maintaining associated status information. </p> </li> <li> <p>THE PROCESSING UNIT </p> </li> <li>a functional unit (ALU) Algorithm and Logic Unit</li> </ul> <p>perform arithmetic and logic operations. The LC-3 ALU can perform one arithmetic operation (addition) and two logical operations (bitwise AND and bitwise NOT).</p> <ul> <li>eight registers (R0, \u2026 R7)</li> </ul> <p>for storing temporary values that will be needed in the near future as operands for subsequent instructions. </p> <ul> <li> <p>THE CONTROL UNIT </p> </li> <li> <p>Its most important structure is the finite state machine, which directs all the activity. </p> </li> <li> <p>Note the CLK input to the finite state machine in Figure 4.3. It specifies how long each clock cycle lasts. </p> </li> <li> <p>The instruction register (IR) is also an input to the finite state machine since the LC-3 instruction being processed determines what activities must be carried out. </p> </li> <li> <p>The program counter (PC) is also a part of the control unit; it keeps track of the next instruction to be executed after the current instruction finishes.</p> </li> <li> <p> \u4e3a\u4ec0\u4e48\u9700\u8981\u6709\u9650\u72b6\u6001\u673a\uff1f\u8bb0\u5f55\u4e86\u4ec0\u4e48\u72b6\u6001\uff1ffinite state machine\u8bb0\u5f55\u4e86\u6307\u4ee4\u5faa\u73af\u7684\u72b6\u6001\uff08fetch\uff08state1\uff5e3\uff09-decode\uff08state4\uff09-evaluate address-get data-execute-store data</p> </li> </ul> <p></p> <p></p> <p>State33 \u91cc\u7684R\u6307\u7684\u662fReady\uff0c\u5373\u5185\u5b58\u662f\u5426\u8bfb\u53d6\u5b8c\u6210</p>"},{"location":"ClassNotes/ICS/ICS/#43_instruction_processing","title":"4.3 Instruction Processing","text":""},{"location":"ClassNotes/ICS/ICS/#431_the_instruction","title":"4.3.1 The instruction","text":"<p>The most basic unit of computer processing is the instruction.It is made up of two parts, the opcode (what the instruction does) and the operands (who it does it to!).</p> <p>There are fundamentally three kinds of instructions: operates, data movement, and control, although many ISAs have some special instructions that are necessary for those ISAs.</p> <ul> <li>Operate instructions operate on data. The LC-3 has three operate instructions: one arithmetic (ADD) and two logicals (AND and NOT). </li> <li>Data movement instructions move information from the processing unit to and from memory and to and from input/output devices. The LC-3 has six data movement instructions.</li> <li>Control instructions are necessary for altering the sequential processing of instructions.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#the_addand_instruction","title":"The ADD/AND Instruction","text":"<p>operands: two source operands and one destination operand</p> <p>[15:12] opcode [11:9] location for sorting the result [8:6] one source operand [5] determine whether to add / and an operand from register or immediately</p> <p>\u7acb\u5373\u6570\u7684\u8303\u56f4\u662f-16\uff5e15</p>"},{"location":"ClassNotes/ICS/ICS/#the_ld_instruction","title":"The LD Instruction","text":"<p>go to a particular memory location, read the value that is contained there, and store that value in one of the registers</p> <p>operands: 2 addressing mode: PC+offset</p> <p>[15:12] opcode [11:9] the register to contain the value from the memory [8:0] the offset</p>"},{"location":"ClassNotes/ICS/ICS/#432_the_instruction_cycle","title":"4.3.2 The Instruction Cycle","text":"<p>Instructions are processed under the direction of the control unit in a very systematic, step-by-step manner. </p> <p>The entire sequence of steps needed to process an instruction is called the instruction cycle. </p> <p>The instruction cycle consists of six sequential phases, each phase requiring zero or more steps.</p>"},{"location":"ClassNotes/ICS/ICS/#4321_fetch","title":"4.3.2.1 Fetch","text":"<p>Step 1: Load the MAR with the contents of the PC, and simultaneously increment the PC.(one clock cycle) Step 2: Interrogate memory, resulting in the instruction being placed in the MDR. (one or many clock cycles depending on how long it takes to access the computer\u2019s memory) Step 3: Load the IR with the contents of the MDR.(one clock cycle)</p>"},{"location":"ClassNotes/ICS/ICS/#4322_decode","title":"4.3.2.2 Decode","text":"<p>The DECODE phase examines the instruction in order to figure out what the microarchitecture is being asked to do.</p> <p>input: opcode IR[15:12] output:corresponding to the opcode</p>"},{"location":"ClassNotes/ICS/ICS/#4323_evaluate_address","title":"4.3.2.3 Evaluate Address","text":"<p>\u53ea\u6709\u9700\u8981\u7279\u6b8a\u5bfb\u5740\u6a21\u5f0f\uff08PC+offset\u3001Base+offset\u3001\u95f4\u63a5\u5bfb\u5740\u7b49\uff09\u624d\u9700\u8981\u8fd9\u4e00\u9636\u6bb5\uff0c\u4ece\u5bc4\u5b58\u5668\u3001\u4ece\u6307\u4ee4\u4e2d\u8bfb\u53d6\u64cd\u4f5c\u6570\u4e0d\u9700\u8981\u8ba1\u7b97\u5730\u5740</p> <p>the ADD and AND instructions in the LC-3 obtain their source operands from registers or from the instruction itself and store the result of the ADD or AND instruction in a register. For those instructions, the EVALUATE ADDRESS phase is not needed.</p>"},{"location":"ClassNotes/ICS/ICS/#4324_fetch_operands","title":"4.3.2.4 Fetch Operands","text":"<p>LD\uff0c\u628a\u8ba1\u7b97\u7684\u5730\u5740\u5199\u5165MAR\uff0c\u4ece\u5185\u5b58\u4e2d\u8bfb\u6570\u636e\u5230MDR\u4e2d\u3002 ADD\uff0c\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u6570\u636e\u3002</p> <ul> <li>Note\uff1aIn most current microprocessors, this phase (for the ADD instruction) can be done at the same time the instruction is being executed (the fifth phase of the instruction cycle)</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#4325_execute","title":"4.3.2.5 Execute","text":"<p>ADD\uff0c\u5728ALU\u4e2d\u6267\u884c\u52a0\u6cd5</p>"},{"location":"ClassNotes/ICS/ICS/#4326_store_result","title":"4.3.2.6 Store Result","text":"<p>In the case of the ADD instruction, in many computers this action is performed during the EXECUTE phase. That is, in many computers, including the LC-3, an ADD instruction can fetch its source operands, perform the ADD in the ALU, and store the result in the destination register all in a single clock cycle.</p> <p>LD\uff0c\u628a\u6570\u636e\u5199\u5165\u5bc4\u5b58\u5668</p>"},{"location":"ClassNotes/ICS/ICS/#_2","title":"\u4e00\u4e9b\u7279\u4f8b\uff08\u4e0d\u4e00\u5b9a\u9700\u8981\u6240\u6709\u9636\u6bb5\uff09","text":"<p>As already pointed out, the LC- 3 ADD instruction does not require a separate EVALUATE ADDRESS phase or a separate STORE RESULT phase.  The LC-3 LD instruction does not require an EXECUTE phase. On the other hand, there are instructions in other ISAs that require all six phases.</p> <ul> <li> \u6bcf\u4e2a\u9636\u6bb5\u5230\u5e95\u90fd\u505a\u4e86\u90a3\u4e9b\u4e8b\u60c5\uff1f\uff08\u4ece\u5185\u5b58\u4e2d\u53d6\u6570\u636e\u653e\u5165MDR\uff09</li> <li> \u6bcf\u4e2a\u9636\u6bb5\u9700\u8981\u591a\u5c11\u4e2aClock Cycle\uff1f</li> <li> \u6bcf\u6761\u6307\u4ee4\u90fd\u9700\u8981\u6240\u6709\u9636\u6bb5\u5417\uff1f</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#433_change_the_sequence_of_execution","title":"4.3.3 Change the Sequence of Execution","text":""},{"location":"ClassNotes/ICS/ICS/#the_br_instruction","title":"The BR Instruction","text":"<p>[15:12] opcode [11:9] condition [8:0] value added to incremented PC</p> <p>\u5bfb\u5740\u6a21\u5f0f\uff1aPC+offset</p>"},{"location":"ClassNotes/ICS/ICS/#434_control_of_the_instruction_cycle","title":"4.3.4 Control of the Instruction Cycle","text":"<p>As is the case with the finite state machines studied in Section 3.6, each state corresponds to one machine cycle of activity that takes one clock cycle to perform. The processing controlled by each state is described within the node representing that state. The arcs show the next state transitions.</p> <p>Fetch(3 CC) Decode(1 CC) \u7ee7\u7eed\u6309\u7167\u65f6\u949f\u5468\u671f\u4e00\u6b65\u4e00\u6b65\u6267\u884c\u6307\u4ee4\uff0c\u76f4\u5230\u7ed3\u675f\uff0c\u7136\u540e\u56de\u5230State1</p>"},{"location":"ClassNotes/ICS/ICS/#435_halting_the_computerthe_trap_instruction","title":"4.3.5 Halting the Computer(the Trap instruction)","text":"<p>A block diagram of the clock circuit, consisting primarily of a clock generator and a RUN latch</p>"},{"location":"ClassNotes/ICS/ICS/#run_latch","title":"RUN latch","text":"<ul> <li>Q = 1, output = 1. Q = 0, output = 0</li> <li>Stopping the instruction cycle requires only clearing the RUN latch.</li> </ul> <p>Question: If a HALT instruction can clear the RUN latch, thereby stopping the instruction cycle, what instruction is needed to set the RUN latch, thereby reinitiating the instruction cycle? Hint: This is a trick question!</p> <p>Answer: No! \u56e0\u4e3a\u5728\u505c\u6b62\u65f6\u949f\u5468\u671f\u540e\u5176\u4ed6\u7684\u6307\u4ee4\u90fd\u4e0d\u518d\u88ab\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4f7f\u4f60\u6709\u4e00\u4e2a\u6062\u590dRUN latch\u7684\u6307\u4ee4\u4e5f\u4e0d\u4f1a\u88ab\u6267\u884c\u3002</p>"},{"location":"ClassNotes/ICS/ICS/#trap_instruction","title":"TRAP Instruction","text":"<ul> <li>In some older machines, it is done by executing a HALT instruction. In the LC-3, as in many other machines, it is done under control of the operating system.</li> <li>if a user program requires help from the operating system, it requests that help with the TRAP instruction (opcode = 1111) and an eight-bit code called a trap vector, which identifies the help that the user program needs. The eight-bit code x25 tells the operating system that the program has finished executing and the computer can stop processing instructions.(\u7528\u6237\u901a\u8fc7TRAP\u6307\u4ee4\u5411\u64cd\u4f5c\u7cfb\u7edf\u6c42\u52a9\uff0c\u4f9d\u636etrap vector\u6765\u786e\u5b9a\u9700\u8981\u7684\u5e2e\u52a9\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5982\u505c\u6b62\u8fd0\u884c\u7a0b\u5e8f\u7b49\u64cd\u4f5c)</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#chapter_5_the_lc-3","title":"Chapter 5 The LC-3","text":""},{"location":"ClassNotes/ICS/ICS/#51_the_isa_overview","title":"5.1 The ISA Overview","text":"<p>The ISA specifies all the information about the computer that the software has to be aware of. In other words, the ISA specifies everything in the computer that is available to a programmer when he/she writes programs in the com- puter\u2019s own machine language.</p> <p>The ISA specifies the memory organization, register set, and instruction set, including the opcodes, data types, and addressing modes of the instructions in the instruction set.</p>"},{"location":"ClassNotes/ICS/ICS/#511_memory_organization","title":"5.1.1 Memory Organization","text":"<ul> <li> <p>address space:2<sup>16</sup>       addressability:16bits       one word:16bits</p> </li> <li> <p>LC-3 is word-addressable</p> </li> <li> <p>\u4e0d\u662f\u6240\u6709locations\u90fd\u7528\u6765\u5b58\u50a8\u6570\u636e</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#512_register","title":"5.1.2 Register","text":"<p>The most common type of temporary storage locations, and the one used in the LC-3, is a set of registers. Each register in the set is called a general purpose register (GPR). </p> <p>PC\u548cIR\u662f\u6709\u7279\u6b8a\u7528\u9014\u7684\u5bc4\u5b58\u5668\uff0c\u6216\u8005NZP\u8fd9\u4e09\u4e2a\u5b58Condition codes\u7684\u4e00\u4f4d\u5bc4\u5b58\u5668</p> <p>The number of bits stored in each register is usually one word. In the LC-3, this means 16 bits.</p> <p>Registers must be uniquely identifiable. The LC-3 specifies eight GPRs, each identified by a three-bit register number. They are referred to as R0, R1, \u2026 R7. Figure 5.1 shows a snapshot of the LC-3\u2019s register set, sometimes called a register file, with the eight values 1, 3, 5, 7, \u22122, \u22124, \u22126, and \u22128 stored in R0, \u2026 R7, respectively.</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#513_instruction_set","title":"5.1.3 Instruction Set","text":"<p>The instruction set is defined by its set of opcodes, data types, and addressing modes.</p> <p>The addressing modes determine where the operands are located. The data type is the representation of the operands in 0s and 1s.</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#514_opcodes","title":"5.1.4 Opcodes","text":"<p>The LC-3 ISA has 15 instructions, each identified by its unique opcode. The opcode is specified in bits [15:12] of the instruction. The opcode <code>1101</code> has been left unspecified, reserved for some future need.</p> <p>Three kinds discussed as before(operate, data movement, control)</p> <ul> <li>Operate instructions: ADD, AND, NOT</li> <li>Data movement instructions: LD, LDI, LDR, LEA, ST, STR, STI</li> <li>Control instructions: BR, JSR/JSRR, JMP, RTI, TRAP</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#515_data_types","title":"5.1.5 Data Types","text":"<p>16\u4f4d\u4e8c\u8fdb\u5236\u8865\u7801</p>"},{"location":"ClassNotes/ICS/ICS/#516_addressing_mode","title":"5.1.6 Addressing Mode","text":"<p>An addressing mode is a mechanism for specifying where the operand is located.</p> <p>An operand can generally be found in one of three places: in memory, in a register, or as a part of the instruction.</p> <ul> <li>Literal / Immediate operand: the operand is a part of the instrution</li> <li>5 addressing modes (3 memory addressing modes)</li> <li>non-memory addresses: immediate, register</li> <li>memory addresses: PC-relative, indirect, base+offset</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#517_condition_codescc","title":"5.1.7 Condition Codes(CC)","text":"<p>The LC-3 has three single-bit registers that are individually set (set to 1) or cleared (set to 0) each time one of the eight general purpose registers is written into as a result of execution of one of the operate instructions or one of the load instructions.</p> <ul> <li> <p>Each operate instruction performs a computation and writes the result into a general purpose register. </p> </li> <li> <p>Each load instruction reads the contents of a memory location and writes the value found there into a general purpose register.</p> </li> </ul> <ul> <li>\u53ea\u6709\u4e09\u79cdopcode(NOT AND ADD)\u548c\u4e09\u79cdload\u6307\u4ee4\u4f1a\u91cd\u8bbeNZP\u7684\u503c\u3002\u6570\u636e\u79fb\u52a8\u6307\u4ee4\u4f1a\u6839\u636e\u6570\u636e\u5185\u5bb9\u91cd\u8bbe\uff0c\u64cd\u4f5c\u6307\u4ee4\u4f1a\u6839\u636e\u8ba1\u7b97\u7ed3\u679c\u91cd\u8bbeNZP\u3002</li> <li> <p>Note\uff1aLEA\u4e0d\u6539\u53d8NZP\uff01</p> </li> <li> <p>Three single-bit registers N(negative), Z(zero), P(positive)</p> </li> </ul> <p>The set of three single-bit registers are referred to as condition codes because the condition of those bits are used to change the sequence of execution of the instructions in a computer program.</p> <p>\u8fd9\u4e9b\u6761\u4ef6\u7801\u5728\u7a0b\u5e8f\u7684\u8fd0\u884c\u4e2d\u4f5c\u4e3a\u6539\u53d8\u8fd0\u884c\u987a\u5e8f\u7684\u5224\u65ad\u4f9d\u636e</p>"},{"location":"ClassNotes/ICS/ICS/#52_operate_instructions_not_and_add","title":"5.2 Operate Instructions (NOT, AND, ADD)","text":""},{"location":"ClassNotes/ICS/ICS/#not","title":"NOT","text":"<p>the only operate instruction that performs a unary operation</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#add_and","title":"ADD / AND","text":""},{"location":"ClassNotes/ICS/ICS/#immediates_example","title":"Immediates Example","text":""},{"location":"ClassNotes/ICS/ICS/#applications","title":"Applications","text":"<ul> <li> <p>Subtract: R3 = R1 - R2   Take 2\u2019s complement of R2, then add to R1.   (1) R2 = NOT(R2)   (2) R2 = R2 + 1   (3) R3 = R1 + R2</p> </li> <li> <p>OR: R3 = R1 OR R2  Use DeMorgan\u2019s Law \u2013 invert R1 and R2, AND, then invert result.   (1) R1 = NOT(R1)   (2) R2 = NOT(R2)   (3) R3 = R1 AND R2   (4) R3 = NOT(R3)</p> </li> <li> <p>Register-to-register copy: R3 = R2 R3 = R2 + 0 (Add-immediate)</p> </li> <li> <p>Initialize to zero: R1 = 0 R1 = R1 AND 0 (And-immediate)</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#the_lea_instructionload_effective_address","title":"The LEA instruction(Load Effective Address)","text":"<p>It does not really operate on data, it simply loads a register with an address. It clearly does not move data from memory to a register, nor is it a control instruction. </p> <p>Note that the value to be loaded into the register does not involve any access to memory. \u2026nor does it have any effect on the condition codes.\uff08\u76f8\u5f53\u4e8e\u76f4\u63a5\u628aPC\u7684\u5185\u5bb9\u590d\u5236\u5230Register\u4e2d\uff09</p> <p></p> <ul> <li>the LEA instruction is useful to initialize a register with an address that is very close to the address of the instruction doing the initializing.</li> <li>\u628a\u5730\u5740\u503c\u5199\u5165\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u53ef\u4ee5\u914d\u5408\u6709base+offset\u5bfb\u5740\u6a21\u5f0f\u7684\u6307\u4ee4\u4f7f\u7528</li> <li>LEA\u4e0d\u6539\u53d8Condition codes</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#53_data_movement_instructions","title":"5.3 Data Movement Instructions","text":"<p>The process of moving information from memory to a register is called a load, and the process of moving information from a register to memory is called a store.</p> <ul> <li>The LC-3 contains six instructions that move information: LD, LDR, LDI, ST, STR, and STI.</li> </ul> <p></p> <ul> <li> <p>require two operands, a source and a destination.    One of these locations is a register, the other is a memory location or an input/output device.\uff08\u9700\u8981\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u4e00\u4e2a\u662f\u5bc4\u5b58\u5668\uff0c\u53e6\u4e00\u4e2a\u662f\u5185\u5b58\u5730\u5740\u6216IO\u8bbe\u5907\uff09</p> </li> <li> <p>Bits [11:9] specify the register. </p> </li> </ul> <p>If the instruction is a load, DR refers to the destination general purpose register that will contain the value after it is read from memory (at the completion of the instruction cycle). If the instruction is a store, SR refers to the register that contains the value that will be written to memory.</p> <ul> <li>Bits [8:0] contain the address generation bits</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#531_pc-relative_mode","title":"5.3.1 PC-Relative Mode","text":"<ul> <li>The memory address is computed by sign-extending bits [8:0] to 16 bits and adding the result to the incremented PC. </li> <li>\u9650\u5236\uff1a\u53ea\u80fd\u8bfb\u5199LD\u548cST\u6307\u4ee4\u9644\u8fd1\uff08-255\uff5e256\uff09\uff08PC++\uff09\u7684\u5730\u5740</li> </ul> <p>LD and ST</p>"},{"location":"ClassNotes/ICS/ICS/#532_indirect_mode","title":"5.3.2 Indirect Mode","text":"<p>However, instead of this address being the address of the operand to be loaded or stored, it is the address of the address of the operand to be loaded or stored.</p> <ul> <li>\u5148\u901a\u8fc7PC-Relative\u83b7\u5f97\u76ee\u6807\u5730\u5740\uff08\u5185\u5b58\uff09\uff0c\u518d\u6267\u884c\u4e00\u6b21LD\u628a\u76ee\u6807\u5185\u5bb9\u5b58\u5165\u5bc4\u5b58\u5668\u3002</li> </ul> <p>LDI and STI</p>"},{"location":"ClassNotes/ICS/ICS/#533_baseoffset_mode","title":"5.3.3 Base+offset Mode","text":"<p>The Base+offset mode is so named because the address of the operand is obtained by adding a sign-extended six-bit offset to a base register.</p> <p>[5:0] 6 bits offset [8:6] base register</p> <ul> <li>Note that the Base+offset addressing mode also allows the address of the operand to be anywhere in the computer\u2019s memory. (\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55\u4f4d\u7f6e)</li> </ul> <p>LDR and STR</p>"},{"location":"ClassNotes/ICS/ICS/#54_control_instructions","title":"5.4 Control Instructions","text":"<p>The LC-3 has five opcodes that enable the sequential execution flow to be broken: conditional branch, unconditional jump, subroutine call (sometimes called function), TRAP, and RTI (Return from Trap or Interrupt).</p>"},{"location":"ClassNotes/ICS/ICS/#541_conditional_branches","title":"5.4.1 Conditional Branches","text":""},{"location":"ClassNotes/ICS/ICS/#bropcode_0000","title":"BR(<code>opcode = 0000</code>)","text":"<ul> <li> <p>LC-3 has three condition code registers:  N \u2013 negative   Z \u2013 zero   P \u2013 positive (greater than zero)</p> </li> <li> <p>Set by any instruction that writes a value to a register(ADD, AND, NOT, LD, LDR, LDI, LEA)</p> </li> <li> <p>Exactly one will be set at all times (Based on the last instruction that altered a register)</p> </li> <li> <p>If the set bit is specified, the branch is taken.   PC-relative addressing:target address is made by adding signed offset (IR[8:0])to current PC.   Note: PC has already been incremented by FETCH stage.   Note: Target must be within 256 words of BR instruction.</p> </li> <li> <p>If the branch is not taken, the next sequential instruction is executed.</p> </li> <li></li> </ul>"},{"location":"ClassNotes/ICS/ICS/#jmpopcode_1100","title":"JMP(<code>opcode = 1100</code>)","text":"<p>Target address is the contents of a register. Allows any target address.</p> <p>\u4e00\u822c\u5c06<code>LEA</code>\u548c<code>JMP</code>\u642d\u914d\u4f7f\u7528\uff0c\uff08\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7ADD\u64cd\u4f5cregister\uff09\u8fd9\u6837\u5c31\u53ef\u4ee5\u5230\u8fbe\u4efb\u4f55\u4e00\u4e2a\u5730\u5740\uff08\u7406\u8bba\u4e0a\uff09\u3002\u5355\u72ec\u770bLEA+JMP\u548cBR\u7684\u64cd\u4f5c\u8303\u56f4\u5176\u5b9e\u6ca1\u6709\u533a\u522b\uff0c\u56e0\u4e3a\u90fd\u662f9bits\u7684offset\uff08\u5728BR\u548cLEA\u4e2d\u786e\u5b9a\uff09\uff0c\u4e3b\u8981\u533a\u522b\u5c31\u662f\u5728\u7075\u6d3b\u64cd\u4f5cregister\uff08\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u5185\u5b58LD\u5730\u5740\u5185\u5bb9\uff09\u3002</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#trapopcode_1111","title":"TRAP(<code>opcode = 1111</code>)","text":"vector routine x23 input  a character from the keyboard x21 output  a character to the monitor x25 halt  the program <p>The TRAP instruction, often called service call, is useful because it allows a programmer to get help from the operating system to do things that the typical programmer does not fully understand how to do.</p>"},{"location":"ClassNotes/ICS/ICS/#two_method_of_loop_control","title":"Two Method of Loop Control","text":"<ul> <li>Counter</li> <li>Sentinel   The end of a file is a \u201cEOF\u201d</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#56_the_data_path_revisited","title":"5.6 The Data Path Revisited","text":""},{"location":"ClassNotes/ICS/ICS/#561_basic_component","title":"5.6.1 Basic Component","text":""},{"location":"ClassNotes/ICS/ICS/#the_global_bus","title":"The Global Bus","text":"<p>This triangle (called a tristate device) allows the computer\u2019s control logic to enable exactly one supplier to provide information to the bus at any one time. The structure wishing to obtain the value being supplied can do so by asserting its LD.x (load enable) signal (recall our discussion of gated latches in Section 3.4.2). (LD\u6307\u4ee4\u662f\u5141\u8bb8\u4eceBUS\u5199\u5165\u8be5\u5355\u5143)</p>"},{"location":"ClassNotes/ICS/ICS/#chapter_6_programming","title":"Chapter 6 Programming","text":""},{"location":"ClassNotes/ICS/ICS/#code_for_conditional","title":"Code for Conditional","text":""},{"location":"ClassNotes/ICS/ICS/#code_for_iteration","title":"Code for Iteration","text":""},{"location":"ClassNotes/ICS/ICS/#chapter_7_assembly_language","title":"Chapter 7 Assembly Language","text":""},{"location":"ClassNotes/ICS/ICS/#71_assembly_language_programmingmoving_up_a_level","title":"7.1 Assembly Language Programming\u2014Moving Up a Level","text":"<ul> <li>\u5728\u4e00\u4e2a\u9ad8\u7ea7\u8bed\u8a00\u7a0b\u5e8f\u88ab\u6267\u884c\u4e4b\u524d\uff0c\u4f1a\u88ab\u7ffb\u8bd1\u6210\u591a\u6761ISA\u5185\u7684\u6307\u4ee4\u3002</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#72_an_assembly_language_program","title":"7.2 An Assembly Language Program","text":"<p>The translation program is called an assembler (in this case the LC-3 assembler), and the translation process is called assembly.</p>"},{"location":"ClassNotes/ICS/ICS/#721_instructions","title":"7.2.1 Instructions","text":"<p>Instructions</p> <p>4 parts: <code>Label   Opcode   Operands   ; Comment</code>  Two of the parts (Label and Comment) are optional.</p>"},{"location":"ClassNotes/ICS/ICS/#7211_opcodes_and_operands","title":"7.2.1.1 Opcodes and Operands","text":"<ul> <li> <p>mandatory</p> </li> <li> <p>operands can be obtained from registers , memory or literal values in the instruction.</p> </li> <li> <p>Register: explicitly represented</p> </li> <li> <p>memory: the symbolic name of the memory location is explicitly represented</p> </li> <li> <p>immediate operands: the actual value is explicitly represented</p> </li> </ul> <p>A literal value must contain a symbol identifying the representation base of the number.</p> <ul> <li><code>#</code> for decimal</li> <li><code>x</code> for hexadecimal</li> <li><code>b</code> for binary</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#7212_label","title":"7.2.1.2 Label","text":"<p>Labels are symbolic names that are used to identify memory locations that are referred to explicitly in the program. In LC-3 assembly language, a label consists of from 1 to 20 alphanumeric characters (i.e., each character is a capital or lower- case letter of the English alphabet, or a decimal digit), starting with a letter of the alphabet.</p> <p>other character strings that have specific meanings in an LC-3 program cannot be used as labels, like ADD, NOT, x1000, R4. Such not-allowed character strings are often referred to as reserved words.</p> <ul> <li> <p>two reasons for explicitly referring to a memory location</p> </li> <li> <p>The location is the target of a branch instruction.</p> </li> <li> <p>The location contains a value that is loaded or stored.</p> </li> <li> <p>If a location in the program is not explicitly referenced, then there is no need to give it a label.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#7213_comments","title":"7.2.1.3 Comments","text":"<ul> <li>It is important to make comments that provide additional insight and do not just restate the obvious.</li> <li>\u4e0d\u8981\u7b80\u5355\u5730\u63cf\u8ff0\u4e00\u4e2a\u6307\u4ee4\uff0c\u8981\u7ed9\u51fa\u8fd9\u4e2a\u6307\u4ee4\u7684\u4f5c\u7528\uff08\u5728\u5927\u5c40\u89c2\u4e0b\uff09</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#722_psudo-opsassembler_directives","title":"7.2.2 Psudo-Ops(Assembler Directives)","text":"<p>Rather, the pseudo-op is strictly a message from the assembly language program- mer to the assembler to help the assembler in the assembly process. Once the assembler handles the message, the pseudo-op is discarded.</p> <p>The LC-3 assembly language contains five pseudo-ops that we will find useful in our assembly language programming: <code>.ORIG</code>,<code>.FILL</code>,<code>.BLKW</code>,<code>.STRINGZ</code>, and<code>.END</code>. </p>"},{"location":"ClassNotes/ICS/ICS/#7221_orig","title":"7.2.2.1 <code>.ORIG</code>","text":"<p>.ORIG tells the assembler where in memory to place the LC-3 program.</p>"},{"location":"ClassNotes/ICS/ICS/#7222_fill","title":"7.2.2.2 <code>.FILL</code>","text":"<p>.FILL tells the assembler to set aside the next location in the program and initialize it with the value of the operand. The value can be either a number or a label.</p>"},{"location":"ClassNotes/ICS/ICS/#7223_blkw","title":"7.2.2.3 <code>.BLKW</code>","text":"<p>.BLKW tells the assembler to set aside some number of sequential memory locations (i.e., a BL**oc**K of **W**ords) in the program. The actual number is the operand of the .BLKW pseudo-op.</p> <p>\u5f53\u8981\u4f7f\u7528\u7684\u6570\u503c\u8fd8\u672a\u77e5\u65f6\u6765\u4f7f\u7528\u3002</p>"},{"location":"ClassNotes/ICS/ICS/#7224_stringz","title":"7.2.2.4 <code>.STRINGZ</code>","text":"<p>.STRINGZ tells the assembler to initialize a sequence of n + 1 memory locations. The argument is a sequence of n characters inside double quotation marks. </p> <ul> <li>The final word of memory is initialized to 0. The last word, containing x0000, provides a convenient sentinel for processing the string of ASCII codes.</li> </ul> <pre><code>      .ORIG    x3010\nHELLO .STRINGZ \"Hello, World!\"\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#7225_end","title":"7.2.2.5 <code>.END</code>","text":"<p>END tells the assembler it has reached the end of the program and need not even look at anything after it. That is, any characters that come after .END will not be processed by the assembler.</p> <ul> <li>It is simply a delimiter\uff08\u5b9a\u754c\u7b26\uff09\u2014it marks the end of the program. It is a message from the programmer, telling the assembler where the assembly language program ends.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#73_the_assembly_process","title":"7.3 The Assembly Process","text":""},{"location":"ClassNotes/ICS/ICS/#732_a_two-pass_process","title":"7.3.2 A Two-Pass Process","text":"<p>\u5728\u4e00\u5bf9\u4e00\u7684\u7ffb\u8bd1\u4e2d\uff0c\u6c47\u7f16\u5668\u5f88\u53ef\u80fd\u9047\u5230Label\uff0c\u6c47\u7f16\u5668\u4e0d\u77e5\u9053\u8fd9\u4e9b\u62bd\u8c61\u5730\u5740\u7684\u542b\u4e49\uff0c\u4e8e\u662f\u5c31\u9700\u8981\u4e00\u4e2asymbol table\u3002</p> <p>To prevent this from occurring, the assembly process is done in two complete passes (from beginning to .END) through the entire assembly language program. </p> <p>The objective of the first pass is to identify the actual binary addresses corresponding to the symbolic names (or labels). This set of correspondences is known as the symbol table. </p> <ul> <li> <p>In pass 1, we construct the symbol table. </p> </li> <li> <p>In pass 2, we translate the individual assembly language instructions into their corresponding machine language instructions.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#733_the_first_pass_creating_the_symbol_table","title":"7.3.3 The First Pass: Creating the Symbol Table","text":"<p>We keep track of the location assigned to each instruction by means of a location counter (LC). The LC is initialized to the address specified in .ORIG, that is, x3000.</p> <p>The assembler examines each instruction in sequence and increments the LC once for each assembly language instruction. If the instruction examined contains a label, a symbol table entry is made for that label, specifying the current contents of LC as its address.\uff08LC\u8bb0\u5f55\u7740\u5f53\u524d\u6307\u4ee4\u7684\u5730\u5740\uff0c\u5e76\u4e14\u968f\u7740\u6307\u4ee4\u7684\u79fb\u52a8increment\uff0c\u5982\u679c\u9047\u5230Label\uff0c\u5219\u628aPC\u7684\u503c\u586b\u5165symbol table\uff09</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#734_the_second_pass_generating_the_machine_language_program","title":"7.3.4 The Second Pass: Generating the Machine Language Program","text":"<ul> <li>\u8ba1\u7b97offset\uff1a\u76ee\u6807\u5730\u5740 - incremented LC</li> </ul> <p>Note: In order to use the LD instruction, it is necessary that the source of the load, in this case the address whose label is PTR, is not more than +256 or \u2212255 memory locations from the LD instruction itself.</p>"},{"location":"ClassNotes/ICS/ICS/#74_beyond_the_assembly_of_a_single_assembly_language_program","title":"7.4 Beyond the Assembly of a Single Assembly Language Program","text":""},{"location":"ClassNotes/ICS/ICS/#741_the_executable_image","title":"7.4.1 The Executable Image","text":"<p>When a computer begins execution of a program, the entity being executed is called an executable image.</p> <p>The executable image is created from modules often created independently by several different programmers. Each module is trans- lated separately into an object file.</p>"},{"location":"ClassNotes/ICS/ICS/#742_more_than_one_object_file","title":"7.4.2 More than One Object File","text":"<p>If the LC-3 assembly language had the pseudo-op .EXTERNAL, and if we had designated STARTofFILE as .EXTERNAL, the LC-3 assembler would be able to create a symbol table entry for STARTofFILE, and instead of assigning it an address, it would mark the symbol as belonging to another module.</p> <p>\u7f16\u8bd1\u65f6\u5355\u72ec\u7f16\u8bd1\uff0c\u5728\u94fe\u63a5\u65f6\u5904\u7406\u4e0b<code>.EXTERNAL</code>\u7684\u5730\u5740\u95ee\u9898</p>"},{"location":"ClassNotes/ICS/ICS/#chapter_8_data_structures","title":"Chapter 8 Data Structures","text":"<p>A company\u2019s organization chart and a list of items arranged in alphabetical order are two examples. We call these complex items of information abstract data types, or more colloquially data structures.</p>"},{"location":"ClassNotes/ICS/ICS/#81_subroutinesfunctionsprocedures","title":"8.1 Subroutines(Functions)(Procedures)","text":"<ul> <li>libraries: The collections of fragments that are used multiple times are available to user programmers to free them from having to write their own. </li> <li>Target: To enable the programmer to write the code more efficiently</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#811_the_callreturn_mechanism","title":"8.1.1 The Call/Return Mechanism","text":"<p>We refer to the program that contains the call as the caller, and the subroutine that contains the return as the callee.</p> <ul> <li>\u8fd9\u79cd\u673a\u5236\u6709\u4e24\u4e2a\u6307\u4ee4</li> <li> <p>JSR(R)\uff1a1. \u5f80PC\u5185\u88c5\u5165subroutine\u7684\u8d77\u59cb\u5730\u5740\u3002(Loads PC, overwriting the incremented PC that was loaded during FETCH phase of the JSR(R) instruction.)2.\u5f80R7\u5185\u88c5\u5165JSR(R)\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740(Store the incremented PC into R7.)</p> <p>We call the address we come back to the return linkage. </p> </li> <li> <p>JMP R7\uff1a\u662fsubroutine\u7684\u6700\u540e\u4e00\u4e2a\u6307\u4ee4</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#812_jsrr","title":"8.1.2 JSR(R)","text":"<p>opcode: 0100    Bit[11]: addressing mode \u2013 1 PC-relative 0 Base+offset</p> <ul> <li> <p>JSR\u548cBR\u7c7b\u4f3c\uff0c\u53ea\u662f\u670911\u4f4d\u6765\u8ba1\u7b97\u504f\u79fbPC\u7684\u5730\u5740\uff0c\u80fd\u5230\u8fbe\u66f4\u8fdc\u7684\u5730\u5740</p> </li> <li> <p></p> </li> <li> <p>JSRR\u548cJMP\u7c7b\u4f3c\uff0c\u4ece\u4e00\u4e2a\u57fa\u51c6\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\u5730\u5740\uff0c\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u65b9\u7684\u8df3\u8f6c</p> </li> <li> <p></p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#813_saving_and_restoring_registers","title":"8.1.3 Saving and Restoring Registers","text":"<ul> <li> <p>**\u4e3a\u4ec0\u4e48\u8981\u4fdd\u5b58\uff1f**1.\u4e3a\u4e86\u9632\u6b62CALLER\u5199\u5165\u5bc4\u5b58\u5668\u7684\u6570\u636e\u88absubroutine\u6267\u884c\u8fc7\u7a0b\u4e2d\u65b0\u5199\u5165\u7684\u6570\u636e\u8986\u76d6\uff0c\u6211\u4eec\u9700\u8981\u5728subroutine\u7684\u7b2c\u4e00\u90e8\u5206\u5b58\u50a8registers\u4e2d\u7684\u6570\u636e\u5230memory\u4e2d\uff0c\u5bf9\u5e94\u5230SaveR1\uff0cSaveR2\uff0cSaveR3\u30022.\u6211\u4eec\u8c03\u7528\u9012\u5f52\u51fd\u6570\u65f6\u5bc4\u5b58\u5668\u7edd\u5bf9\u4e0d\u80fd\u590d\u7528\uff0c\u8c03\u7528\u524d\u6216\u8c03\u7528\u65f6\u4fdd\u5b58\u3002</p> </li> <li> <p>**\u4ec0\u4e48\u65f6\u5019\u4fdd\u5b58\uff1f**\u8c03\u53d6\u5b50\u8fdb\u7a0b\u524d\u6216\u8c03\u7528\u65f6\u4fdd\u5b58\u3002\u5728\u8fd4\u56de\u6e90\u7a0b\u5e8f\u524d\uff0c\u8fd4\u8fd8\u8fd9\u4e9b\u6570\u636e\u56deReg\u3002</p> </li> </ul> <p>We call this technique callee save because the subroutine (i.e., the callee) saves and restores the registers.</p> <p>\u8fd9\u4e2a\u64cd\u4f5c\u9700\u8981subroutine\u6765\u5b9e\u73b0\uff0c\u56e0\u4e3asubroutine\u77e5\u9053\u5b83\u9700\u8981\u7528\u5230\u54ea\u4e9bREG\u3002</p> <p>\u4f46\u662f\u5bf9\u4e8eR7\u6765\u8bf4\uff0c\u9700\u8981CALLER\u6765\u5b58\u50a8\uff0c\u56e0\u4e3aR7\u7684\u5185\u5bb9\u4f1a\u5728\u6267\u884cJMP START\u65f6\u88ab\u6bc1\u574f\u3002</p> <p>We call this caller save because the calling program saves and restores the register value.</p> <ul> <li>How to decide to use which save?</li> </ul> <p>The one who knows the register will be \u201cpolluted\u201d or overwritten should save the values.</p>"},{"location":"ClassNotes/ICS/ICS/#814_library_routines","title":"8.1.4 Library Routines","text":"<p>They are legitimately advertised as productivity enhancers since they allow the application programmer to use them without having to know or learn much of their inner details.</p>"},{"location":"ClassNotes/ICS/ICS/#82_the_stack","title":"8.2 The Stack","text":""},{"location":"ClassNotes/ICS/ICS/#821_an_abstract_data_type","title":"8.2.1 An Abstract Data Type","text":"<p>An abstract data type is a storage mechanism that is defined by the operations performed on it and not at all by the specific manner in which it is implemented.</p> <p>The concept of a stack is the specification of how it is to be accessed. </p> <p>That is, the defining notion of a stack is that the last thing you stored in the stack is the first thing you remove from it.  </p> <p>Simply put: Last In, First Out, or LIFO.</p> <p>We say we push an element onto the stack when we insert it. We say we pop an element from the stack when we remove it.</p> <p>A distinguishing feature of the stack of Figure 8.8 is that, like the quarters in the coin holder, as each value is added or removed, all the other values already on the stack move.</p> <p>Two Examples\uff1athe coin holder, the hardware datas</p> <ul> <li>One modle</li> <li></li> <li>each value is added or removed, all the other values already on the stack move.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#implementation_in_memory","title":"Implementation in Memory","text":"<ul> <li>This stack consists of a sequence of memory locations along with a mechanism, called the stack pointer, which keeps track of the top of the stack. We use R6 to contain the address of the top of the stack. That is, in the LC-3, R6 is the stack pointer.</li> </ul> <p>Note that the values inserted into the stack are stored in memory loca- tions having decreasing addresses. We say the stack grows toward zero. </p> <p>when values are pushed and popped to and from a stack implemented in sequential memory locations, the data already stored on the stack does not physically move.(\u6700\u540e\u4e00\u5f20\u56fe\u4e2dpop\u4e86\u5934\u4e24\u4e2a\u5143\u7d20\uff0c\u4f46\u662f\u6570\u503c\u4ecd\u7136\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u867d\u7136\u4e0d\u80fd\u88ab\u8bbf\u95eeif we obey the rules) </p> <p>The fancy name for \u201cthe rules\u201d is the stack protocol.</p>"},{"location":"ClassNotes/ICS/ICS/#push","title":"Push","text":"<p>Push We push a value onto the stack by executing the two-instruction sequence</p> <pre><code>PUSH ADD R6,R6,#-1\n     STR R0,R6,#0 ; \u5148\u628a\u6570\u636e\u5b58\u5728R0\u4e2d\n</code></pre> <p>That is, to push a value onto the stack, we first load that value into R0. Then we decrement R6, which contained the previous top of the stack. Then we execute STR R0,R6,#0, which stores the contents of R0 into the memory location whose address is in R6.</p>"},{"location":"ClassNotes/ICS/ICS/#pop","title":"Pop","text":"<p>Pop To pop a value from the stack, the value is read and the stack pointer is incremented. The following two-instruction sequence</p> <pre><code>POP         LDR   R0,R6,#0\n            ADD   R6,R6,#1\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#underflow","title":"Underflow","text":"<p>Attempting to pop items that have not been previously pushed results in an underflow situation. </p> <p></p> <p>\u7528R5\u6765\u5b58\u50a8underflow information\u3002\u5982\u679cR5\u5185\u7684\u6570\u636e\u9700\u8981\u4fdd\u62a4\uff0c\u8981\u5728JSR\u4e4b\u524d caller save</p> <p>The Pop Routine</p> <pre><code>POP      AND     R5,R5,#0\n         LD      R1,EMPTY\n         ADD     R2,R6,R1\n         BRz     Failure \n         LDR     R0,R6,#0 \n         ADD     R6,R6,#1 \n         RET\nFailure  ADD     R5,R5,#1 \n         RET\nEMPTY    .FILL   xC000 ; EMPTY &lt;-- -x4000\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#overflow","title":"Overflow","text":"<p>Since we cannot store values where there is no space, we have an overflow situation.(\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u7ed9\u6570\u636e\u5b58\u50a8)</p> <pre><code>PUSH       AND     R5,R5,#0\n           LD      R1,MAX\n           ADD R2,R6,R1 BRz \n           ADD R6,R6,#-1 \n           STR R0,R6,#0 \n           RET\nFailure    ADD R5,R5,#1 RET\nMAX        .FILL   xC005 ; MAX &lt;-- -x3FFB\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#83_recursion","title":"8.3 Recursion","text":"<p>Recursion is a mechanism for expressing a function in terms of itself. </p> <p>\u201c\u5c3e\u90e8\u9012\u5f52\u201d\u53ef\u4ee5\u4f7f\u7528\u201c\u8fed\u4ee3\u201d\u6765\u66ff\u6362\u3002 \u5b66\u8fc7\u6570\u636e\u7ed3\u6784\u4e4b\u540e\uff0c\u5bf9\u8fd9\u4e2a\u5e94\u8be5\u4e0d\u964c\u751f\u3002</p> <p>\u9012\u5f52\u7684\u4f18\u70b9\u5728\u4e8e\u6613\u4e8e\u7406\u89e3\uff1b\u8fed\u4ee3\u7684\u4f18\u70b9\u5728\u4e8e\u6548\u7387\u9ad8\u3002\u5982\u4f55\u9009\u62e9\u53d6\u51b3\u4e8e\u4f60\u5728\u201c\u6613\u4e8e\u7406\u89e3\u201d\u548c\u201c\u6548\u7387\u201d\u4e2d\u5982\u4f55\u4f5c\u51fa\u6743\u8861\u3002</p> <p>\u9012\u5f52\u51fd\u6570\u8c03\u7528\u6d89\u53ca\u4e00\u4e9b\u8fd0\u884c\u65f6\u5f00\u9500\uff0c\u5305\u62ec\u53c2\u6570\u5fc5\u987b\u538b\u5230\u5806\u6808\u4e2d\u3001\u4e3a\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u5185\u5b58\u3001\u5bc4\u5b58\u5668\u7684\u503c\u5fc5\u987b\u4fdd\u5b58\u7b49\u7b49\uff0c\u5e76\u4e14\u5728\u6bcf\u6b21\u8c03\u7528\u8fd4\u56de\u65f6\uff0c\u4e0a\u8ff0\u4fdd\u5b58\u64cd\u4f5c\u5fc5\u987b\u8fd8\u539f\uff0c\u6062\u590d\u6210\u8c03\u7528\u524d\u7684\u6837\u5b50\u3002\u8fed\u4ee3\u7684\u5b9e\u73b0\u65b9\u5f0f\u5f00\u9500\u663e\u7136\u8981\u5c0f\u3002\u6240\u4ee5\u5728\u53ef\u7406\u89e3\u6027\u76f8\u5dee\u4e0d\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6548\u7387\u5e94\u8be5\u4f18\u5148\u9009\u62e9\u8fed\u4ee3\u3002</p>"},{"location":"ClassNotes/ICS/ICS/#831_bad_example_number_1_factorial","title":"8.3.1 Bad Example Number 1: Factorial","text":"<p>Every recursive subroutine must have such an initial test to see if we should execute the recursive call. </p> <p></p> <p>\u4e0d\u80fd\u6b63\u5e38\u5b9e\u73b0\uff01\u56e0\u4e3aR7\u5728\u5d4c\u5957\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u88ab\u4e0d\u65ad\u8986\u76d6\uff01</p> <p>We can solve this problem by pushing the address A+1 onto a stack before executing JSR FACT at address B. After we subsequently return to address B+1, we can then pop the stack and load the address A+1 into R7 before we execute the instruction RET back to the main program.</p> <p></p> <p>\u8fd8\u662f\u4e0d\u80fd\u5b9e\u73b0\uff0c\u56e0\u4e3aR1\u91cc\u6682\u5b58\u7684n\u503c\u4e5f\u4f1a\u4e0d\u65ad\u88ab\u6539\u5199\uff0c\u5176\u5b9e\u672c\u8d28\u4e0a\u662fSaveR1\u91cc\u9762\u7684\u503c\u88ab\u4e0d\u65ad\u6539\u5199\u3002</p> <p>We can solve this problem with a stack also. That is, instead of moving the value n to R1 before loading n-1 into R0, we push n onto the stack and then pop it when we need it after returning from the subroutine with (n-1)! in R0.</p> <p></p> <p></p> <p>\u662f\u5426\u53ef\u4ee5\u8282\u7701\u4e00\u6b21\u538b\u6808\uff1fPush n\u548cPush R1\u4e0d\u662f\u91cd\u590d\u4e86\u5417\uff1f</p>"},{"location":"ClassNotes/ICS/ICS/#812_fibonaccian_even_worse_example","title":"8.1.2 Fibonacci(An Even Worse Example)","text":"<p>\u5bf9\u4e8e\u6c42\u9636\u4e58\u548c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u6765\u8bf4\uff0c\u9012\u5f52\u90fd\u6bd4\u5faa\u73af\u7b97\u6cd5\u9ebb\u70e6</p>"},{"location":"ClassNotes/ICS/ICS/#813_a_mazegood_example","title":"8.1.3 A Maze(Good example)","text":"<p>The words are stored in what we call row major order; that is, row 1 is stored, then row 2, then row 3, etc.</p> <p></p> <p><code>BREADCRUMB</code> \u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u904d\u5386\u67d0\u4e00\u4e2a\u683c\u5b50\u5f62\u6210\u6b7b\u5faa\u73af</p>"},{"location":"ClassNotes/ICS/ICS/#84_the_queue","title":"8.4 The Queue","text":"<p>The defining property of the abstract data type queue is FIFO. FIFO stands for \u201cFirst in First out.\u201d</p> <p>We need to keep track of two ends of the storage structure: a FRONT pointer for servicing (i.e., removing elements from the front of the queue) and a REAR pointer for entering (i.e., inserting into the rear of the queue).</p> <p>We arbitrarily assign the FRONT pointer to the location just before the first element of the queue. (\u5934\u6307\u9488\u6307\u7684\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u5730\u5740)</p> <p>We assign the REAR pointer to the location containing the most recent element that was added to the queue.</p>"},{"location":"ClassNotes/ICS/ICS/#841_the_basic_operations_remove_from_front_insert_at_rear","title":"8.4.1 The Basic Operations: Remove from Front, Insert at Rear","text":"<p>Remove</p> <pre><code>ADD   R3,R3,#1\nLDR   R0,R3,#0\n</code></pre> <p>Insert</p> <pre><code>ADD   R4,R4,#1\nSTR   R0,R4,#0\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#842_wrap-around","title":"8.4.2 Wrap-Around","text":"<p>\u5faa\u73af\u961f\u5217\uff1f</p>"},{"location":"ClassNotes/ICS/ICS/#remove","title":"Remove","text":""},{"location":"ClassNotes/ICS/ICS/#load","title":"Load","text":""},{"location":"ClassNotes/ICS/ICS/#843_how_many_elements_can_we_store_in_a_queue","title":"8.4.3 How Many Elements Can We Store in a Queue?","text":"<p>That is, if inserting an nth element into the queue would cause FRONT to equal REAR, we do not allow that insertion. We declare the queue full when there are n-1 elements in the queue.</p> <p>\u5982\u679c\u5b58\u6ee1n\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u6ee1\u961f\u5217\u548c\u7a7a\u961f\u5217\u7684\u60c5\u5f62\u662f\u4e00\u6837\u7684\uff0c\u5373\uff0cFRONT\u548cREAR\u6307\u5728\u540c\u4e00\u4e2a\u5185\u5b58\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u4ec5\u5141\u8bb8\u5b58n-1\u4e2a\u5143\u7d20\u5728n\u4e2a\u5730\u5740\u5185\u3002\u4e0d\u5141\u8bb8\u51fa\u73b0REAR\u548cFRONT\u76f8\u7b49\u7684\u60c5\u5f62\u3002</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#844_tests_for_underflow_overflow","title":"8.4.4 Tests for Underflow, Overflow","text":"<p>If the queue is empty and we try to remove an element, we have an underflow condition. </p> <p>If the queue is full and we try to insert an element, we have an overflow condition.</p> <p>\u6211\u4eec\u4f9d\u7136\u7528R5\u6765\u5b58\u50a8\u662f\u5426\u6210\u529f\uff0c\u53ea\u8981\u68c0\u6d4bR3 \u662f\u5426\u7b49\u4e8e R4</p> <ul> <li>if FRONT = REAR, the queue is empty</li> <li>if FRONT = REAT + 1, the queue will overflow</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#85_character_strings","title":"8.5 Character Strings","text":"<p>A sequence of keyboard characters (letters, digits, and other symbols) is organized as a one-dimensional array of ASCII codes, usually representing a person\u2019s name, address, or some other alphanumeric string. </p> <ul> <li>A common use of a character string is to identify a body of information associated with a particular person. </li> <li>**A Character String Representing an \u201cInteger.\u201d**\u9700\u8981\u5224\u65ad\u662f\u5426\u6bcf\u4e2a\u5b57\u7b26\u90fd\u662f\u4e00\u4e2adecimal digit</li> </ul> <p></p> <pre><code>; Input: R0 contains the starting address of the character string ; Output: R5=0, success; R5=1, failure.\n;\nTEST_INTEGER ST R1,SaveR1 ; Save registers needed by subroutine ST R2,SaveR2\n             ST R3,SaveR3\n             ST R4,SaveR4\n             AND  R5,R5,#0   ; Initialize success code to R5=0, success\n             LD   R2,ASCII_0 ; R2=xFFD0, the negative of ASCII code x30\n             LD   R3,ASCII_9 ; R3=xFFC7, the negative of ASCII code x39\n;\nNEXT_CHAR    LDR  R1,R0,#0 ; Load next char\n             BRz  SUCCESS   ;\u8fd9\u4e00\u6b65\uff01\uff01\u8bb0\u5f97\u6bcf\u6b21Load\u540e\u8981\u901a\u8fc7BRz\u5224\u65ad\u662f\u5426\u8bfb\u5b8c\u3002\n             ADD  R4,R1,R2\n             BRn  BAD\n             ADD  R4,R1,R3\n             BRp  BAD\n             ADD  R0,R0,#1\n             BR   NEXT_CHAR\n;\nBAD          ADD R5,R5,#1 \nSUCCESS      LD R4,SaveR4 \n             LD R3,SaveR3 \n             LD R2,SaveR2 \n             LD R1,SaveR1 \n             RET\n\nASCII_0         .FILL xFFD0\nASCII_9         .FILL xFFc7\nSaveR1          .BLKW 1\nSaveR2          .BLKW 1\nSaveR3          .BLKW 1\nSaveR4          .BLKW 1\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#pointer","title":"Pointer","text":"<p>Recall that R5, the base pointer, points to the first declared local variable, or object in this case.</p> <pre><code>AND R0, R0, #0 ; Clear R0\nADD R0, R0, #4 ;R0=4\nSTR R0, R5, #0 ; object = 4\nADD R0, R5, #0  ; Generate memory address of object\nSTR R0, R5, #-1 ;Ptr = &amp;object\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#chapter_9_io","title":"Chapter 9 I/O","text":""},{"location":"ClassNotes/ICS/ICS/#91_privilege_priority_and_the_memory_address_space","title":"9.1 Privilege, Priority, and the Memory Address Space","text":""},{"location":"ClassNotes/ICS/ICS/#911_privilege_and_priority","title":"9.1.1 Privilege and Priority","text":""},{"location":"ClassNotes/ICS/ICS/#9111_privilege","title":"9.1.1.1 Privilege","text":"<p>Privilege is all about the right to do something, such as execute a particular instruction or access a particular memory location.</p> <ul> <li>\u6211\u4eec\u4e0d\u60f3\u8ba9\u4efb\u610f\u7a0b\u5e8f\u90fd\u80fd\u6267\u884cHALT\u6307\u4ee4\u6765\u505c\u673a\uff0c\u4e5f\u4e0d\u5e0c\u671b\u4efb\u610f\u7684\u7a0b\u5e8f\u90fd\u80fd\u5e72\u6270\u5df2\u6709\u7684\u6570\u636e\u7ed3\u6784\u6216\u8005\u4ee3\u7801\u3002\u6240\u4ee5\u4e0d\u662f\u6240\u6709\u7a0b\u5e8f\u90fd\u80fd\u591f\u6709\u6743\u5229\u6765\u6267\u884c\u6240\u6709\u7684\u6307\u4ee4\uff0c\u4e5f\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u6709\u6743\u5229\u8bbf\u95ee\u6240\u6709\u7684\u5185\u5b58\u3002   Not all computer programs have the right to execute all instructions.    Similarly, some memory locations are only available to the operating system. </li> <li>We designate every computer program as either privileged or unprivileged. We often say supervisor privilege to indicate privileged. </li> <li>We say a program is executing in Supervisor mode to indicate privileged, or User mode to indicate unprivileged.</li> <li>Access Control Violation (ACV) exception An ACV exception occurs if a process attempts to access a location in privileged memory (either a location in system space or a device register having an address from xFE00 to xFFFF) while operating in User mode. </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9112_priority","title":"9.1.1.2 Priority","text":"<p>Priority is all about the urgency of a program to execute. Every program is assigned a priority, specifying its urgency as compared to all other programs. This allows programs of greater urgency to interrupt programs of lesser urgency.</p> <p>random program may be assigned a priority of 0. Keyboard may be assigned a priority of 4.</p>"},{"location":"ClassNotes/ICS/ICS/#9113_two_orthogonal_notions","title":"9.1.1.3 Two Orthogonal Notions","text":""},{"location":"ClassNotes/ICS/ICS/#9114_the_processor_status_register_psr","title":"9.1.1.4 The Processor Status Register (PSR)","text":"<p>The other register, the Processor Status Register (PSR), is shown in Figure 9.1. It contains the privilege and priority assigned to that program.</p> <p>PSR[15] = 0 supervisor privilege PSR[15] = 1 unprivilieged</p> <p>PLR[10:8] priority level PL0[low]~PL7[high]</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#912_organization_of_memory","title":"9.1.2 Organization of Memory","text":""},{"location":"ClassNotes/ICS/ICS/#system_space","title":"System Space","text":"<p>Locations x0000 to x2FFF are privileged memory locations. They contain the various data structures and code of the operating system. They require supervisor privilege to access. They are referred to as system space.</p>"},{"location":"ClassNotes/ICS/ICS/#user_space","title":"User Space","text":"<p>Locations x3000 to xFDFF are unprivileged memory locations. Supervisor privilege is not required to access these memory locations. All user programs and data use this region of memory.</p>"},{"location":"ClassNotes/ICS/ICS/#io_page","title":"I/O page","text":"<p>Addresses xFE00 to xFFFF are used to identify registers that take part in input and output functions and some special registers associated with the processor.</p> <ul> <li>PSR\u2013xFFFC,</li> <li>processor\u2019s Master Control Register(MCR)\u2013xFFFE</li> </ul> <p>Access to those registers requires supervisor privilege.</p> <p></p> <ul> <li>two stacks(\u4f4d\u7f6e\u662f\u600e\u4e48\u89c4\u5b9a\u7684\uff1f)</li> <li>a supervisor stack in system space. It is controlled by the operating system and requires supervisor privilege to access.(x0000~x2FFF)</li> <li> <p>a user stack in user space. The user stack is controlled by the user program and does not require privilege to access.(x3000~xFDFF)</p> </li> <li> <p>Each has a stack pointer, Supervisor Stack Pointer (SSP) and User Stack Pointer (USP), to indicate the top of the stack. </p> </li> <li>Since a program can only execute in Supervisor mode or User mode at any one time, only one of the two stacks is active at any one time. </li> <li>Register 6 is generally used as the stack pointer (SP) for the active stack. Two registers, Saved_SSP and Saved_USP, are provided to save the SP not in use. </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#92_inputoutput","title":"9.2 Input/Output","text":"<p>Even the simplest I/O devices usually need at least two registers: one to hold the data being transferred between the device and the computer, and one to indicate status information about the device. An example of status information is whether the device is available or is it still busy processing the most recent I/O task.</p>"},{"location":"ClassNotes/ICS/ICS/#921_some_basic_characteristics_of_io","title":"9.2.1 Some Basic Characteristics of I/O","text":""},{"location":"ClassNotes/ICS/ICS/#9211_memory-mapped_io_vs_special_io_instructions","title":"9.2.1.1 Memory-Mapped I/O vs. Special I/O Instructions","text":"<ul> <li>Some computers use special input and output instructions. </li> </ul> <p>The 12-bit PDP-8 instruction contained a three-bit opcode. If the opcode was 110, an I/O instruction was indicated. The remaining nine bits of the PDP-8 instruction identified which I/O device register and what operation was to be performed.</p> <ul> <li>Most computers prefer to use the same data movement instructions that are used to move data in and out of memory.</li> </ul> <p>The original PDP-11 ISA had a 16-bit address space. All addresses wherein bits [15:13] = 111 were allocated to I/O device registers. That is, of the 216 addresses, only 57,344 corresponded to memory locations. The remaining 213 were memory-mapped I/O addresses.</p> <ul> <li> <p>\u56e0\u4e3a\u4f7f\u7528\u76f8\u540c\u7684data movement\u6307\u4ee4\uff0c\u6240\u4ee5\u8f93\u5165\u8f93\u51fa\u8bbe\u5907\u7684\u5bc4\u5b58\u5668\u4e5f\u8981\u50cf\u5185\u5b58\u4e00\u6837\u6709\u72ec\u4e00\u65e0\u4e8c\u7684\u5b9a\u4f4d\u3002\u56e0\u6b64\uff0c\u6bcf\u4e2a\u8bbe\u5907\u5bc4\u5b58\u5668\u90fd\u4f1a\u6709\u4e00\u4e2a\u6765\u81ea\u5185\u5b58\u7684\u5730\u5740\u3002</p> </li> <li> <p>That is, the I/O device registers are mapped to a set of addresses that are allocated to I/O device registers rather than to memory locations. Hence the name memory-mapped I/O.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9212_asynchronous_vs_synchronous","title":"9.2.1.2 Asynchronous vs. Synchronous","text":"<ul> <li> <p>\u4eba\u7c7b\u6253\u5b57\u7684\u901f\u5ea6\u8ddf\u4e0d\u4e0a\u8ba1\u7b97\u673a\u7684Clock Cycle\u3002\u5373\u4f7f\u8bbe\u7f6e\u4e86\u56fa\u5b9a\u7684\u6162\u901f\uff0c\u6253\u5b57\u901f\u5ea6\u4e5f\u4f1a\u56e0\u4e3a\u65f6\u95f4\u800c\u53d8\u5316\u3002\u6240\u4ee5\u90fd\u662f\u884c\u4e0d\u901a\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4eba\u7c7b\u6253\u5b57\u548c\u7535\u8111\u65f6asynchronous\u7684\u3002</p> </li> <li> <p>The point is that I/O devices usually operate at speeds very different from that of a microprocessor, and not in lockstep. We call this characteristic asynchronous.</p> </li> <li> <p>To control processing in an asynchronous world requires some protocol or handshaking mechanism.</p> </li> </ul> <ul> <li>In the case of the keyboard, we will need a one-bit status register, called a flag, to indicate if someone has or has not typed a character. </li> <li>In the case of the monitor, we will need a one-bit status register to indicate whether or not the most recent character sent to the monitor has been displayed, and so the monitor can be given another character to display.</li> <li>These flags are the simplest form of synchronization.</li> </ul> <ul> <li>A single flag, called the ready bit\uff08\u8f93\u5165\u65f6\u7f6e1\uff0c\u7535\u8111\u8bfb\u53d6\u65f6\u7f6e0\uff09</li> <li>\u4f46\u662f\u5982\u679c\u4eba\u7c7b\u7684\u8f93\u5165\u80fd\u56fa\u5b9a\u5728\u4e00\u4e2a\u7cbe\u786e\u7684\u95f4\u9694\uff0c\u6bd4\u5982200million\u4e2a\u65f6\u949f\u5468\u671f\uff0c\u90a3\u4e48\u4eba\u548c\u7535\u8111\u5c31\u662f\u540c\u6b65\u7684\uff08synchronous\uff09</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9213_interrupt-driven_vs_polling","title":"9.2.1.3 Interrupt-Driven vs. Polling","text":"<ul> <li>This is called interrupt-driven I/O, where the keyboard controls the interaction. </li> <li>Or, does the processor control the interaction, specifically by interrogating (usually, again and again) the ready bit until it (the processor) detects that the ready bit is set. At that point, the processor knows it is time to read the device register. </li> </ul> <p>\u4e2d\u65ad\u9a71\u52a8\u5c31\u662f\u5c06CPU\u4ece\u7e41\u5fd9\u7b49\u5f85\u7684\u7e41\u7410\u4e2d\u89e3\u8131\u51fa\u6765\u3002\u5728\u53d1\u9001\u5b8c\u4e00\u4e2a\u6216\u4e00\u6279\u6570\u636e\u540e\uff0cCPU\u5c31\u53bb\u5fd9\u522b\u7684\u4e8b\u60c5\u3002I/O\u8bbe\u5907\u5904\u7406\u5b8c\u8fd9\u6279\u6570\u636e\u540e\uff0c\u5411CPU\u53d1\u51fa\u4e2d\u65ad\u3002CPU\u54cd\u5e94\u4e2d\u65ad\u540e\u518d\u53d1\u9001\u4e0b\u4e00\u6279\u6570\u636e\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4e2d\u65ad\u9a71\u52a8I/O\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <p>1\uff09CPU\u521d\u59cb\u5316I/O\u5e76\u542f\u52a8\u7b2c\u4e00\u6b21I/O\u64cd\u4f5c\u3002 2\uff09CPU\u53bb\u5fd9\u522b\u7684\u4e8b\u60c5\u3002 3\uff09\u5f53I/O\u5b8c\u6210\u65f6\uff0cCPU\u5c06\u88ab\u4e2d\u65ad\u3002 4\uff09CPU\u5904\u7406\u4e2d\u65ad\u3002 5\uff09CPU\u6062\u590d\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u3002</p> <p></p>"},{"location":"ClassNotes/ICS/ICS/#922_input_from_the_keyboard","title":"9.2.2 Input from the Keyboard","text":""},{"location":"ClassNotes/ICS/ICS/#9221_basic_input_registers_kbdr_and_kbsr","title":"9.2.2.1 Basic Input Registers (KBDR and KBSR)","text":"<ul> <li>\u5904\u7406\u8f93\u5165\u9700\u8981\u4e24\u6837\u4e1c\u897f\uff1a1.\u6570\u636e\u5bc4\u5b58\u5668 2.\u4e00\u79cd\u540c\u6b65\u5316\u673a\u5236\u6765\u4f7f\u5904\u7406\u5668\u77e5\u9053\u6709\u8f93\u5165\u53d1\u751f</li> </ul> <ul> <li>In the case of KBDR, bits [7:0] are used for the data, and bits [15:8] contain x00. In the case of KBSR, bit [15] contains the synchronization mechanism, that is, the ready bit.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9222_the_basic_input_service_routine","title":"9.2.2.2 The Basic Input Service Routine","text":"<pre><code>START   LDI R1, A \n        BRzp START ; poll the ready bit\n        LDI R0, B \n        BRnzp NEXT_TASK \nA       .FILL xFE00 ;the memory-mapped address of KBSR\nB       .FILL xFE02 ; KBDR\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#9223_implementation_of_memory-mapped_input","title":"9.2.2.3 Implementation of Memory-Mapped Input","text":"<p>the EXECUTE phase</p> <ol> <li>MAR is loaded with address of a device register</li> <li>The address control logic selects the the corresponding device register to provide input to the MDR</li> <li>The destination register is loaded with the contents of MDR</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#923_output_to_the_monitor","title":"9.2.3 Output to the Monitor","text":""},{"location":"ClassNotes/ICS/ICS/#9231_basic_output_registers_ddr_and_dsr","title":"9.2.3.1 Basic Output Registers (DDR and DSR)","text":"<ul> <li>In the case of DDR, bits [7:0] are used for data, and bits [15:8] contain x00. In the case of DSR, bit [15] contains the synchronization mechanism, that is, the ready bit. </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9232_the_basic_output_service_routine","title":"9.2.3.2 The Basic Output Service Routine","text":"<pre><code>START   LDI R1, A\n        BRzp START\n        STI R0, B\n        BRnzp NEXT_TASK\nA       .FILL xFE04 ; DSR\nB       .FILL xFE06 ; DDR\n</code></pre> <ul> <li>Note the use of LDI and the indirect access to xFE04, the memory-mapped address of DSR.</li> <li>Note the use of the STI instruction, which stores R0 into xFE06, the memory-mapped address of DDR. </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9233_implementation_of_memory-mapped_output","title":"9.2.3.3 Implementation of Memory-Mapped Output","text":"<ol> <li>MAR is loaded with the address of a device register (through indirect addressing mode)</li> <li>The address control logic asserts the load enable signal of DDR</li> <li>DDR is written</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#9234_example_keyboard_echo","title":"9.2.3.4 Example: Keyboard Echo","text":"<pre><code>START   LDI R1, KBSR \n        BRzp START ; poll the redit bit\n        LDI R0, KBDR\nECHO    LDI R1, DSR\n        BRzp ECHO\n        STI R0, DDR\n        BRnzp NEXT_TASK \nKBSR    .FILL xFE00\nKBDR    .FILL xFE02\nDSR     .FILL xFE04\nDDR     .FILL xFE06\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#924_a_more_sophisticated_input_routine","title":"9.2.4 A More Sophisticated Input Routine","text":"<pre><code>        LD R2, Newline\nL1      LDI R3, DSR\n        BRzp L1\n        STI R2, DDR\n        LEA R1, Prompt\nLOOP    LDR R0, R1, #0\n        BRz Input\nL2      LDI R2, DSR\n        BRzp L2\n        STI R0, DDR\n        ADD R1, R1, #1\n        BRnzp LOOP\nInput   LDI R3, KBSR\n        BRzp Input\n        LDI R0, KBDR\nL3      LDI R3, DSR\n        BRzp L3\n        STI R0, DDR\nL4      LDI R3, DSR\n        BRzp L4\n        STI R2, DDR\nDSR     .FILL xFE04\nDDR     .FILL xFE06\nKBSR    .FILL xFE00\nKBDR    .FILL xFE02\nNewline .FILL x000A\nPrompt  .STRINGZ \"Input a character &gt;\"\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#925_implementation_of_memory-mapped_io_revisited","title":"9.2.5 Implementation of Memory-Mapped I/O, Revisited","text":"<p>We have also learned that in order to support interrupt-driven I/O, the two status registers must be writeable as well as readable.</p> <p></p> <ul> <li>The Address Control Logic Block controls the input or output operation.</li> <li><code>MIO.EN</code> indicates whether a data movement from/to memory or I/O is to take place this clock cycle.</li> <li><code>MAR</code> contains the address of the memory location or the memory-mapped address of an I/O device register.</li> <li><code>R.W</code> indicates whether a load or a store is to take place.</li> <li>Depending on the values of these three inputs, the <code>address control logic</code> does nothing (MIO.EN = 0), or it provides the control signals to direct the transfer of data between the MDR and the memory or between the MDR and one of the I/O registers.</li> <li>If <code>R.W</code> indicates a load, the transfer is from memory or I/O device to the MDR. The Address Control Logic Block provides the select lines to INMUX to source the appropriate I/O device register or memory (depending on MAR) and also enables the memory if MAR contains the address of a memory location.</li> <li>If <code>R.W</code> indicates a store, the contents of the MDR is written either to memory or to one of the device registers. The address control logic either enables a write to memory or asserts the load enable line of the device register specified by the contents of the MAR.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#93_operating_system_service_routines_lc-3_trap_routines","title":"9.3 Operating System Service Routines (LC-3 Trap Routines)","text":""},{"location":"ClassNotes/ICS/ICS/#931_introduction","title":"9.3.1 Introduction","text":"<ul> <li>The TRAP instruction \u53ef\u4ee5\u7b80\u5316I/O\u7684\u64cd\u4f5c</li> <li>device registers\u4e0d\u80fd\u88abuser programs\u6539\u53d8\uff0c\u56e0\u4e3a\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u4f1a\u9020\u6210\u6df7\u4e71\uff0c\u6240\u4ee5\u8fd9\u4e00\u5757\u5185\u5b58\u4ec5\u6709supervisor priority\u53ef\u4ee5\u8bbf\u95ee\u3002</li> </ul> <p>We usually refer to the request made by the user program as a system call or a service call.</p>"},{"location":"ClassNotes/ICS/ICS/#932_the_trap_mechanism","title":"9.3.2 The Trap Mechanism","text":"<p>The trap mechanism involves several elements:</p> <ul> <li> <ol> <li>A set of service routines </li> </ol> </li> <li> <p>A table of the start addresses</p> <p>This table is stored in memory locations x0000 to x00FF. </p> <p>one Character output service routine (memory location x4020), stored in x0021</p> <p>one keyboard input service routine(x40A0),stored in x0023</p> <p>one machine halt service routine(x5020), stored in x0025</p> <p></p> </li> <li> <p>The TRAP instruction</p> </li> <li> <p>A linkage back to the user program</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#933_the_trap_instruction","title":"9.3.3 The TRAP Instruction","text":"<p>(1) changing the PC to the starting address of the relevant service routine on the basis of its trap vector, and (2) providing a way to get back to the program that executed the TRAP instruction.</p> <ul> <li> <p>The EXECUTE phase of the TRAP instruction</p> </li> <li> <p>The PSR and PC are both pushed onto the system stack.(PC\u5df2\u7ecf\u81ea\u52a0\uff0c\u4f1a\u81ea\u52a8\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4)Note that the program requesting the trap service routine can be running either in Supervisor mode or in User mode. If in User mode, R6, the stack pointer, is pointing to the user stack. Before the PSR and PC can be pushed onto the system stack, the current contents of R6 must be stored in Saved_USP, and the contents of Saved SSP loaded into R6.</p> </li> <li>PSR[15] is set to 0. PSR[10:8] are left unchanged since the priority of the TRAP routine is the same as the priority of the program that requested it.</li> <li>The 8-bit trap vector is zero-extended to 16bits to form an address that corresponds to a location in the Trap Vector Table.(PC is loaded with that address)</li> </ul> <p>\uff08\u5982\u679c\u5728USER Mode\uff09\u5148\u6539\u53d8SP\uff0c\u518dPSR\u5165\u6808\u3001PC\u5165\u6808\u3002\u66f4\u6539\u6743\u9650\u30020\u62d3\u5c55 Trap Vector\uff0c\u4ece\u5176\u5bf9\u5e94\u7684Memory location\u4e2d\u627e\u5230service routine\u7684\u6307\u4ee4\u5730\u5740\u3002</p>"},{"location":"ClassNotes/ICS/ICS/#934_the_rti_instruction_to_return_control_to_the_calling_program","title":"9.3.4 The RTI Instruction: To Return Control to the Calling Program","text":"<ul> <li>Return from TRAP of Interrupt(opcode = 1000, with no operands): pop the top two values on the system stack into the PC and PSR. (\u7528\u7cfb\u7edf\u6808\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88c5\u8f7d\u5230PC\u548cPSR\u91cc)</li> <li></li> <li>PC: Since the PC contains the address following the address of the TRAP instruction, control returns to the user program at the correct address.</li> <li>PSR: examine PSR[15], if in User mode, the stack pointers need to be adjusted to reflect that now back in User mode. loading the Saved_SSP with the current contents of R6, and loading the R6 with the contents of Saved_USP</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#935_a_summary_of_the_trap_service_routine_process","title":"9.3.5 A Summary of the Trap Service Routine Process","text":""},{"location":"ClassNotes/ICS/ICS/#936_trap_routines_for_handling_io","title":"9.3.6 Trap Routines for Handling I/O","text":"<p>Two changes:</p> <ol> <li>We add the appropriate .ORIG and .END pseudo-ops. .ORIG specifies the starting address of the input service routine\u2014the address found at location x0023 in the Trap Vector Table.</li> <li>We terminate the input service routine with the RTI instruction rather than the BR NEXT_TASK</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#937_a_trap_routine_for_halting_the_computer","title":"9.3.7 A Trap Routine for Halting the Computer","text":"<ul> <li>In the LC-3, the RUN latch is bit [15] of the Master Control Register (MCR), which is memory-mapped to location xFFFE. (HALT\u5c31\u662f\u8d1f\u8d23\u628aRUN latch\u7f6e0\u7684)</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#938_the_trap_routine_for_character_input_one_last_time","title":"9.3.8 The Trap Routine for Character Input (One Last Time)","text":""},{"location":"ClassNotes/ICS/ICS/#939_puts_writing_a_character_string_to_the_monitor","title":"9.3.9 PUTS: Writing a Character String to the Monitor","text":"<p>Thus, if a user program requires a character string to be written to the monitor, it need only provide (in R0) the starting address of the character string, and then invoke TRAP x22. In LC-3 assembly language this TRAP is called PUTS.</p>"},{"location":"ClassNotes/ICS/ICS/#94_interrupts_and_interrupt-_driven_io","title":"9.4 Interrupts and Interrupt- Driven I/O","text":"<p>I/O device can</p> <ol> <li>force the running program to stop</li> <li>have the processor execute a program that carries out the needs of the I/O device</li> <li>have the stopped program resume execution as if nothing had happened.</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#942_why_have_interrupt-driven_io","title":"9.4.2 Why Have Interrupt-Driven I/O?","text":"<p>As is undoubtedly clear, polling requires the processor to waste a lot of time spinning its wheels, re-executing again and again the LDI and BR instructions until the ready bit is set.</p> <p>\u4e00\u4e2a\u4f8b\u5b50\uff1a\u8f93\u5165100\u4e2a\u5b57\u7b26\u5e76\u5904\u7406\u9700\u8981\u82b1\u8d39\u7684\u65f6\u95f4.\uff080.125s \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u3002 12.49999s \u5904\u7406100\u4e2a\u5b57\u7b26\uff09</p> <ul> <li>\u8f6e\u8be2\uff1a\\(0.125*100 = 12.5\\) \\(12.5 + 12.49999 = 24.9999\\)</li> <li>\u4e2d\u65ad\u9a71\u52a8\uff1a\\(0.00001 * 100 + 12.49999 = 15\\)</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#943_two_parts_to_the_process","title":"9.4.3 Two Parts to the Process","text":"<ol> <li>the mechanism that enables an I/O device to interrupt the processor </li> <li>the mechanism that handles the interrupt request.</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#944_part_i_causing_the_interrupt_to_occur","title":"9.4.4 Part I: Causing the Interrupt to Occur","text":"<p>Several things must be true for an I/O device to actually interrupt the program that is running:</p> <ol> <li>The I/O device must want service.</li> <li>The device must have the right to request the service.</li> <li>The device request must be more urgent than what the processor is currently doing.</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#9441_the_interrupt_signal_from_the_device","title":"9.4.4.1 The Interrupt Signal from the Device","text":"<ul> <li> <p>**The Device Must Want Service**I/O device wants service when the corresponding ready bit is set.\uff08\u952e\u76d8\u4f1a\u5f53\u4e00\u4e2a\u5b57\u7b26\u6572\u51fb\u540ewant service\uff0c\u663e\u793a\u5668\u4f1a\u5f53\u4e0a\u4e00\u4e2a\u5b57\u7b26\u5904\u7406\u5b8c\u540ewant service\uff09</p> </li> <li> <p>The Device Must Have the Right to Request That Service</p> </li> </ul> <p>interrupt enable**(IE)** bit, which can be set or cleared by the processor (usually by the operating system), depending on whether or not the processor wants to give the I/O device the right to request service.</p> <p>is part of device status register</p> <ul> <li>The interrupt request signal from the I/O device is the logical AND of the IE bit and the ready bit</li> <li></li> <li>\u5982\u679cIE bit is clear\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u65e0\u6cd5interrupt\u5904\u7406\u5668\uff0c\u53ea\u80fd\u7b49\u5f85\u8f6e\u8be2</li> <li>\u5982\u679cIE bit is set\uff0c\u53ea\u8981ready bit\u88ab\u7f6e1\uff0c\u90a3\u4e48AND gate\u5c31\u88ab\u65ad\u8a00\uff0c\u5c31\u4f1a\u53d1\u51fainterrupt request</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9442_the_urgency_of_the_request","title":"9.4.4.2 The Urgency of the Request","text":"<p>Recall from Section 9.1.1.2 that each program runs at a specified level of urgency called its priority level. To interrupt the running program, the device must have a higher priority than the program that is currently running. </p> <p>The PL of a program is usually the same as the PL (i.e., urgency) of the request to run that program.\uff08\u5982\u679c\u4e00\u4e2a\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684\u8bf7\u6c42\u88ab\u53d1\u51fa\uff0c\u90a3\u4e48\u6b63\u5728\u8fd0\u884c\u7684\u4f4e\u7ea7\u4f18\u5148\u7ea7\u7a0b\u5e8f\u5c31\u4f1a\u4e2d\u65ad\uff0c\u6765\u628a\u7535\u8111\u7559\u7ed9\u5904\u7406\u9ad8\u9636\u7a0b\u5e8f\uff0c\u76f4\u5230\u6ee1\u8db3\u8fd9\u4e2a\u66f4\u7d27\u6025\u7684\u8bf7\u6c42\uff09</p> <ul> <li>a computer\u2019s payroll program may run overnight, and at <code>PL0</code></li> <li>A program that corrects for a nuclear plant current surge may run at <code>PL6</code>.</li> <li>Note: We can\u2019t interrupt an interrupt routine caused by a keyboard interrupt by pressing the key board again! Because they are at the same level!</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9443_the_int_signal","title":"9.4.4.3 The INT Signal","text":"<p>To stop the processor from continuing execution of its currently running program and service an interrupt request, the INT signal must be asserted.</p> <p></p> <ul> <li>\u4e0d\u540c\u7684\u8bbe\u5907\u90fd\u4f1a\u53d1\u51fa\u4e2d\u65ad\u8bf7\u6c42\u4fe1\u53f7\uff0c\u8fd9\u4e9b\u4fe1\u53f7\u90fd\u4f1a\u88ab\u8f93\u5165\u4e00\u4e2a<code>priority encoder</code>\u91cc\u9762\uff0c\u4e00\u4e2a\u7ec4\u5408\u903b\u8f91\u7535\u8def\u7ed3\u6784\u4f1a\u9009\u62e9\u6700\u9ad8\u7684\u4f18\u5148\u7ea7\u3002\u5982\u679c\u8be5\u8bf7\u6c42\u7684PL\u9ad8\u4e8e\u73b0\u5728\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u90a3\u4e48<code>INT</code>\u4fe1\u53f7\u5c31\u88ab\u65ad\u8a00\u3002</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9444_the_test_for_int","title":"9.4.4.4 The Test for INT","text":"<ul> <li> <p>\u4e0d\u5728\u4efb\u610f\u6307\u4ee4\u9636\u6bb5(FETCH, DECODE, EVALUATE ADDRESS, FETCH OPERAND, EXECUTE, and STORE RESULT)\u88ab\u6253\u65ad\uff0c\u800c\u662f\u53ea\u5728\u6700\u540e\u4e00\u4e2a\u6307\u4ee4\u5faa\u73af\u9636\u6bb5\u5141\u8bb8\u88ab\u6253\u65ad\u3002</p> </li> <li> <p>It makes much more sense to ignore interrupt signals except when we are at an instruction boundary; that is, the current instruction has completed, and the next instruction has not yet started.</p> </li> <li> <p>The additional logic to test for the interrupt signal is to augment the last state of the instruction cycle for each instruction with a test.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#945_part_ii_handling_the_interrupt_request","title":"9.4.5 Part II: Handling the Interrupt Request","text":"<p>Three states</p> <ol> <li>Initiate the interrupt (three lines numbered 1 in Figure9.17).</li> <li>Service the interrupt (four lines numbered 2 in Figure9.17).</li> <li>Return from the interrupt (one line numbered 3 in Figure9.17).</li> </ol> <p></p>"},{"location":"ClassNotes/ICS/ICS/#9451_initiate_the_interrupt","title":"9.4.5.1 Initiate the Interrupt","text":"<p>The processor must do two things:</p> <ol> <li>save the state of the interrupted program so it can pick up where it left off after the requirements of the interrupt have been completed</li> <li> <p>load the state of the higher priority interrupting program so it can start satisfying its request</p> </li> <li> <p>Save the State of the Interrupted Program in the case of the LC-3, saving the <code>PC</code> and the <code>PSR</code></p> </li> <li> <p>PC\u53ef\u4ee5\u8ba9\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u6062\u590d\u6267\u884c\u540e\uff0c\u77e5\u9053\u4e0b\u4e00\u6761\u6307\u4ee4\u662f\u4ec0\u4e48\u3002</p> </li> <li>Condition codes\u53ef\u4ee5\u4f7f\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u6062\u590d\u6267\u884c\u540e\uff0c\u6b63\u786e\u6267\u884c\u6761\u4ef6\u8df3\u8f6c\u3002</li> <li>Priority Level\u4f1a\u8ba9\u88ab\u4e2d\u65ad\u7684\u7a0b\u5e8f\u6062\u590d\u540e\u77e5\u9053\u54ea\u4e9b\u7a0b\u5e8f\u53ef\u4ee5\u4e2d\u65ad\u4ed6\u3002</li> <li>Privilege Level\u63cf\u8ff0\u4ec0\u4e48\u6837\u7684processor resources\u53ef\u4ee5\u88ab\u90a3\u4e2a\u7a0b\u5e8f\u83b7\u53d6</li> <li>\u9ed8\u8ba4service routine\u4f1a\u4fdd\u5b58GPRs\u7684\u5185\u5bb9</li> </ol> <p>\u5177\u4f53\u64cd\u4f5c\u548cTRAP\u6307\u4ee4\u7c7b\u4f3c\uff0c\u5982\u679c\u5728User mode\uff0c\u5219\u4fdd\u5b58USP\uff0c\u7136\u540e\u52a0\u8f7dSSP\u5230R6</p> <ul> <li> <p>Load the State of the Interrupt Service Routine Most processors use the mechanism of vectored interrupts.</p> <p>In the case of interrupts, the eight-bit vector is provided by the device that is requesting the processor be interrupted. That is, the I/O device transmits to the processor an eight-bit interrupt vector along with its interrupt request signal and its priority level.</p> <ul> <li>\u6700\u9ad8\u7ea7\u522b\u7684interrupt request\u7684interrupt vector\u88ab\u63d0\u4f9b\u7ed9\u4e86processor\u2014\u2014INTV</li> </ul> <p>If the interrupt is taken, the processor expands the 8-bit interrupt vector (INTV) to form a 16-bit address, which is an entry into the Interrupt Vector Table. </p> <p>\u4f4d\u4e8e==x0100 ~ x01FF==</p> <p>x0100 \u2013 Privilege mode exception</p> <p>x0101 \u2013 Illegal Opcode </p> <p>x0101 \u2013 Access Control Violation   - PSR\uff1aPSR[2:0] contains no meaningful information. We arbitrarily load it initially with 010. Since the interrupt service routine runs in privileged mode, PSR[15] is set to 0. PSR[10:8] is set to the priority level associated with the interrupt request.</p> </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#9452_service_the_interrupt","title":"9.4.5.2 Service the Interrupt","text":""},{"location":"ClassNotes/ICS/ICS/#9453_return_from_the_interrupt","title":"9.4.5.3 Return from the Interrupt","text":"<ul> <li>The last instruction in every interrupt service routine is RTI, return from trap or interrupt. </li> </ul>"},{"location":"ClassNotes/ICS/ICS/#946_an_example","title":"9.4.6 An Example","text":""},{"location":"ClassNotes/ICS/ICS/#947_not_just_io_devices","title":"9.4.7 Not Just I/O Devices","text":"<ul> <li>a timer interrupt</li> <li>the machine check interrupt</li> <li>the power failure interrupt</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#95_polling_revisited_now_that_we_know_about_interrupts","title":"9.5 Polling Revisited, Now That We Know About Interrupts","text":""},{"location":"ClassNotes/ICS/ICS/#951_the_problem","title":"9.5.1 The Problem","text":"<ul> <li>\u5728Polling\u7684\u8fc7\u7a0b\u4e2d\uff08\u5c06\u8981\u6267\u884cSTI\uff09\uff0c\u5982\u679c\u88abI/O\u8bbe\u5907\u6253\u65ad\uff08\u5982\u952e\u76d8\u6b64\u523b\u7a81\u7136\u8f93\u5165\uff09\uff0c\u90a3\u4e48\u5c31\u4f1a\u6539\u53d8\u663e\u793a\u5668\u7684\u72b6\u6001\uff0c\u53ef\u80fd\u6062\u590d\u88ab\u6253\u65ad\u7a0b\u5e8f\u65f6\u663e\u793a\u5668\u4f9d\u7136\u4e0d\u80fd\u6b63\u5e38\u63d0\u4f9b\u670d\u52a1\uff0c\u56e0\u6b64\u6b64\u65f6\u518d\u6267\u884cSTI\u6307\u4ee4\u8f93\u51fa\u5b57\u7b26\u5c31\u4f1a\u5931\u6548\u3002</li> <li>A simple way to handle this would be to disable all interrupts while polling was going on. \uff08\u4f46\u662fpolling\u4f1a\u6301\u7eed\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u8fd9\u6837\u5bf9\u4e2d\u65ad\u7a0b\u5e8f\u6765\u8bf4\u662f\u4e0d\u592a\u53ef\u63a5\u53d7\u7684\uff09</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#952_the_solution","title":"9.5.2 The Solution","text":"<ul> <li>The result: An interrupt would have to wait for the three-instruction sequence LDI, BRzp, STI to execute, rather than for the entire polling process to complete.</li> </ul> <pre><code>        .ORIG x0420\n        ADD   R6,R6,#-1\n        STR   R1,R6,#0\n        ADD   R6,R6,#-1\n        STR   R2,R6,#0\n        ADD   R6,R6,#-1\n        STR   R3,R6,#0\n;   \n        LDI   R1, PSR\n        LD    R2,INTMASK\n        AND   R2,R1,R2 \n;        \nPOLL    STI   R1,PSR   ;enable interrupts\n        STI   R2,PSR   ;disable interrupts\n        LDI   R3,DSR\n        BRzp  POLL ; Poll the DSR\n        STI   R0, DDR; Store the character into the DDR \n        STI   R1, PSR; Restore original PSR\n;\n        LDR   R3,R6,0\n        ADD   R6,R6,#1\n        LDR   R2,R6,0\n        ADD   R6,R6,#1\n        LDR   R1,R6,0\n        ADD   R6,R6,#1\n\n        RTI\n\nINTMASK .FILL xBFFF\nPSR     .FILL xFFFF ;PSR is memory mapped to xFFFC.\nDSR     .FILL xFE04\nDDR     .FILL xFE06\n        .END\n</code></pre>"},{"location":"ClassNotes/ICS/ICS/#chapter_10_a_calculator","title":"Chapter 10 A Calculator","text":"<p>Our example is a program that simulates the actions of a calculator that a per- son can use to add, subtract, and multiply 2\u2019s complement integers. The person will enter numbers into the calculator-simulator by typing keys on the keyboard.</p> <ul> <li>two points:</li> <li>data conversion: ascii -&gt; 2\u2019s complement -&gt; ascii</li> <li>arithmetic using a stack</li> <li>Our simulation of a calculator, like most calculators, does not use general purpose registers. Instead it uses a stack. Source operands are popped from the stack, and the result of the operation is pushed back onto the stack.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#101_data_type_conversion","title":"10.1 Data Type Conversion","text":"<ul> <li>It is important that every instruction be provided with source operands of the data type that the instruction requires.(\u64cd\u4f5c\u6570\u636e\u5fc5\u987b\u8981\u7b26\u5408\u6307\u4ee4\u7684\u8981\u6c42)</li> <li>For programming in some high-level language, the compiler generally does that conversion.F</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#1011_example_a_bogus_program_2_3_e","title":"10.1.1 Example: A Bogus Program: 2 + 3 = e","text":"<ul> <li>\u4e0d\u80fd\u76f4\u63a5\u628a\u8f93\u5165\u7684\u6570\u636e\u76f8\u52a0\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u662fascii\u7801</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#1012_input_data_ascii_to_binary","title":"10.1.2 Input Data (ASCII to Binary)","text":"<ul> <li>R1 (the number of decimal digits)</li> <li>ASCIIBUFF is the address of the first memory location of a sequence of four memory locations that we have allocated (a) to store the ASCII codes of decimal digits entered from the keyboard, and (b) to store the ASCII codes corresponding to the result of arithmetic operations in preparation for writing it (the result) to the monitor.</li> <li>\u53ef\u4ee5\u628a\u5341\u4f4d\u548c\u767e\u4f4d\u7684\u503c\u90fd\u5b58\u6210\u4e00\u5f20\u8868\uff0c\u6839\u636e\u8f6c\u6362\u540e\u7684digit\u503c\u67e5\u8868\uff0cLD\u76f8\u5e94\u7684\u6570\u5b57\u3002</li> <li></li> </ul>"},{"location":"ClassNotes/ICS/ICS/#1013_display_result_binary_to_ascii","title":"10.1.3 Display Result (Binary to ASCII)","text":"<ol> <li>\u68c0\u6d4b\u662f\u5426\u4e3a\u8d1f\u6570\uff0c\u82e5\u662f\u8d1f\u6570\u5219\u628a\u8d1f\u6570flag\u6807\u8bb0\uff0c\u7136\u540e\u53d6\u8865\u7801\u8f6c\u56de\u6b63\u6570</li> <li>\u5faa\u73af-100\uff0c\u76f4\u5230\u6539\u6570\u4e3a\u8d1f\u6570\uff0c\u8bb0\u5f55<code>\u5faa\u73af\u6b21\u6570-1</code>\u4e3a\u767e\u4f4d\u6570\uff0c\u628a\u6570+100\u62b5\u6d88\u6700\u540e\u4e00\u6b21</li> <li>\u5faa\u73af-10\uff0c\u540c\u4e0a</li> <li>\u76f4\u63a5\u5b58\u5165\u4e2a\u4f4d</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#102_arithmetic_using_a_stack","title":"10.2 Arithmetic Using a Stack","text":""},{"location":"ClassNotes/ICS/ICS/#1021_the_stack_as_temporary_storage","title":"10.2.1 The Stack as Temporary Storage","text":"<ul> <li>LC-3 \u5c06\u8ba1\u7b97\u540e\u7684\u6570\u636e\u5b58\u5728\u5bc4\u5b58\u5668\u91cc\uff0c\u662f\u4e00\u4e2a**three-address machine**\u3002x86\u662f\u4e00\u4e2a**two-address machine**\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u786e\u8ba4\u4e24\u4e2a\u4f4d\u7f6e\u3002\u8fd8\u6709\u4e9bISAs\u4e0d\u4f7f\u7528GPRs\u6765\u5b58\u64cd\u4f5c\u6570\u548c\u7ed3\u679c\uff0c\u6700\u5e38\u89c1\u7684\u662f**stack machines**\u56e0\u4e3a\u4ed6\u4eec\u7528\u6808\u6765\u4e34\u65f6\u5b58\u50a8\u6570\u636e\u3002</li> <li>Source operands are obtained by popping the top two elements from the stack. The result (i.e., the destination operand) is subsequently pushed onto the stack.</li> <li>No addresses need to be specified explicitly. Therefore, stack machines are referred to as zero-address machines.</li> <li>Note that the pop, push, and add are not part of the ISA of the computer, and therefore they are available to the programmer.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#1022_an_example","title":"10.2.2 An Example","text":""},{"location":"ClassNotes/ICS/ICS/#1023_opadd_opmult_and_opneg","title":"10.2.3 OpAdd, OpMult, and OpNeg","text":"<ol> <li>OpAdd, which will pop two values from the stack, add them, and push the result onto the stack.</li> <li>OpMult, which will pop two values from the stack, multiply them, and push the result onto the stack.</li> <li>OpNeg, which will pop the top value, form its 2\u2019s complement negative value, and push the result onto the stack. This will allow us to subtract two numbers A minus B by first forming \u2212B and then adding the result to A.</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#the_opadd_subroutine","title":"The OpAdd Subroutine","text":"<p>\u4e24\u79cd\u53ef\u80fd\u5931\u8d25\u7684\u60c5\u51b5</p> <ul> <li>Fewer than two values are available on the stack for source operands</li> <li> <p>The result is out of range</p> </li> <li> <p>TheADD</p> </li> <li> <p>\u5982\u679c\u7b2c\u4e00\u6b21pop\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u4ec0\u4e48\u4e5f\u4e0d\u7528\u5904\u7406\u3002\u5982\u679c\u7b2c\u4e8c\u6b21pop\u5931\u8d25\u4e86\uff0c\u90a3\u4e48stack pointer\u4f1a\u88abdecremented\u3002\u5982\u679c\u7ed3\u679c\u6709\u95ee\u9898(\u8c03\u7528RangeCheck\u5b50\u7a0b\u5e8f)\uff0c\u90a3\u4e48stack pointer\u4f1a\u88abdecremented twice</p> </li> </ul> <pre><code>OpAdd           ST R0,OpAdd_Save0\n                ST R1,OpAdd_Save1\n                ST R5,OpAdd_Save5\n                ST R7 OpAdd_Save7\n                JSR POP ; Get first source operand.\n                ADD R5,R5,#0 ; Test if POP was successful.\n                BRp OpAdd_Exit ; Branch if not successful.\n                ADD R1,R0,#0 ; Make room for second operand.\n                JSR POP ; Get second source operand.\n                ADD R5,R5,#0 ; Test if POP was successful.\n                BRp OpAdd_Restore1 ; Not successful, put back first.\n                ADD R0,R0,R1 ; THE Add.\n                JSR RangeCheck ; Check size of result.\n                ADD R5,R5,#0 ; Check R5 for success/failure.\n                BRp OpAdd_Restore2 ; Out of range, restore both.\n                JSR PUSH ; Push sum on the stack.\n                BRnzp OpAdd_Exit\nOpAdd_Restore2  ADD R6,R6,#-1\nOpAdd_Restore1  ADD R6,R6,#-1\nOpAdd_Exit      LD  R0,OpAdd_Save0\n                LD  R1,OpAdd_Save1\n                LD  R5,OpAdd_Save5\n                LD  R7,OpAdd_Save7\n                RET\nOpAdd_Save0     .BLKW #1\nOpAdd_Save1     .BLKW #1\nOpAdd_Save5     .BLKW #1\nOpAdd_Save7     .BLKW #1        \n</code></pre> <ul> <li>The RangeCheck</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#the_opmult_subroutine","title":"The OpMult Subroutine","text":""},{"location":"ClassNotes/ICS/ICS/#the_opneg_subroutine","title":"The OpNeg Subroutine","text":"<ol> <li>replace the top element on the stack with its negative </li> <li>use OpADD</li> </ol>"},{"location":"ClassNotes/ICS/ICS/#103_the_calculator","title":"10.3 The Calculator","text":""},{"location":"ClassNotes/ICS/ICS/#1031_functionality","title":"10.3.1 Functionality","text":"<ul> <li>X Exit the simulation.</li> <li>D Display the value at the top of the stack.</li> <li>C Clear all values from the stack.</li> <li>+ Pop the top two elements A,B off the stack and push A+B.</li> <li>***** Pop the top two elements A,B off the stack and push A*B.</li> <li>\u2212 Pop the top element A off the stack and push \u201cminus\u201d A.</li> <li>Enter or LF Push the value typed on the keyboard onto the top of the stack.</li> </ul>"},{"location":"ClassNotes/ICS/ICS/#chapter_19_dynamic_data_structures_in_c","title":"Chapter 19 Dynamic Data Structures in C","text":""},{"location":"ClassNotes/ICS/ICS/#195_linked_lists","title":"19.5 Linked Lists","text":"<p>A linked list is a data structure that is similar to an array in that both can be used for data that is a sequential list of elements. </p> <p>The elements need not be adjacent in memory</p> <p>A linked list is a collection of elements, or nodes, where each node is one \u201cunit\u201d of data</p>"},{"location":"ClassNotes/macroeconomics/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AE%8F%E7%BB%8F%E7%AC%94%E8%AE%B0/","title":"IS-LM","text":"<p>\u4ece\u96f6\u5f00\u59cb\u7684\u5b8f\u7ecf\u7b14\u8bb0</p> <p></p> <ul> <li>\u4e00\u4e2a\u793e\u4f1a\u7684\u5c31\u4e1a\u6c34\u5e73\u662f\u88ab\u6709\u6548\u9700\u6c42\u7684\u89c4\u6a21\u51b3\u5b9a\u7684</li> </ul> <p></p> <p>\u4e24\u90e8\u95e8\u7ecf\u6d4e\u65f6\uff1a\u5b9e\u9645\u9700\u6c42AD = \u6d88\u8d39C + \u6295\u8d44I</p> <p>I\u662f\u5916\u751f\u7ed9\u5b9a\u7684\u91cf</p> <p>\u5f53\u603b\u9700\u6c42\u5927\u4e8e\u603b\u4ea7\u51fa\u65f6\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u589e\u52a0\u65b0\u7684\u6295\u8d44\uff0c\u53ea\u9700\u8981\u5229\u7528\u95f2\u7f6e\u7684\u793e\u4f1a\u8d44\u6e90\u3002</p> <p>\u5f53\u603b\u9700\u6c42\u5c0f\u4e8e\u603b\u4ea7\u51fa\u65f6\uff0c\u6b64\u65f6\u4e5f\u4e0d\u4f1a\u51cf\u5c11\u6295\u8d44\uff0c\u53ea\u9700\u8981\u63d0\u9ad8\u793e\u4f1a\u8d44\u6e90\u7684\u95f2\u7f6e\u7387\u5c31\u884c\u4e86\u3002</p> <p></p> <p></p> <p>\u5145\u5206\u5c31\u4e1a\u7684\u60c5\u51b5\u4f1a\u5bf9Y\u503c\u6709\u4e00\u5b9a\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u8981\u8fbe\u5230\u5145\u5206\u5c31\u4e1a\u7684\u6c34\u51c6\uff0c\u5c31\u4f1a\u7ea6\u675f\u793e\u4f1a\u7684\u603b\u9700\u6c42\u66f2\u7ebf\u5728\u67d0\u4e00\u9ad8\u5ea6</p> <p></p> <p></p> <p>\u5145\u5206\u5c31\u4e1a:\u662f\u6307\u4e00\u4e2a\u793e\u4f1a\u4e0d\u5b58\u5728\u975e\u81ea\u613f\u5931\u4e1a\u65f6\u7684\u5c31\u4e1a\u72b6\u6001\uff0c\u5373\u5145\u5206\u5c31\u4e1a\u5e76\u975e\u4eba\u4eba\u90fd\u6709\u5de5\u4f5c,\u5145\u5206\u5c31\u4e1a\u65f6\u4f9d\u7136\u5b58\u5728\u81ea\u613f\u5931\u4e1a\u548c\u6469\u64e6\u6027\u5931\u4e1a\u3002</p>"},{"location":"ClassNotes/macroeconomics/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AE%8F%E7%BB%8F%E7%AC%94%E8%AE%B0/#is","title":"IS\u66f2\u7ebf","text":"<p>\u79fb\u52a8\uff1a</p> <p>\u5982\u679c\u5229\u7387\u6ca1\u6709\u53d8\u5316\uff0c\u7531\u5916\u751f\u7ecf\u6d4e\u53d8\u91cf\u51b2\u51fb\u5bfc\u81f4\u603b\u4ea7\u51fa\u589e\u52a0\u53ef\u4ee5\u89c6\u4f5c\u539f\u6709\u7684IS\u66f2\u7ebf\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u5411\u53f3\u79fb\u52a8\u3002</p> <p>\u5982\u679c\u5229\u7387\u6ca1\u6709\u53d8\u5316,\u7531\u5916\u751f\u7ecf\u6d4e\u53d8\u91cf\u51b2\u51fb\u5bfc\u81f4\u603b\u4ea7\u51fa\u51cf\u5c11,\u53ef\u4ee5\u89c6\u4f5c\u539f\u6709\u7684IS\u66f2\u7ebf\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u5411\u5de6\u79fb\u52a8\u3002</p> <p>\u5728\u73b0\u5b9e\u7684\u7ecf\u6d4e\u751f\u6d3b\u4e2d\uff0c\u5bfc\u81f4IS\u66f2\u7ebf\u53f3\u79fb\u7684\u539f\u56e0\u53ef\u80fd\u662f\u81ea\u53d1\u6027\u6d88\u8d39\u7684\u589e\u52a0,\u4e5f\u53ef\u80fd\u662f\u81ea\u53d1\u6027\u6295\u8d44\u7684\u589e\u52a0\u3002\u4f46\u4f20\u7edf\u7684\u5b8f\u89c2\u7ecf\u6d4e\u7406\u8bba\u8ba4\u4e3a\uff0c\u5728\u77ed\u671f\u4e2d\u5176\u539f\u56e0\u66f4\u53ef\u80fd\u6765\u81ea\u653f\u5e9c\u5bf9\u7ecf\u6d4e\u7684\u5e72\u9884\uff0c\u6bd4\u5982\u653f\u5e9c\u6295\u8d44\u6216\u8f6c\u79fb\u652f\u4ed8\u7684\u589e\u52a0\u3002</p> <p>\u5728\u73b0\u5b9e\u7684\u7ecf\u6d4e\u751f\u6d3b\u4e2d\uff0c\u5bfc\u81f4IS\u66f2\u7ebf\u5de6\u79fb\u7684\u539f\u56e0\u53ef\u80fd\u662f\u81ea\u53d1\u6027\u6d88\u8d39\u7684\u51cf\u5c11,\u4e5f\u53ef\u80fd\u662f\u81ea\u53d1\u6027\u6295\u8d44\u7684\u51cf\u5c11\u3002\u4f46\u4f20\u7edf\u7684\u5b8f\u89c2\u7ecf\u6d4e\u7406\u8bba\u8ba4\u4e3a\uff0c\u5728\u77ed\u671f\u4e2d\u5176\u539f\u56e0\u66f4\u53ef\u80fd\u6765\u81ea\u653f\u5e9c\u5bf9\u7ecf\u6d4e\u7684\u5e72\u9884\uff0c\u6bd4\u5982\u653f\u5e9c\u6295\u8d44\u6216\u8f6c\u79fb\u652f\u4ed8\u7684\u51cf\u5c11\u3002</p> <p>\u65cb\u8f6c\uff1a\u5982\u679c\u6295\u8d44\u7cfb\u6570B\u4e0d\u53d8\uff0c\u8fb9\u9645\u6d88\u8d39\u503e\u5411b\u8d8a\u5927\uff0c1-b\u7684\u503c\u5c31\u8d8a\u5c0f\uff0c\u4ece\u800cIS\u66f2\u7ebf\u7684\u659c\u7387\u7edd\u5bf9\u503c\u5c31\u8d8a\u5c0f\uff0c\u603b\u4ea7\u51fa\u5bf9\u5229\u7387\u53d8\u52a8\u7684\u53cd\u5e94\u5c31\u8d8a\u654f\u611f;\u53cd\u4e4b,\u8fb9\u9645\u6d88\u8d39\u503e\u5411b\u8d8a\u5c0f,1-b\u7684\u503c\u5c31\u8d8a\u5927\uff0c\u4ece\u800cIS\u66f2\u7ebf\u7684\u659c\u7387\u7edd\u5bf9\u503c\u5c31\u8d8a\u5927\uff0c\u603b\u4ea7\u51fa\u5bf9\u5229\u7387\u53d8\u52a8\u7684\u53cd\u5e94\u5c31\u8d8a\u8fdf\u949d\u3002</p> <p>\u5982\u679c\u8fb9\u9645\u6d88\u8d39\u503e\u5411b\u4e0d\u53d8\uff0c\u6295\u8d44\u7cfb\u6570B\u7684\u503c\u8d8a\u5927\uff0cIS\u66f2\u7ebf\u7684\u659c\u7387\u5c31\u8d8a\u5c0f\uff0c\u603b\u4ea7\u51fa\u5bf9\u5229\u7387\u53d8\u52a8\u7684\u53cd\u5e94\u5c31\u8d8a\u654f\u611f;\u53cd\u4e4b,\u6295\u8d44\u7cfb\u6570B\u7684\u503c\u8d8a\u5c0f,IS\u66f2\u7ebf\u7684\u659c\u7387\u5c31\u8d8a\u5927\uff0c\u603b\u4ea7\u51fa\u5bf9\u5229\u7387\u53d8\u52a8\u7684\u53cd\u5e94\u5c31\u8d8a\u8fdf\u949d\u3002</p> <p>\u4e00\u822c\u8ba4\u4e3a\u8fb9\u9645\u6d88\u8d39\u503e\u5411\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u6bd4\u8f83\u7a33\u5b9a\uff0c\u6240\u4ee5\u65cb\u8f6c\u4e3b\u8981\u662f\u56e0\u4e3a\u6295\u8d44\u7cfb\u6570</p>"},{"location":"ClassNotes/macroeconomics/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%AE%8F%E7%BB%8F%E7%AC%94%E8%AE%B0/#lm","title":"LM\u66f2\u7ebf","text":"<p>\u79fb\u52a8\uff1a</p> <ol> <li>\u5982\u679c\u5229\u7387\u6ca1\u6709\u53d8\u5316,\u7531\u5916\u751f\u7ecf\u6d4e\u53d8\u91cf\u51b2\u51fb\u5bfc\u81f4\u603b\u4ea7\u51fa\u589e\u52a0\uff0c\u53ef\u4ee5\u89c6\u4f5c\u539f\u6709\u7684LM\u66f2\u7ebf\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u5411\u53f3\u79fb\u52a8\u3002</li> <li>\u5982\u679c\u5229\u7387\u6ca1\u6709\u53d8\u5316\uff0c\u7531\u5916\u751f\u7ecf\u6d4e\u53d8\u91cf\u51b2\u51fb\u5bfc\u81f4\u603b\u4ea7\u51fa\u51cf\u5c11\uff0c\u53ef\u4ee5\u89c6\u4f5c\u539f\u6709\u7684LM\u66f2\u7ebf\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u5411\u5de6\u79fb\u52a8\u3002</li> </ol> <p>\u5728\u73b0\u5b9e\u7684\u7ecf\u6d4e\u751f\u6d3b\u4e2d\uff0c\u5bfc\u81f4LM\u66f2\u7ebf\u53f3\u79fb\u7684\u539f\u56e0\u53ef\u80fd\u662f\u8d27\u5e01\u9700\u6c42\u7684\u589e\u52a0\uff0c\u4e5f\u53ef\u80fd\u662f\u8d27\u5e01\u4f9b\u5e94\u7684\u589e\u52a0\u3002 \u4f46\u4f20\u7edf\u7684\u5b8f\u89c2\u7ecf\u6d4e\u7406\u8bba\u8ba4\u4e3a\uff0c\u5728\u77ed\u671f\u4e2d\u5176\u539f\u56e0\u66f4\u53ef\u80fd\u6765\u81ea\u653f\u5e9c\u8d27\u5e01\u653f\u7b56\u5bf9\u7ecf\u6d4e\u7684\u5e72\u9884,\u5982\u4e2d\u592e\u94f6\u884c\u964d\u4f4e\u6cd5\u5b9a\u51c6\u5907\u91d1\u7387\u6216\u589e\u52a0\u57fa\u7840\u8d27\u5e01\u7684\u6295\u653e\u91cf\u3002</p> <p>\u5728\u73b0\u5b9e\u7684\u7ecf\u6d4e\u751f\u6d3b\u4e2d\uff0c\u5bfc\u81f4LM\u66f2\u7ebf\u5de6\u79fb\u7684\u539f\u56e0\u53ef\u80fd\u662f\u8d27\u5e01\u9700\u6c42\u7684\u51cf\u5c11,\u4e5f\u53ef\u80fd\u662f\u8d27\u5e01\u4f9b\u5e94\u7684\u51cf\u5c11\u3002\u4f46\u4f20\u7edf\u7684\u5b8f\u89c2\u7ecf\u6d4e\u7406\u8bba\u8ba4\u4e3a\uff0c\u5728\u77ed\u671f\u4e2d\u5176\u539f\u56e0\u66f4\u53ef\u80fd\u6765\u81ea\u653f\u5e9c\u8d27\u5e01\u653f\u7b56\u5bf9\u7ecf\u6d4e\u7684\u5e72\u9884,\u5982\u4e2d\u592e\u94f6\u884c\u63d0\u9ad8\u6cd5\u5b9a\u51c6\u5907\u91d1\u7387\u6216\u51cf\u5c11\u57fa\u7840\u8d27\u5e01\u7684\u6295\u653e\u91cf\u3002</p>"},{"location":"ClassNotes/macroeconomics/%E5%AE%8F%E7%BB%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%84%9F%E6%82%9F/","title":"\u968f\u7b14","text":"<p>\u5b8f\u7ecf\u7684\u4e00\u4e9b\u5c0f\u611f\u609f</p> <p>IS-LM\u6a21\u578b\u4e2d\uff0c\u5229\u7387\u4f5c\u4e3a\u81ea\u53d8\u91cf\uff0c\u5f53\u5e02\u573a\u5229\u7387\u7ed9\u5b9a\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u501f\u6b64\u5728IS\u66f2\u7ebf\u4e0a\u4f30\u8ba1\u51fa\u4ea7\u54c1\u5e02\u573a\u5747\u8861\u65f6\u7684\u603b\u6536\u5165\uff0c\u53ef\u4ee5\u5728LM\u66f2\u7ebf\u4e0a\u4f30\u8ba1\u51fa\u8d27\u5e01\u5e02\u573a\u5747\u8861\u65f6\u7684\u603b\u6536\u5165\u3002\u5982\u679c\u6b64\u65f6\u4e0d\u5728\u5747\u8861\u70b9\uff0c\u8d27\u5e01\u5e02\u573a\u4e2d\u4f1a\u6709**\u5e02\u573a\u5316**\u8c03\u6574\u5229\u7387\u7684\u673a\u5236\uff0c\u90a3\u4e48\u5229\u7387\u5c31\u4f1a\u6539\u53d8\uff1b\u4ea7\u54c1\u5e02\u573a\u4e2d\u56e0\u4e3a\u4f9b\u6c42\u5173\u7cfb\u4e0d\u5e73\u8861\uff0c\u4e5f\u4f1a\u81ea\u52a8\u8c03\u8282\u6536\u5165\uff0c\u6700\u540e\u5c31\u80fd\u5728\u5e02\u573a\u7684\u4f5c\u7528\u4e0b\u8fbe\u5230\u5747\u8861\u70b9\u3002</p> <p>\u5229\u7387\u4e0d\u80fd\u76f4\u63a5\u5f71\u54cd\u4ea4\u6613\u6027\u8d27\u5e01\u9700\u6c42\uff0c\u5229\u7387\u53ea\u80fd\u901a\u8fc7\u5f71\u54cd\u6295\u673a\u6027\u8d27\u5e01\u9700\u6c42\uff0c\u7136\u540e\u6839\u636e\u8d27\u5e01\u4f9b\u7ed9\u7684\u6709\u9650\u6027+\u8d27\u5e01\u5e02\u573a\u51fa\u6e05\u539f\u5219\u6765\u5f71\u54cd\u8fdb\u884c\u4ea4\u6613\u7684\u8d27\u5e01\u89c4\u6a21\uff0c\u6700\u7ec8\u5f71\u54cd\u6536\u5165\uff0c\u7136\u540e\u53cd\u6620\u5728\u4ea4\u6613\u6027\u8d27\u5e01\u9700\u6c42\u589e\u52a0\u5230\u4e0e**\u4ea4\u6613\u6027\u8d27\u5e01\u4f9b\u7ed9**\u76f8\u540c\u7684\u70b9\u3002</p> <p>\u4ea4\u6613\u6027\u8d27\u5e01\u4f9b\u7ed9\uff1a\u6211\u778e\u7f16\u7684\u4e00\u4e2a\u8bcd\uff0c\u5728\u6211\u7684\u7406\u89e3\u4e2d\uff0c\u8d27\u5e01\u9700\u6c42\u8fd8\u662f\u56e0\u6536\u5165\u589e\u52a0\u800c\u589e\u52a0\u7684\u91cf\uff0c\u4f46\u662f\u5f88\u96be\u60f3\u4e3a\u4ec0\u4e48\u6295\u673a\u6027\u8d27\u5e01\u9700\u6c42\u51cf\u5c11\u4ea4\u6613\u6027\u8d27\u5e01\u9700\u6c42\u4e0a\u5347\u4f1a\u53cd\u8fc7\u6765\u5f71\u54cd\u6536\u5165\u3002\u6240\u4ee5\u6211\u60f3\u7684\u662f\uff0c\u6295\u673a\u6027\u8d27\u5e01\u9700\u6c42\u51cf\u5c11\u540e\uff0c\u53ef\u4ee5\u7528\u4e8e\u4ea4\u6613\u7684\u8d27\u5e01\u5c31\u589e\u591a\u4e86\uff0c\u6211\u628a\u8fd9\u4e00\u90e8\u5206\u8d27\u5e01\u79f0\u4f5c\u4ea4\u6613\u6027\u8d27\u5e01\u4f9b\u7ed9\uff0c\u8fd9\u4e9b\u8d27\u5e01\u76f4\u63a5\u6d41\u5165\u4ea4\u6613\u5e02\u573a\uff0c\u4fc3\u8fdb\u4e86\u4ea4\u6613\uff0c\u5e26\u6765\u4e86\u6536\u5165\u7684\u63d0\u9ad8\u3002\u7136\u540e\u4ea4\u6613\u6027\u8d27\u5e01\u9700\u6c42\u6162\u6162\u4e0a\u5347\uff0c\u6700\u540e\u548c\u4f9b\u7ed9\u8fbe\u5230\u5e73\u8861\u7684\u72b6\u6001\u3002</p> <p>\u5728LM\u66f2\u7ebf\u7684\u7ecf\u6d4e\u542b\u4e49\u4e2d\uff0c\u6700\u597d\u7684\u89e3\u91ca\u8fd8\u662f\u5229\u7387\u4f5c\u4e3a\u81ea\u53d8\u91cf\uff0c\u6536\u5165\u4f5c\u4e3a\u56e0\u53d8\u91cf\u3002</p> <p>\u5728\u73b0\u4ee3\u8d27\u5e01\u5e02\u573a\u5747\u8861\u56fe\u4e2d\uff0c\u56e0\u4e3a\u63cf\u8ff0\u4e86\u5229\u7387\u4f1a\u5728\u8d27\u5e01\u4f9b\u7ed9\u548c\u6536\u5165\u7684\u7ea6\u675f\u4e0b\uff0c\u5728\u5e02\u573a\u7684\u529b\u91cf\u4e0b\u81ea\u52a8\u8c03\u6574\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u6536\u5165\u770b\u4f5c\u5916\u751f\u53d8\u91cf\uff0c\u5229\u7387\u4f5c\u4e3a\u5185\u751f\u53d8\u91cf\uff0c\u5373\u5229\u7387\u7531\u8d27\u5e01\u5e02\u573a\u51b3\u5b9a\u3002</p> <p>\u4f46\u5728LM\u66f2\u7ebf\u4e2d\uff0c\u4ed6\u53cd\u6620\u7684\u662f\u5229\u7387\u548c\u56fd\u6c11\u603b\u6536\u5165\u7684\u5173\u7cfb\uff0c\u662f\u4e00\u79cd\u89e3\u91ca\u6027\u7684\u6a21\u578b\uff0c\u5e76\u975e\u8c01\u51b3\u5b9a\u8c01\u7684\u72b6\u6001\u3002\u6240\u4ee5\u5229\u7387\u8981\u4f5c\u4e3a\u5916\u751f\u53d8\u91cf\u4f20\u5165\uff0c\u8fd9\u6837\u624d\u80fd\u7528\u4ee5\u4f30\u7b97\u6b64\u523b\u7684\u8d27\u5e01\u5e02\u573a\u5747\u8861\u65f6\u7684\u56fd\u6c11\u6536\u5165\uff0c\u5e76\u4e14\u5bf9\u5229\u7387\u7684\u6539\u53d8\u5f15\u8d77\u56fd\u6c11\u6536\u5165\u7684\u6539\u53d8\u4f5c\u51fa\u89e3\u91ca\u3002</p> <p>\u6d41\u52a8\u6027\u504f\u597d\u6307\u7684\u662f\u4eba\u4eec\u5bf9\u6301\u6709\u8d27\u5e01\u7684\u9700\u6c42\u3002\u4eba\u4eec\u7684\u50a8\u84c4\u5206\u4e3a\u5f88\u591a\u5c42\u7ea7m0\uff5em5\uff0c\u6d41\u52a8\u6027\u4f9d\u6b21\u964d\u4f4e\uff0c\u8d8a\u5230\u540e\u9762\u8d8a\u6ca1\u6709\u4fdd\u969c\uff0c\u53ef\u80fd\u5c31\u76f8\u5f53\u4e8e\u7528\u7eb8\u5e01\u6765\u66ff\u6362\u8d35\u91d1\u5c5e\uff0c\u7136\u540e\u518d\u7528\u5b58\u6298\uff08\u4e00\u5f20\u5c0f\u7834\u7eb8\uff09\u6765\u66ff\u4ee3\u7eb8\u5e01\uff0c\u8d8a\u5230\u540e\u9762\u5176\u8d27\u5e01\u4ef7\u503c\u8d8a\u4f9d\u8d56\u4e8e\u793e\u4f1a\u7684\u8ba4\u53ef\u5ea6\u3002\u5f53\u793e\u4f1a\u7ecf\u6d4e\u4e0d\u666f\u6c14\u7684\u65f6\u5019\uff0c\u6d41\u52a8\u6027\u8f83\u4f4e\u7684\u50a8\u84c4\u53ef\u80fd\u5151\u6362\u4e0d\u56de\u539f\u6765\u7684\u7b49\u989d\u8d27\u5e01\uff0c\u751a\u81f3\u6ca1\u6709\u8d27\u5e01\uff0c\u56e0\u6b64\u5728\u5229\u7387\u8f83\u4f4e\u7684\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u4f1a\u504f\u5411\u4e8e\u6301\u6709\u6d41\u52a8\u6027\u8f83\u9ad8\u7684\u8d27\u5e01\uff0c\u800c\u975e\u7ee7\u7eed\u6301\u6709\u503a\u5238\u7b49\u6d41\u52a8\u6027\u8f83\u4f4e\u7684\u8d44\u4ea7</p> <p>\u6d41\u52a8\u6027\u9677\u9631\uff1a\u53e6\u4e00\u79cd\u6781\u7aef\u5c31\u662f\u5f53\u5229\u7387\u975e\u5e38\u4f4e\u65f6\uff0c\u4eba\u4eec\u9884\u671f\u5229\u7387\u4e0d\u53ef\u80fd\u518d\u4f4e\u4e0b\u53bb\u4e86\uff0c\u4e5f\u5c31\u662f\u4eba\u4eec\u9884\u671f\u5229\u7387\u5c06\u4f1a\u4e0a\u6da8\uff0c\u503a\u5238\u672a\u6765\u4ef7\u683c\u53ea\u4f1a\u4e0b\u8dcc\u3002\u5728\u8fd9\u79cd\u573a\u5408\u4e0b\uff0c\u4eba\u4eec\u5fc5\u5c06\u5356\u51fa\u503a\u5238\u4ee5\u6301\u6709\u8d27\u5e01\uff0c\u5e76\u4e0d\u518d\u8d2d\u4e70\u503a\u5238\uff0c\u6709\u591a\u5c11\u8d27\u5e01\u5c31\u6301\u6709\u591a\u5c11\u8d27\u5e01\u3002</p>"},{"location":"ClassNotes/macroeconomics/%E5%AE%8F%E7%BB%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%84%9F%E6%82%9F/#is-lm","title":"IS-LM\u66f2\u7ebf\u5206\u6790\u8d22\u653f\u653f\u7b56\u548c\u8d27\u5e01\u653f\u7b56\u7684\u6709\u6548\u6027","text":"<ol> <li>IS\u66f2\u7ebf\u9661\u5ced\u3001LM\u66f2\u7ebf\u5e73\u7f13\uff1a\u8d22\u653f\u653f\u7b56\u8d8a\u6709\u6548</li> <li>IS\u66f2\u7ebf\u5e73\u7f13\u3001LM\u66f2\u7ebf\u9661\u5ced\uff1a\u8d27\u5e01\u653f\u7b56\u8d8a\u6709\u6548</li> </ol> <p>\u5bf9\u4e8e1\u7684\u5206\u6790\uff1a\u73b0\u5728\u4e00\u77e5\u534a\u89e3\uff5e\uff0c\u4ece\u539f\u7406\u6765\u770b\uff0cIS\u9661\u5ced\uff0c\u90a3\u4e48\u6295\u8d44\u5bf9\u5229\u7387\u53d8\u5316\u4e0d\u654f\u611f\uff0c\u653f\u5e9c\u589e\u52a0\u8d2d\u4e70\u65f6\uff0cIS\u66f2\u7ebf\u53f3\u79fb\u5bfc\u81f4\u5229\u7387\u4e0a\u5347\u5c0f\uff0c\u90a3\u4e48\u5bf9\u79c1\u4eba\u6295\u8d44\u5bf9\u6324\u51fa\u6548\u5e94\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u4fc3\u8fdb\u7ecf\u6d4e\u53d1\u5c55\uff08\u63d0\u9ad8\u603b\u4ea7\u51fa\uff09</p> <p>\u5bf9\u4e8e2\u7684\u5206\u6790\uff1a\u4ece\u539f\u7406\u6765\u770b\uff0cLM\u66f2\u7ebf\u8d8a\u9661\u5ced\uff0c\u8868\u660e\u8d27\u5e01\u9700\u6c42\u5bf9\u6536\u5165\u7684\u654f\u611f\u5ea6\u8d8a\u9ad8\u3001\u5bf9\u5229\u7387\u7684\u654f\u611f\u5ea6\u8d8a\u4f4e\uff0c\u90a3\u4e48\u8d27\u5e01\u91cf\u6539\u53d8\u76f8\u540c\u65f6\uff0c\u5bf9\u4e8e\u9661\u5ced\u7684LM\u66f2\u7ebf\u6765\u8bf4\uff0c\u8d27\u5e01\u5e02\u573a\u7684\u5229\u7387\u53d8\u5316\u91cf\u9700\u8981\u5f88\u5927\u6765\u5b9e\u73b0\u5747\u8861\uff0c\u6b64\u65f6\u5229\u7387\u53d8\u52a8\u8f83\u5927\uff0c\u5728\u4ea7\u54c1\u5e02\u573a\u5bf9\u6295\u8d44\u7684\u5f71\u54cd\u5c31\u8f83\u5927\uff08\u800c\u8fd9\u4e2a\u5f71\u54cd\u4e5f\u53d7d\u2014\u2014\u6295\u8d44\u5bf9\u5229\u7387\u7684\u654f\u611f\u5ea6\u51b3\u5b9a\uff0c\u654f\u611f\u5ea6\u8d8a\u5927IS\u66f2\u7ebf\u8d8a\u5e73\u7f13\uff09\uff0c\u90a3\u4e48\u5bf9\u603b\u4ea7\u51fa\u7684\u5f71\u54cd\u5c31\u8f83\u5927\uff0c\u8d27\u5e01\u653f\u7b56\u6bd4\u8f83\u6709\u6548\u3002</p> <p>\u4ece\u56fe\u50cf\u6765\u770b\uff0c\u5bf9\u4e8e\u76f8\u540c\u7684\u8d27\u5e01\u6539\u53d8\u91cf\uff0c\u66f2\u7ebf\u6c34\u5e73\u79fb\u52a8\u76f8\u540c\u7684\u8ddd\u79bb\uff0c\u56e0\u6b64LM\u66f2\u7ebf\u659c\u7387\u8d8a\u5927\u5bfc\u81f4\u603b\u4ea7\u51fa\u7684\u6539\u53d8\u91cf\u5c31\u8d8a\u5927\u3002\u8fd9\u7bc7\u8bb2\u5f97\u597d\u597d\u554a\u554a\u554a\u554a\uff01</p> <p></p>"},{"location":"ClassNotes/macroeconomics/%E5%AE%8F%E7%BB%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%84%9F%E6%82%9F/#ad","title":"\u5206\u6790\u5404\u4e2a\u53d8\u91cf\u5bf9AD\u66f2\u7ebf\u659c\u7387\u7684\u5f71\u54cd","text":"<p>AD\u66f2\u7ebf\u659c\u7387\u7684\u610f\u4e49\uff1a\u5bf9\u8d27\u5e01\u653f\u7b56\u7684\u654f\u611f\u7a0b\u5ea6\u7684\u5012\u6570</p> <p>\u6240\u4ee5\u6839\u636e\u4ee5\u4e0a\u63a8\u5bfc\u53ef\u77e5\uff0cIS-LM\u5bf9\u8d27\u5e01\u653f\u7b56\u8d8a\u654f\u611f\uff0cAD\u659c\u7387\u8d8a\u5e73\u7f13\u3002\u4e5f\u5c31\u662fIS\u66f2\u7ebf\u8d8a\u5e73\u7f13\uff0cLM\u66f2\u7ebf\u8d8a\u9661\u5ced\uff0cAD\u66f2\u7ebf\u8d8a\u5e73\u7f13\u3002</p> <p>\u90a3\u4e48\u4e5f\u5c31\u662f \u6295\u8d44\u5bf9\u5229\u7387\u7684\u654f\u611f\u7a0b\u5ea6\u8d8a\u9ad8\u3001\u8fb9\u9645\u6d88\u8d39\u6307\u6570\u8d8a\u5927\u3001\u8d27\u5e01\u9700\u6c42\u5bf9\u5229\u7387\u7684\u654f\u611f\u7a0b\u5ea6\u8d8a\u4f4e\u3001\u8d27\u5e01\u9700\u6c42\u5bf9\u6536\u5165\u7684\u654f\u611f\u7a0b\u5ea6\u8d8a\u9ad8\uff0cAD\u66f2\u7ebf\u8d8a\u5e73\u7f13\u3002</p>"},{"location":"ClassNotes/macroeconomics/%E5%AF%BC%E8%AE%BA/","title":"\u5bfc\u8bba","text":""},{"location":"ClassNotes/macroeconomics/%E5%AF%BC%E8%AE%BA/#_1","title":"\u5bfc\u8bba","text":""},{"location":"ClassNotes/macroeconomics/%E5%AF%BC%E8%AE%BA/#_2","title":"\u5b8f\u89c2\u548c\u5fae\u89c2\u7684\u533a\u522b","text":"\u5b8f\u89c2 \u5fae\u89c2 CPI \u4ef7\u683c GDP \u4ea7\u91cf <p>\u5408\u6210\u8c2c\u8bef\u5047\u8bbe</p> <p>\u5fae\u89c2\u4e0a\u800c\u8a00\u662f\u5bf9\u7684\u4e1c\u897f\uff0c\u5728\u5b8f\u89c2\u4e0a\u5e76\u4e0d\u603b\u662f\u5bf9\u7684\uff1b\u53cd\u4e4b\uff0c\u5728\u5b8f\u89c2\u4e0a\u662f\u5bf9\u7684\u4e1c\u897f\uff0c\u5728\u5fae\u89c2\u4e0a\u53ef\u80fd\u662f\u5341\u5206\u9519\u8bef\u7684\u3002</p> <p>\u6324\u5151 \u4e2a\u4f53\u8feb\u5207\u5730\u60f3\u8981\u4ece\u94f6\u884c\u53d6\u94b1\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f15\u53d1\u4e00\u4e9b\u793e\u4f1a\u8206\u8bba\u6307\u5411\u94f6\u884c\u7684\u7ecf\u8425\u4e0d\u5584\uff0c\u5f53\u672c\u91d1\u4e0d\u5b89\u5168\u7684\u65f6\u5019\uff0c\u5229\u606f\u662f\u4e0d\u91cd\u8981\u7684\u3002\u53cd\u800c\u5f15\u8d77\u96c6\u4f53\u8feb\u5207\u5730\u4ece\u94f6\u884c\u53d6\u94b1\uff0c\u800c\u5bfc\u81f4\u94f6\u884c\u7834\u4ea7\u3001\u96c6\u4f53\u5229\u76ca\u53d7\u635f\u3002</p> <p>\u5371\u673a\u53cd\u6620\u51fa\u4fe1\u4efb\u7f3a\u5931\u7684\u5171\u6027\u95ee\u9898\uff0c\u6324\u5151*\u540e\u5df2\u7136\u5f62\u6210\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u201c\u56da\u5f92\u56f0\u5883\u201d\uff0c\u5373\u5404\u65b9\u90fd\u9009\u62e9\u4fdd\u62a4\u81ea\u8eab\u5229\u76ca\uff0c\u7531\u6b64\u51fa\u73b0\u4e86\u4e2a\u4f53\u7406\u6027\u540e\u96c6\u4f53\u4e0d\u7406\u6027\u7684*\u5408\u6210\u8c2c\u8bef</p> <p>\u5e02\u573a\u975e\u51fa\u6e05\u5047\u8bbe</p> <p>\u4e24\u79cd\u5047\u8bbe</p> <ol> <li>\u83dc\u5355\u6210\u672c\u3002\u53d8\u52a8\u83dc\u5355\u4ef7\u683c\u4f1a\u6709\u6210\u672c\uff0c\u6211\u8981\u52a8\u4ef7\u683c\u65f6\u5c31\u8981\u8003\u8651\uff0c\u662f\u5426\u53d8\u52a8\u4ef7\u683c\u5e26\u6765\u7684\u6536\u76ca\u9ad8\u4e8e\u6210\u672c\u3002\u4e5f\u5c31\u662f\u8bf4\u5e02\u573a\u4ef7\u683c\u6539\u53d8\u662f\u6709\u6210\u672c\u7684\u3002</li> <li>\u8fb9\u9645\u7a0e\u7387</li> </ol> <p>\u5e02\u573a\u5931\u7075</p> <p>\u56e0\u4e3a\u5e02\u573a\u975e\u51fa\u6e05\u5047\u8bbe\uff0c\u4e0d\u4e00\u5b9a\u80fd\u8fbe\u5230\u5e15\u7d2f\u6258\u6700\u4f18\u3002</p> <p>\u56fd\u5bb6\u5e72\u9884</p> <p>\u56e0\u4e3a\u5e02\u573a\u4f1a\u5931\u7075\uff0c\u6240\u4ee5\u9700\u8981\u56fd\u5bb6\u5e72\u9884</p>"},{"location":"ClassNotes/macroeconomics/%E5%AF%BC%E8%AE%BA/#_3","title":"\u51ef\u6069\u65af\u9769\u547d","text":""},{"location":"ClassNotes/macroeconomics/%E5%AF%BC%E8%AE%BA/#_4","title":"\u4e09\u4e2a\u89c4\u5f8b","text":"<p>\u8fb9\u9645\u6d88\u8d39\u503e\u5411\u9012\u51cf\u89c4\u5f8b</p> <p>\u6536\u5165\u589e\u957f\u7684\u65f6\u5019\uff0c\u6d88\u8d39\u589e\u957f\u7684\u901f\u7387\u8ddf\u4e0d\u4e0a\u6536\u5165\u589e\u957f\u7684\u901f\u7387\u3002\u4e5f\u5c31\u662f\u8bf4\u6d88\u8d39-\u6536\u5165\u51fd\u6570\u7684\u4e8c\u9636\u5bfc\u6570\u662f\u8d1f\u7684\u3002 \u6ca1\u6709\u6d88\u8d39\u6389\u7684\u6536\u5165\u53eb\u505a**\u50a8\u84c4** \u6536\u5165\u548c\u4ea7\u51fa\u662f\u5bf9\u7b49\u7684\u6982\u5ff5\uff0c\u201c\u4e00\u4efd\u6536\u5165\uff0c\u4e00\u4efd\u4ea7\u51fa\u201d\u3002\u53ea\u8981\u53c8\u4e86\u50a8\u84c4\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709**\u751f\u4ea7\u8fc7\u5269**\u7684\u73b0\u8c61\u3002</p> <p>\u5982\u679c\u90a3\u4e00\u90e8\u5206\u4ea7\u54c1\u53ef\u4ee5\u4f7f\u5f97\u4f01\u4e1a\u62ff\u53bb**\u6295\u8d44**\uff0c\u90a3\u4e48\u6700\u540e\u8fd8\u662f\u6d88\u8017\u6389\u7684\u3002</p> <p>\u6295\u8d44\u8fb9\u9645\u6536\u76ca\u9012\u51cf\u89c4\u5f8b</p> <p>\u4e0d\u65ad\u8ffd\u52a0\u6295\u8d44\uff0c\u5728\u8be5\u9886\u57df\u7684\u6295\u8d44\u5c31\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u8be5\u9886\u57df\u751f\u4ea7\u7684\u4ea7\u54c1\u5c31\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u90a3\u4e48\u4ea7\u54c1\u7684\u4ef7\u683c\u5c31\u6709\u4e0b\u964d\u8d8b\u52bf\uff0c\u4f46\u662f\u539f\u6750\u6599\u3001\u52b3\u52a8\u529b\u6210\u672c\u4e0a\u6da8\uff08\u56e0\u4e3a\u9700\u6c42\u53d8\u591a\uff09\u3002\u6700\u540e\uff0c\u6536\u76ca\u662f\u9012\u51cf\u7684\u3002\u4f46\u662f\u6280\u672f\u521b\u65b0\u53ef\u4ee5\u6539\u53d8\u8fd9\u4e00\u89c4\u5f8b\u3002</p> <p>\u8d44\u91d1\u7684\u6210\u672c\uff0c\u5229\u7387\uff08\u5404\u5bb6\u5546\u4e1a\u94f6\u884c\u8d37\u7ed9\u4f01\u4e1a\u7684\u5229\u7387\uff0c\u897f\u65b9\u56fd\u5bb6\u4e0d\u4f1a\u5e72\u9884\u5229\u7387\uff0c\u4f46\u662f\u6211\u56fd\u4f1a\uff09\u4f1a\u6210\u4e3a\u6295\u8d44\u5929\u7136\u7684\u5c4f\u969c\uff0c\u5229\u7387\u4e0d\u65ad\u4e0b\u964d\u4f1a\u4fc3\u8fdb\u6295\u8d44\u3002</p> <p>\u5404\u56fd\u7684\u4e2d\u592e\u94f6\u884c\u4f1a\u5145\u5f53\u4e2a\u5bb6\u5546\u4e1a\u94f6\u884c\u7684\u6700\u7ec8\u8d37\u6b3e\u4eba\uff0c\u6b64\u65f6\u4f1a\u51fa\u73b0\u8d1f\u5229\u7387\u7684\u60c5\u51b5\uff0c\u6765\u5f15\u5bfc\u5e02\u573a\u5229\u7387\u3002</p> <p>\u8d1f\u5229\u7387**\u5c31\u662f\u5c06\u901a\u5e38\u7684\u5b58\u6b3e\u5229\u7387\u6539\u4e3a\u8d1f\u503c**\u3002 \u6709\u65f6\u9002\u7528\u4e8e\u592e\u884c\u63a5\u53d7\u6c11\u95f4\u94f6\u884c\u5b58\u6b3e\u65f6\u7684\u5229\u7387\u3002\u4e00\u822c\u800c\u8a00\u94f6\u884c\u5411\u592e\u884c\u5b58\u6b3e\u65f6\u53ef\u83b7\u5f97\u5229\u606f\uff0c\u4f46\u5728\u8d1f\u5229\u7387\u60c5\u51b5\u4e0b\u53cd\u800c\u9700\u8981\u652f\u4ed8\u624b\u7eed\u8d39\u3002\u94f6\u884c\u5c06\u94b1\u5b58\u5165\u592e\u884c\u4f1a\u51fa\u73b0\u7f29\u6c34\uff0c\u56e0\u6b64\u6709\u671b\u4fc3\u4f7f\u94f6\u884c\u79ef\u6781\u653e\u5bbd\u9762\u5411\u4f01\u4e1a\u7684\u8d37\u6b3e\u3002</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c*\u5229\u7387\u4e0b\u964d*\u65f6\uff0c\u80a1\u7968\u7684\u4ef7\u683c\u5c31\u4e0a\u6da8\uff1b\u5229\u7387\u4e0a\u5347\u65f6\uff0c\u80a1\u7968\u7684\u4ef7\u683c\u5c31\u4f1a\u4e0b\u8dcc\u3002</p> <p>\u7075\u6d3b\u504f\u597d\u548c\u6d41\u52a8\u6027\u9677\u9631</p> <p>\u5229\u7387\u4e0b\u964d\u540e\uff0c\u4eba\u4eec\u4f1a\u66f4\u504f\u597d\u7075\u6d3b\u6027\uff0c\u8fd9\u6837\u94f6\u884c\u5185\u7684\u50a8\u84c4\u5c31\u53d8\u5c11\uff0c\u94f6\u884c\u53ef\u4ee5\u501f\u7ed9\u4f01\u4e1a\u7684\u8d37\u6b3e\u5c31\u5c11\u4e86\u3002\u6295\u8d44\u5c31\u4e0d\u80fd\u65e0\u9650\u5236\u5730\u589e\u957f\u3002</p> <p>\u6240\u4ee5\uff0c\u751f\u4ea7\u8fc7\u5269\u4f1a\u53d8\u6210\u5371\u673a\uff01</p> <p></p>"},{"location":"ClassNotes/macroeconomics/%E5%AF%BC%E8%AE%BA/#_5","title":"\u53cd\u5371\u673a\u653f\u7b56","text":"<ul> <li>\u653f\u5e9c\u901a\u8fc7\u53cd\u5371\u673a\u653f\u7b56\u5e72\u9884\u7ecf\u6d4e</li> <li>\u901a\u8fc7\u653f\u5e9c\u8d2d\u4e70\u6269\u5927\u6709\u6548\u9700\u6c42</li> <li>\u901a\u8fc7\u653f\u5e9c\u8d22\u653f\u8d64\u5b57\u964d\u4f4e\u5931\u4e1a\u7387</li> </ul> <p>\u77db\u76fe\uff1a</p> <ol> <li>\u5e73\u767d\u65e0\u6545\u53d1\u653e\u949e\u7968\u4f1a\u964d\u4f4e\u767e\u59d3\u7684\u52b3\u52a8\u79ef\u6781\u6027</li> <li>\u53d1\u653e\u949e\u7968\u4f1a\u4fc3\u8fdb\u767e\u59d3\u6d88\u8d39</li> </ol> <p>\u5982\u4f55\u8981\u628a\u94b1\u53d1\u51fa\u53bb\uff0c\u4e14\u4e0d\u80fd\u51cf\u635f\u8d27\u5e01\u7684\u6fc0\u52b1\u529f\u80fd\uff0c\u4e0d\u80fd\u8ba9\u767e\u59d3\u635f\u5931\u52b3\u52a8\u6548\u7387\uff1f \u8fdb\u884c\u57fa\u7840\u5efa\u8bbe\uff08\u4fee\u8def\u3001\u4fee\u5730\u94c1\uff09 + \u4e3a\u52b3\u52a8\u529b\u53d1\u653e\u5de5\u8d44</p>"},{"location":"ClassNotes/macroeconomics/%E5%AF%BC%E8%AE%BA/#_6","title":"\u9a6c\u514b\u601d\u3001\u9a6c\u6b47\u5c14\u548c\u51ef\u6069\u65af","text":"<p>\u9a6c\u514b\u601d\u548c\u51ef\u6069\u65af\u90fd\u8ba4\u4e3a\u5e02\u573a\u81ea\u8eab\u4e0d\u80fd\u5e73\u8861\uff0c\u4f46\u9a6c\u6b47\u5c14\u8ba4\u4e3a\u5e02\u573a\u662f\u4e00\u53f0\u7cbe\u5bc6\u7684\u673a\u5668\uff0c\u80fd\u591f\u81ea\u52a8\u5b9e\u73b0\u5e15\u7d2f\u6258\u4f18\u5316\u3002</p> <p>\u9a6c\u514b\u601d\uff1a\u8d44\u672c\u4e3b\u4e49\u5e02\u573a\u7ecf\u6d4e\u5fc5\u7136\u4f1a\u51fa\u73b0\u4ee5\u751f\u4ea7\u8fc7\u5269\u4e3a\u7279\u5f81\u7684\u5371\u673a\u3002</p> <p>\u9a6c\u6b47\u5c14\uff1a\u5e02\u573a\u81ea\u8eab\u53ef\u4ee5\u5e73\u8861\uff0c\u4e0d\u9700\u8981\u5916\u529b\u8fdb\u884c\u8c03\u63a7\u3002</p> <p>\u51ef\u6069\u65af\uff1a\u5e02\u573a\u81ea\u8eab\u4e0d\u80fd\u5e73\u8861\u3002</p>"},{"location":"%E5%B0%8F%E7%8E%A9%E6%84%8F/%E4%BD%BF%E7%94%A8Pymobiledevice3%E6%9D%A5%E8%BF%9B%E8%A1%8Cios%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/","title":"\u4f7f\u7528Pymobiledevice3\u6765\u8fdb\u884cios\u865a\u62df\u5b9a\u4f4d","text":""},{"location":"%E5%B0%8F%E7%8E%A9%E6%84%8F/%E4%BD%BF%E7%94%A8Pymobiledevice3%E6%9D%A5%E8%BF%9B%E8%A1%8Cios%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/#pymobiledevice3ios","title":"\u4f7f\u7528Pymobiledevice3\u6765\u8fdb\u884cios\u865a\u62df\u5b9a\u4f4d","text":"<ol> <li>\u5148\u5b89\u88c5\u63d2\u4ef6</li> </ol> <pre><code>python3 -m pip install -U pymobiledevice3\n</code></pre> <ol> <li>\u521b\u5efatunnels</li> </ol> <pre><code>sudo python3 -m pymobiledevice3 remote start-tunnel\n</code></pre> <p>\u9700\u8981 root \u6743\u9650\uff0c\u56e0\u4e3a\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 TUN/TAP \u8bbe\u5907\uff0c\u8fd9\u662f\u4e00\u9879\u9ad8\u6743\u9650\u64cd\u4f5c\u3002\u8f93\u51fa\u5e94\u8be5\u7c7b\u4f3c\u4e8e\uff1a</p> <pre><code>Interface: utun6\nRSD Address: fd7b:e5b:6f53::1\nRSD Port: 64337\nUse the follow connection option:\n--rsd fd7b:e5b:6f53::1 64337\n</code></pre> <p>\u8bb0\u5f55\u4e0b\u8fd9\u91cc\u7684RSD\u5730\u5740\u548cRSD\u63a5\u53e3\uff0c\u540e\u9762\u4f1a\u7528\u5230\u3002</p> <ol> <li>\u6302\u8f7dDeveloper Disk Image &amp; \u5f00\u59cb\u865a\u62df\u5b9a\u4f4d</li> </ol> <p>\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6302\u8f7dDeveloper Disk Image\uff1a</p> <pre><code>sudo pymobiledevice3 mounter auto-mount\n</code></pre> <p>\u968f\u540e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u884c\u865a\u62df\u5b9a\u4f4d\uff1a</p> <pre><code>pymobiledevice3 developer dvt simulate-location set --rsd &lt;HOST&gt; &lt;PORT&gt; -- x y\n</code></pre> <p>\u5176\u4e2d\uff0c<code>&lt;HOST&gt;</code>\u548c<code>&lt;PORT&gt;</code>\u5c31\u662f\u4e0a\u9762\u8bb0\u5f55\u7684RSD\u5730\u5740\u548cRSD\u63a5\u53e3\uff0c<code>x</code>\u548c<code>y</code>\u662f\u7ecf\u7eac\u5ea6\u5750\u6807\u3002\u6839\u636e\u81ea\u884c\u7684\u9700\u8981\u66ff\u6362\u5373\u53ef\u3002</p> <p>\u66f4\u591a\u7528\u6cd5</p> <pre><code>Usage: python -m pymobiledevice3 [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  activation       activation options\n  afc              FileSystem utils\n  amfi             amfi options\n  apps             application options\n  backup2          backup utils\n  bonjour          bonjour options\n  companion        companion options\n  crash            crash report options\n  developer        developer options.\n  diagnostics      diagnostics options\n  lockdown         lockdown options\n  mounter          mounter options\n  notification     notification options\n  pcap             sniff device traffic\n  power-assertion  Create a power assertion (wraps...\n  processes        processes cli\n  profile          profile options\n  provision        privision options\n  remote           remote options\n  restore          restore options\n  springboard      springboard options\n  syslog           syslog options\n  usbmux           usbmuxd options\n  webinspector     webinspector options\n  version          get installed package version\n</code></pre> <p>\u53c2\u8003\uff1a</p> <ol> <li>https://shawnhuang.io/posts/ios-17-location-simulation/</li> <li>https://github.com/RManLuo/FakePosition</li> <li>https://github.com/doronz88/pymobiledevice3</li> </ol>"}]}