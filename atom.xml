<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜航船</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-05T00:40:15.969Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Yule</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/08/05/CV/CV-notes/"/>
    <id>http://example.com/2023/08/05/CV/CV-notes/</id>
    <published>2023-08-05T00:29:48.574Z</published>
    <updated>2023-08-05T00:40:15.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CV"><a href="#CV" class="headerlink" title="CV"></a>CV</h1><h2 id="Lec2"><a href="#Lec2" class="headerlink" title="Lec2"></a>Lec2</h2><h3 id="Camera-parameters"><a href="#Camera-parameters" class="headerlink" title="Camera parameters"></a>Camera parameters</h3><div class="note info modern"><p>The commonly used coordinate systems in Computer Vision are</p><ol><li><strong>World coordinate system (3D)</strong></li><li><strong>Camera coordinate system (3D)</strong></li><li><strong>Image coordinate system (2D)</strong></li><li><strong>Pixel coordinate system (2D)</strong></li></ol></div><p><img src="/2023/08/05/CV/CV-notes/1*9RqYQTkYlPRZIG-GZWaddQ.png" alt="img"></p><p><img src="/2023/08/05/CV/CV-notes/1*qaMTLhQL-XNv_S1RJ7W21g.jpeg" alt="img"></p><p><img src="/2023/08/05/CV/CV-notes/1*e-Z4RU56CDGNEpKTkEMbiA.jpeg" alt="img"></p><p><img src="/2023/08/05/CV/CV-notes/1*-5UAHG6hOodnDrF5ZriNIQ.jpeg" alt="img"></p><p><img src="/2023/08/05/CV/CV-notes/1*owK4O-NkFj-xFlCAFMzX7w.jpeg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CV&quot;&gt;&lt;a href=&quot;#CV&quot; class=&quot;headerlink&quot; title=&quot;CV&quot;&gt;&lt;/a&gt;CV&lt;/h1&gt;&lt;h2 id=&quot;Lec2&quot;&gt;&lt;a href=&quot;#Lec2&quot; class=&quot;headerlink&quot; title=&quot;Lec2&quot;&gt;&lt;/a&gt;Lec2&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/07/26/Computer%20Vision/"/>
    <id>http://example.com/2023/07/26/Computer%20Vision/</id>
    <published>2023-07-26T13:39:05.619Z</published>
    <updated>2023-07-28T06:56:01.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Computer-Vision"><a href="#Computer-Vision" class="headerlink" title="Computer Vision"></a>Computer Vision</h1><h2 id="Lecture1-Introduction"><a href="#Lecture1-Introduction" class="headerlink" title="Lecture1 Introduction"></a>Lecture1 Introduction</h2><ul><li><p><strong>Robustness</strong>. In computer science, robustness is the ability of a computer system to cope with errors during execution and cope with erroneous input.</p><blockquote><p>The system does not crash at the slightest disturbance.</p></blockquote></li></ul><h2 id="Lecture2-Image-Formation"><a href="#Lecture2-Image-Formation" class="headerlink" title="Lecture2 Image Formation"></a>Lecture2 Image Formation</h2><h3 id="2-1-Primitives-and-Transformations"><a href="#2-1-Primitives-and-Transformations" class="headerlink" title="2.1 Primitives and Transformations"></a>2.1 Primitives and Transformations</h3><p>projective</p><p>在2D平面上，inhomogeneous coordinates is $x &#x3D; \begin{pmatrix} x\y\ \end{pmatrix} \in \mathbb{R}^2$</p><p>homogeneous coordinated $\tilde{x} &#x3D; \begin{pmatrix} \tilde{x}\\tilde{y}\\tilde{w}\\end{pmatrix} \in \mathbb{P}^2$</p><p>2D projective space $\mathbb{P}^2 &#x3D; \mathbb{R}^3 \setminus {(0,0,0)}$</p><ul><li>A homogeneous vector can be converted back into an inhomogeneous vector by dividing through by the last element $\tilde{w}$</li></ul><p><strong>augmented vector</strong> all homogeneous vectors $\bar{x}$ that have a on e at the end. 是该规模向量equivalence class中的一个元素，该元素的特征是以1作为last entry。 </p><p><strong>ideal points(points at infinity)</strong> Homogeneous points whose last element is $\tilde{w} &#x3D; 0$. These points can’t be represented with inhomogeneous coordinates!</p><p><img src="/2023/07/26/Computer%20Vision/image-20230727082727818.png" alt="image-20230727082727818"></p><p>quadric equations(二次曲面等式 )</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Computer-Vision&quot;&gt;&lt;a href=&quot;#Computer-Vision&quot; class=&quot;headerlink&quot; title=&quot;Computer Vision&quot;&gt;&lt;/a&gt;Computer Vision&lt;/h1&gt;&lt;h2 id=&quot;Lecture1-Intr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LaTeX数学公式语法学习记录</title>
    <link href="http://example.com/2023/07/26/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2023/07/26/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2023-07-26T10:05:05.000Z</published>
    <updated>2023-07-26T13:38:47.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="公式编号"><a href="#公式编号" class="headerlink" title="公式编号"></a>公式编号</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span> f(x) = a - b <span class="keyword">\tag</span>&#123;1.1&#125; <span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><ul><li><p>点乘<code>2 = 2 \cdot x</code> $2 &#x3D; 2 \cdot x$</p></li><li><p>不等于<code>1 \neq 0</code> $ 1 \neq 0$</p></li><li><p>恒等于<code>1 \equiv 1</code> $1 \equiv 1$</p></li><li><p>取模<code>1 = 9 \bmod 2</code> $1 &#x3D; 9 \bmod 2$</p></li><li><p>下标<code>log_&#123;2&#125;&#123;x+1&#125;</code> $ log_{2}{x+1}$</p></li><li><p>上标<code>e^x</code> $ e^x$</p></li><li><p>求导<code>X&#39;</code> $ X’$</p></li><li><p>根号<code>\sqrt&#123;X+4&#125;</code>  $\sqrt {X+4}$</p></li><li><p>n次方根<code>\sqrt[3]&#123;21&#125;</code>  $\sqrt[3] {21}$</p></li><li><p>分数<code>\frac&#123;3&#125;&#123;4&#125;</code> $\frac{3}{4}$</p></li><li><p>上加线<code>\overline&#123;x&#125;</code>  $\overline{x}$</p></li><li><p>下加线<code>\underline&#123;x&#125;</code> $\underline{x}$</p></li><li><p>上括号<code>\overbrace&#123;x&#125;^&#123;y&#125;</code> $\overbrace{x}^{y}$</p></li><li><p>下括号<code>\underbrace&#123;x&#125;_&#123;y&#125;</code> $\underbrace{x}_{y}$</p></li><li><p>向量<code>\vec&#123;x&#125;</code> $\vec{x}$</p></li><li><p>右箭头<code>\overrightarrow&#123;x&#125;</code> $\overrightarrow{x}$</p></li><li><p>左箭头<code>\overleftarrow&#123;x&#125;</code> $\overleftarrow{x}$</p></li><li><p>积分<code>\int_&#123;1&#125;^&#123;5&#125;x\mathrm&#123;d&#125;x</code>$\int_{1}^{5}x\mathrm{d}x$</p></li><li><p>极限<code>\lim_&#123;x \to \infty&#125;</code> $\lim_{x \to \infty}$</p></li><li><p>求和<code>\sum_&#123;n=1&#125;^&#123;20&#125; n^&#123;2&#125;</code> $\sum_{n&#x3D;1}^{20} n^{2}$</p></li><li><p>求积<code>\prod_&#123;j=1&#125;^&#123;3&#125; y_&#123;j&#125;</code> $\prod_{j&#x3D;1}^{3} y_{j}$</p></li><li><p>省略号<code>x_&#123;1&#125;,x_&#123;2&#125;,\ldots,x_&#123;5&#125;</code>$x_{1},x_{2},\ldots,x_{5}$</p></li><li><p>hat<code>\hat&#123;x&#125;</code> $\hat{x}$</p></li><li><p>bar<code>\bar&#123;x&#125;</code> $\bar{x}$</p></li><li><p>tilde <code>\tilde&#123;x&#125;</code> $\tilde{x}$</p></li><li><p>矩阵 <code>\begin&#123;matrix&#125;a\\ b\\ \end&#123;matrix&#125;</code> $\begin{matrix}a\ b\ \end{matrix}$</p></li><li><p><code>\begin&#123;pmatrix&#125;a\\ b\\ \end&#123;pmatrix&#125;</code>$\begin{pmatrix}a\ b\ \end{pmatrix}$</p></li><li><p><code>\begin&#123;vmatrix&#125;a\\ b\\ \end&#123;vmatrix&#125;</code> $\begin{vmatrix}a\ b\ \end{vmatrix}$</p></li><li><pre><code class="LeTeX">\begin&#123;bmatrix&#125;1 &amp; 2 &amp; \cdots \\67 &amp; 95 &amp; \cdots \\\vdots  &amp; \vdots &amp; \ddots \\\end&#123;bmatrix&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- $\begin&#123;bmatrix&#125;</span><br><span class="line">  1 &amp; 2 &amp; \cdots \\</span><br><span class="line">  67 &amp; 95 &amp; \cdots \\</span><br><span class="line">  \vdots  &amp; \vdots &amp; \ddots \\</span><br><span class="line">  \end&#123;bmatrix&#125;$</span><br><span class="line"></span><br><span class="line">### 希腊字母</span><br><span class="line">  ![img](LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/v2-da3e717cf670582fbfbdddee33073524_1440w.webp)</span><br><span class="line"></span><br><span class="line">### 多行公式</span><br><span class="line"></span><br><span class="line">- ```latex</span><br><span class="line">  D(x) = \begin&#123;cases&#125;</span><br><span class="line">  \lim\limits_&#123;x \to 0&#125; \frac&#123;a^x&#125;&#123;b+c&#125;, &amp; x&lt;3 \\</span><br><span class="line">  \pi, &amp; x=3 \\</span><br><span class="line">  \int_a^&#123;3b&#125;x_&#123;ij&#125;+e^2 \mathrm&#123;d&#125;x,&amp; x&gt;3 \\</span><br><span class="line">  \end&#123;cases&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>$D(x) &#x3D; \begin{cases}<br>\lim\limits_{x \to 0} \frac{a^x}{b+c}, &amp; x&lt;3 \<br>\pi, &amp; x&#x3D;3 \<br>\int_a^{3b}x_{ij}+e^2 \mathrm{d}x,&amp; x&gt;3 \<br>\end{cases}$</p></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>实数集 <code>\mathbb&#123;R&#125;</code> $\mathbb{R}$ </li><li>有理数集 <code>\mathbf&#123;Q&#125;</code> $\mathbf{Q}$</li></ul><div class="note info no-icon modern"><p>\mathbb是空心字符，\mathbf是实心字符</p></div><ul><li>空集 <code>\emptyset</code> $\emptyset$</li><li>属于 <code>\in</code> $\in$</li><li>包含于 <code>\subseteq</code> $\subseteq$</li><li>并 <code>\cup</code> $\cup$</li><li><code>\bigcup_&#123;i=1&#125;^m \mathbf&#123;X&#125;_i</code> $\bigcup_{i&#x3D;1}^m \mathbf{X}_i$</li></ul>]]></content>
    
    
    <summary type="html">记录一下LaTeX的部分数学公式语法</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LaTeX" scheme="http://example.com/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统概论(ICS)课程笔记Chapter17【22-23暑短】</title>
    <link href="http://example.com/2023/07/26/ICS-Chapter17/"/>
    <id>http://example.com/2023/07/26/ICS-Chapter17/</id>
    <published>2023-07-26T00:35:35.000Z</published>
    <updated>2023-07-26T11:11:00.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter17"><a href="#Chapter17" class="headerlink" title="Chapter17"></a>Chapter17</h1><h2 id="17-1-Introduction"><a href="#17-1-Introduction" class="headerlink" title="17.1 Introduction"></a>17.1 Introduction</h2><div class="note primary no-icon modern"><p>recursive: solving the problem by stating that we’ll solve it on successively smaller versions of the problem </p></div><h2 id="17-2-What-Is-Recursion"><a href="#17-2-What-Is-Recursion" class="headerlink" title="17.2 What Is Recursion?"></a>17.2 What Is Recursion?</h2><ul><li>Definition: A function that calls itself is a recursive function. </li><li>In mathematics, we use <em>recurrence equations</em> to express such functions.</li></ul><h2 id="17-3-Recursion-vs-Iteration"><a href="#17-3-Recursion-vs-Iteration" class="headerlink" title="17.3 Recursion vs. Iteration"></a>17.3 Recursion vs. Iteration</h2><ul><li><p>所有的递归函数都能被写成迭代（循环）的形式，但是递归是更简单、更优雅的。</p><blockquote><p>The power of recursion lies in its ability to elegantly express the computation flow for certain programming tasks.</p></blockquote></li><li><p>递归会比迭代运行得更慢（前提是编译器不会把递归最优化）</p></li><li><blockquote><p>provided the compiler did not optimize away the recursion, which it can do through a simple transformation that converts certain types of recursive code to iterative code when the recursion is the last operation in the function, i.e., it occurs at the tail of the function</p></blockquote></li><li><p>有些编译器会把一些<strong>简单形式的尾递归自</strong>动转变成迭代的代码</p></li></ul><h2 id="17-4-Towers-of-Hanoi"><a href="#17-4-Towers-of-Hanoi" class="headerlink" title="17.4 Towers of Hanoi"></a>17.4 Towers of Hanoi</h2><img src="/2023/07/26/ICS-Chapter17/image-20230726113744877.png" alt="image-20230726113744877" style="zoom:50%;"><ul><li>Recurrence equation: Move(n, target) &#x3D; Move(n-1, intermediate) + Move(1, target) + Move(n-1, target)</li></ul><div class="note info no-icon modern"><p>All recursive definitions require a <em>base case</em>, which ends the recursion.</p><p>Without a base case, a recursive function would never end, similar to an infinite loop in conventional iteration.</p></div><ul><li>In the way we have formulated the problem, the base case involves moving the smallest disk (disk 1). Moving disk 1 requires no other disks to be moved since it is always on top and can be moved directly from one post to any another without moving any other disks.</li></ul><h2 id="17-5-Fibonacci-Numbers"><a href="#17-5-Fibonacci-Numbers" class="headerlink" title="17.5 Fibonacci Numbers"></a>17.5 Fibonacci Numbers</h2><h2 id="17-6-Binary-Search"><a href="#17-6-Binary-Search" class="headerlink" title="17.6 Binary Search"></a>17.6 Binary Search</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This function returns the position of &#x27;item&#x27; if it exists</span></span><br><span class="line"><span class="comment">// between list[start] and list[end], or -1 if it does not.</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">BinarySearch</span><span class="params">(<span class="type">int</span> item, <span class="type">int</span> <span class="built_in">list</span>[], <span class="type">int</span> start, <span class="type">int</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> middle = (end + start) / <span class="number">2</span>; </span><br><span class="line">      </span><br><span class="line"><span class="comment">// Did we not find what we are looking for?</span></span><br><span class="line"> <span class="keyword">if</span> (end &lt; start)</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Did we find the item?</span></span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">list</span>[middle] = = item)</span><br><span class="line"> <span class="keyword">return</span> middle;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should we search the first half of the array?</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (item &lt; <span class="built_in">list</span>[middle])</span><br><span class="line"> <span class="keyword">return</span> BinarySearch(item, <span class="built_in">list</span>, start, middle - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or should we search the second half of the array?</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> BinarySearch(item, <span class="built_in">list</span>, middle + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>二分搜索(binary search)的复杂度为$log_{2}{n}$，但是线性搜索(sequential search)的复杂度为n。所以当n很大时，二分搜索的复杂度更低。</p><h2 id="17-7-Escaping-a-Maze"><a href="#17-7-Escaping-a-Maze" class="headerlink" title="17.7 Escaping a Maze"></a>17.7 Escaping a Maze</h2><p>先前第八章中讲到过用LC-3来实现迷宫解谜，现在将使用C实现。</p><ul><li>用二维数组记录迷宫数据，<code>&#39;X&#39;</code>– blocked <code>&#39; &#39;</code> – open space<code>E</code> – exit</li></ul><p><img src="/2023/07/26/ICS-Chapter17/image-20230726184408419.png" alt="image-20230726184408419"></p><h2 id="17-8-Summary"><a href="#17-8-Summary" class="headerlink" title="17.8 Summary"></a>17.8 Summary</h2><div class="note info no-icon modern"><p>We can solve a problem recursively by using a function that calls itself on smaller subproblems. With recursion, we state the function, say <em>f</em> (<em>n</em>), in terms of the same function on <strong>smaller values</strong> of <em>n</em> .(比如说n-1)</p><p>For the recursion to eventually terminate, recursive calls require a base case.</p><p>Recursion is a powerful programming tool that, when applied to the right problem, can make the task of programming considerably easier. (对于某些问题，递归能极大程度地简化，如汉诺塔和走迷宫，但是对于另外一些问题，递归反而会比迭代复杂，如斐波那契数列和阶乘。)</p><p>At the lower levels, recursive functions are handled in exactly the same man- ner as any other function call. The run-time stack mechanism enables this by systematically allocating a stack frame for each function invocation, providing storage for each invocation such that it doesn’t interfere with storage for any other invocation.</p></div>]]></content>
    
    
    <summary type="html">计算机系统概论Chapter17课程笔记，教材采用Yale Patt - Introduction to Computing Systems(3rd Edition)</summary>
    
    
    
    <category term="课程笔记" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ICS" scheme="http://example.com/tags/ICS/"/>
    
    <category term="计算机系统概论" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统概论(ICS)课程笔记Chapter1【22-23暑短】</title>
    <link href="http://example.com/2023/07/25/ICS-Chapter1/"/>
    <id>http://example.com/2023/07/25/ICS-Chapter1/</id>
    <published>2023-07-25T00:35:35.000Z</published>
    <updated>2023-07-25T00:53:01.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction-to-Computing-Systems"><a href="#Introduction-to-Computing-Systems" class="headerlink" title="Introduction to Computing Systems"></a>Introduction to Computing Systems</h1><h2 id="Chapter-1-Welcome-Aboard"><a href="#Chapter-1-Welcome-Aboard" class="headerlink" title="Chapter 1 Welcome Aboard"></a>Chapter 1 Welcome Aboard</h2><h3 id="1-3-Two-Recurring-Themes"><a href="#1-3-Two-Recurring-Themes" class="headerlink" title="1.3 Two Recurring Themes"></a>1.3 Two Recurring Themes</h3><h4 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h4><div class="note default no-icon modern"><p>Abstraction is a technique for establishing a simpler way for a person to interact with a system, removing the details that are unnecessary for the person to interact effectively with that system. Our ability to abstract is very much a productivity enhancer. It allows us to deal with a situation at a higher level, focusing on the essential aspects, while keeping the component ideas in the background. It allows us to be more efficient in our use of time and brain activity. It allows us to not get bogged down in the detail when everything about the detail is working just fine.</p></div><ul><li><p>We needn’t know the layers below of one machine. We have to make a new level of abstraction.</p></li><li><p>Deconstruct — the ability to go from the abstraction back to its component parts.</p></li></ul><h4 id="Hardware-vs-Software"><a href="#Hardware-vs-Software" class="headerlink" title="Hardware vs. Software"></a>Hardware vs. Software</h4><ul><li><p>We shouldn’t separate people by Hardware and Software.</p></li><li><p>There are important topics in the software that are very deeply interwoven with topics in the hardware. Our contention is that mastering either is easier if you pay attention to both.</p></li><li><p>Most importantly, most computing problems yield better solutions when the problem solver has the capability of both at his or her disposal.</p></li></ul><h3 id="1-4-A-Computer-System"><a href="#1-4-A-Computer-System" class="headerlink" title="1.4 A  Computer System"></a>1.4 A  Computer System</h3><ul><li>Computer – a system consisting of the software (i.e., computer programs) that directs and specifies the processing of information (控制信息的处理过程) and the hardware that performs the actual processing of information (执行处理过程) in response to what the software asks the hardware to do.</li><li>This hardware is a central processing unit (CPU)</li><li>Computer —— the collection of parts that in combination from their computer system. in addition to the processor, a key- board for typing commands, a mouse or keypad or joystick for positioning on menu entries, a monitor for displaying information that the computer system has produced, memory for temporarily storing information, disks and USB memory sticks of one sort or another for storing information for a very long time, even after the computer has been turned off, connections to other devices such as a printer for obtaining paper copies of that information, and the collection of programs (the software) that the user wishes to execute.</li></ul><h3 id="1-5-Two-Very-Important-Ideas"><a href="#1-5-Two-Very-Important-Ideas" class="headerlink" title="1.5 Two Very Important Ideas"></a>1.5 Two Very Important Ideas</h3><div class="note primary no-icon modern"><p>a. All computers (the biggest and the smallest, the fastest and the slowest, the most expensive and the cheapest) are capable of computing exactly the same things if they are given enough time and enough memory. That is, anything a fast computer can do, a slow computer can do also. The slow computer just does it more slowly. A more expensive computer cannot figure out something that a cheaper computer is unable to figure out as long as the cheaper computer can access enough memory. All computers can do exactly the same things. Some computers can do things faster, but none can do more than any other.</p></div><div class="note primary no-icon modern"><p>b. We describe our problems in English or some other language spoken by people. It is necessary to transform our problem from the language of humans to the voltages that influence the flow of electrons. This transformation is really a sequence of systematic transformations.</p></div><h3 id="1-6-Computers-as-Universal-Computational-Devices"><a href="#1-6-Computers-as-Universal-Computational-Devices" class="headerlink" title="1.6 Computers as Universal Computational Devices"></a>1.6 Computers as Universal Computational Devices</h3><ul><li><p>Before modern computers</p><ul><li><p>analog machines </p><ul><li><p>produced an answer by measuring some physical quantity</p></li><li><p>very hard to increase their accuracy</p></li></ul></li><li><p>digital machine</p><ul><li>adding machine</li></ul></li></ul></li><li><p>We don’t have to buy a new computer. We just give the old computer a new set of instructions (a program) to carry out the new computation</p></li><li><p>Anything that can be computed, can be computed by a computer provided it has enough time and enough memory. So computers are programmable.</p></li><li><p>A big  or expensive computer cannot do more than a small cheap computer.</p></li><li><p>Computer Capability</p><ul><li>The ability to solve the problem is not dependent on the quality of one computer, which only affects the time to solve a problem.</li></ul></li></ul><h3 id="1-7-How-Do-We-Get-the-Electrons-to-Do-the-Work"><a href="#1-7-How-Do-We-Get-the-Electrons-to-Do-the-Work" class="headerlink" title="1.7 How Do We Get the Electrons to Do the Work?"></a>1.7 How Do We Get the Electrons to Do the Work?</h3><p>  We call the steps of this process the “Levels of Transformation.” As we will see, at each level we have choices. If we ignore any of the levels, our ability to make the best use of our computing system can be very adversely affected.</p><h4 id="Transformation-Hierarchy"><a href="#Transformation-Hierarchy" class="headerlink" title="Transformation Hierarchy"></a>Transformation Hierarchy</h4><ul><li><img src="/2023/07/25/ICS-Chapter1/IMG_16995C05591F-1.jpeg" alt="IMG_16995C05591F-1" style="zoom:50%;"></li><li><p>The Statement of the Problem: Computer can not understand natural language, because of ambiguity, so the first step is interpreting the problem.<br>To tell it to do something where there are multiple interpretations would cause the computer to not know which interpretation to follow.</p></li><li><p>The Algorithm: step-by-step procedure that is guaranteed to terminate, such that each step is precisely stated and can be carried out by the computer.</p><ul><li><p>effective computability : each step can be carried out by a computer<br>To take the largest prime number lacks effective computability</p></li><li><p>definiteness : each step is precisely stated<br>stir until lumpy lacks definiteness, since the notion of lumpiness is not precise</p></li><li><p>finiteness : the procedure will terminate</p></li><li><p>small example: Data Type Conversion – the unary into binary</p></li></ul></li><li><p>Program</p><p>transform the algorithm into a computer program in one of the programming languages that are available.</p><ul><li><p>Programming languages are mechanical languages (C, C++m COBOL, Fortran, Pascal)</p></li><li><p>high-level languages: at a distance (a high level) from the underlying computer. At their best, they are independent of the computer on which the programs will execute. We say the language is “machine independent.” （先前的几种都是高级语言）</p></li><li><p>low-level languages: tied to the computer on which the programs will execute. There is generally one such low-level language for each computer. That language is called the assembly language (汇编语言)for that computer.</p></li></ul></li><li><p>ISA ( instruction set architecture )</p><p>complete specification  of the interface between programs and the underlying computer hardware<br>​</p><ul><li><p>opcode: describe the operation</p></li><li><p>operand: describe individual data values</p></li><li><p>data types: representation of an operand such that the computer can perform operations on that representation</p></li><li><p>addressing mode: the mechanisms that the computer can use to figure out where the operands are located</p></li><li><p>The number of opcodes, data types, and addressing modes specified by an ISA vary among different ISAs.<br>Some ISAs have one or two addressing modes, whereas others have more than 20. The x86, the ISA used in the PC, has more than 200 opcodes, more than a dozen data types, and more than two dozen addressing modes.</p></li><li><p>ex. x86(intel), ARM, THUMB, POWER</p></li><li><p>The translation from a high-level language ( C ) to the ISA of the computer is usually done by a translating program called compiler. For each high-level language and each desired target ISA, one must provide a corresponding compiler.</p></li><li><p>The translation from the unique assembly language of a computer to its ISA is done by an assembler.</p></li><li><p>汇编语言是用人类看得懂的语言来描述指令集。否则指令集的机器码都是一堆二进制数字，人类读起来非常麻烦。但是汇编语言也有缺点，首先汇编语言操作起来还是挺麻烦的。其次汇编语言对应一条条指令集，所以当指令集改变时，就得修改相应汇编语言，导致其可移植性很差，不能跨平台使用，如ARM的汇编语言与Intel X86的就不同。这时人们就想开发一种更方便操作，超越指令集的语言，于是有了C，C++等高级语言。</p></li><li><p>ISA 连接自然语言描述功能和电脑理解功能 （eg 定义汽车踏板的作用，但是对踏板背后的实现不做要求）</p></li></ul></li><li><p>Micro Architecture</p><ul><li><p>implementation of the ISA</p></li><li><p>can be different from each other</p></li><li><p>Computer design is always an exercise in tradeoffs, as the designer opts for higher (or lower) performance, more (or less) energy required, at greater(or lesser) cost.</p></li><li><p>一个指令集可能有多个微架构，但一个微架构只适用于一个指令集</p></li></ul></li><li><p>Logic Gates</p><ul><li>also have many choices, like an addition, there are several choices of logic circuits to perform the operations at different speeds and corresponding costs</li></ul></li><li><p>Electronic circuits</p></li><li><p>Electron</p></li><li><p>If you are familiar with all layers, you will do a better job</p></li></ul>]]></content>
    
    
    <summary type="html">计算机系统概论Chapter1课程笔记，教材采用Yale Patt - Introduction to Computing Systems(3rd Edition)</summary>
    
    
    
    <category term="课程笔记" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ICS" scheme="http://example.com/tags/ICS/"/>
    
    <category term="计算机系统概论" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>在Butterfly和hexo内写blog的部分语法</title>
    <link href="http://example.com/2023/07/24/Butterfly/"/>
    <id>http://example.com/2023/07/24/Butterfly/</id>
    <published>2023-07-24T07:24:30.000Z</published>
    <updated>2023-07-26T11:11:30.128Z</updated>
    
    <content type="html"><![CDATA[<p>摘录自官方教程，便于查看的一些写博客语法w</p><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>用法</th></tr></thead><tbody><tr><td>class</td><td>【可选】标识，不同的标识有不同的配色（ default &#x2F; primary &#x2F; success &#x2F; info &#x2F; warning &#x2F; danger ）</td></tr><tr><td>no-icon</td><td>【可选】不显示 icon</td></tr><tr><td>style</td><td>【可选】可以覆盖配置中的 style （simple&#x2F;modern&#x2F;flat&#x2F;disabled）</td></tr></tbody></table><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><div class="note default simple"><p>default simple</p></div><div class="note default modern"><p>default modern</p></div><div class="note default flat"><p>default flat</p></div><div class="note default disabled"><p>default disabled</p></div><h3 id="primary"><a href="#primary" class="headerlink" title="primary"></a>primary</h3><div class="note primary simple"><p>primary simple</p></div><div class="note primary modern"><p>primary modern</p></div><div class="note primary flat"><p>primary flat</p></div><div class="note primary disabled"><p>primary disabled</p></div><h3 id="success"><a href="#success" class="headerlink" title="success"></a>success</h3><div class="note success simple"><p>success simple</p></div><div class="note success modern"><p>success modern</p></div><div class="note success flat"><p>success flat</p></div><div class="note success disabled"><p>success disabled</p></div><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><div class="note info simple"><p>info simple</p></div><div class="note info modern"><p>info modern</p></div><div class="note info flat"><p>info flat</p></div><div class="note info disabled"><p>info disabled</p></div><h3 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h3><div class="note warning simple"><p>warning simple</p></div><div class="note warning modern"><p>warning modern</p></div><div class="note warning flat"><p>warning flat</p></div><div class="note warning disabled"><p>warning disabled</p></div><h3 id="danger"><a href="#danger" class="headerlink" title="danger"></a>danger</h3><div class="note danger simple"><p>danger simple</p></div><div class="note danger modern"><p>danger modern</p></div><div class="note danger flat"><p>danger flat</p></div><div class="note danger disabled"><p>danger disabled</p></div><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label green">green</mark> <mark class="hl-label blue">blue</mark> <mark class="hl-label red">red</mark> <mark class="hl-label pink">pink</mark> <h2 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,blue(pink/red/purple/orange/green) %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">這是測試頁面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline blue"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>這是測試頁面</p></div></div></div><div class="timeline pink"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2023</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>這是測試頁面</p></div></div></div><div class="timeline purple"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2021</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>這是測試頁面</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-03</p></div></div><div class="timeline-item-content"><p>第二条～</p></div></div></div>]]></content>
    
    
    <summary type="html">摘录自官方教程，便于查看的一些写博客语法w</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="http://example.com/tags/Butterfly/"/>
    
  </entry>
  
</feed>
